{
	"openrpc": "1.0.0",
	"info": {
		"version": "1.0.0",
		"title": "Linea JSON-RPC Specification",
		"description": "Linea is a type 2 zero knowledge Ethereum Virtual Machine (zkEVM). Linea allows you to deploy any smart contract, use any tool, and develop as if you're building on Ethereum. For users, this enables the experience and security guarantees of Ethereum, but with lower transaction costs.",
		"license": {
			"name": "MIT"
		}
	},
	"methods": [
		{
			"name": "admin_addPeer",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Archive"
				},
				{
					"name": "Besu"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in for admin_addPeer",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "admin_addPeer",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "admin_changeLogLevel",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "admin_changeLogLevel",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "admin_generateLogBloomCache",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "admin_generateLogBloomCache",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "admin_logsRemoveCache",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "admin_logsRemoveCache",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "admin_logsRepairCache",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "admin_logsRepairCache",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "admin_nodeInfo",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "admin_nodeInfo",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "admin_peers",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "admin_peers",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "admin_removePeer",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "admin_removePeer",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "debug_accountAt",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "debug_accountAt",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "debug_accountRange",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "debug_accountRange",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "debug_batchSendRawTransaction",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "debug_batchSendRawTransaction",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "debug_getBadBlocks",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "debug_getBadBlocks",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "debug_getRawBlock",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Besu"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "debug_getRawBlock",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "debug_getRawHeader",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Besu"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "debug_getRawHeader",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "debug_metrics",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "debug_metrics",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "debug_replayBlock",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Besu"
				},
				{
					"name": "Archive"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "debug_replayBlock",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "debug_resyncWorldstate",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "debug_resyncWorldstate",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "debug_setHead",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "debug_setHead",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "debug_standardTraceBadBlockToFile",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "debug_standardTraceBadBlockToFile",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "debug_standardTraceBlockToFile",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "debug_standardTraceBlockToFile",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "debug_storageRangeAt",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "debug_storageRangeAt",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "debug_traceBlock",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "debug_traceBlock",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "debug_traceBlockByHash",
			"tags": [
				{
					"name": "Paid plan"
				}
			],
			"summary": "Get trace by block hash",
			"description": "This request returns tracer objects for the given block hash.",
			"params": [
				{
					"name": "blockHash",
					"required": true,
					"schema": {
						"description": "A string representing the hash (32 bytes) of a block.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					}
				},
				{
					"name": "tracerConfig",
					"description": "Apply one of the following options to customize the tracer.",
					"required": true,
					"schema": {
						"anyOf": [
							{
								"type": "object",
								"required": [
									"tracerType"
								],
								"properties": {
									"tracerType": {
										"description": "The type of tracer; restricted to work with associated config options.",
										"type": "string",
										"enum": [
											"callTracer"
										]
									},
									"onlyTopCall": {
										"description": "When `true`, will only trace the primary (top-level) call and not any sub-calls. It eliminates the additional processing for each call frame.",
										"type": "boolean"
									},
									"withLog": {
										"description": "When  `true`, instructs the tracer to also collect the logs emitted during each call.",
										"type": "boolean"
									}
								}
							},
							{
								"type": "object",
								"required": [
									"tracerType"
								],
								"properties": {
									"tracerType": {
										"description": "The prestate tracer has two modes, `prestate` and `diff`. The prestate mode returns the accounts necessary to execute a given transaction. `diff` mode returns the differences between the transaction's pre- and post-state (what changed *because* the transaction happened). The prestateTracer defaults to `prestate` mode. It reexecutes the given transaction and tracks every part of state that's touched.",
										"type": "string",
										"enum": [
											"prestateTracer"
										]
									},
									"diffMode": {
										"type": "boolean",
										"default": false,
										"description": "Setting this to `true` enables `diff` mode. In `diff` mode, the result contains a pre and a post object."
									}
								}
							},
							{
								"type": "object",
								"required": [
									"tracerType"
								],
								"properties": {
									"tracerType": {
										"description": "The type of tracer; restricted to work with associated config options.",
										"type": "string",
										"enum": [
											"flatCallTracer"
										]
									}
								}
							},
							{
								"type": "object",
								"required": [
									"tracerType"
								],
								"properties": {
									"tracerType": {
										"description": "The type of tracer; restricted to work with associated config options.",
										"type": "string",
										"enum": [
											"4byteTracer"
										]
									}
								}
							}
						]
					}
				}
			],
			"result": {
				"name": "debug_traceBlockByHashResponse",
				"description": "Returns the specified tracer type object.",
				"schema": {
					"anyOf": [
						{
							"description": "This returns all the call frames executed during a transaction, including depth 0. The result provides a nested list of call frames. They form a tree with the top-level call at root and sub-calls as children of the higher levels.",
							"properties": {
								"calls": {
									"type": "object",
									"items": {
										"anyOf": [
											{
												"transactionInfo": null,
												"type": "object",
												"properties": {
													"tracerData": {
														"type": "object",
														"description": "Tracer object.",
														"properties": {
															"from": {
																"description": "Address of the sender.",
																"type": "string",
																"pattern": "^0x[0-9a-fA-F]{40}$"
															},
															"gas": {
																"description": "Gas provided by the sender.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"gasUsed": {
																"description": "The amount of gas used for this specific transaction.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"input": {
																"description": "The input data sent to the contract (ABI-encoded).",
																"type": "string",
																"pattern": "^0x[0-9a-f]*$"
															},
															"output": {
																"description": "The output data returned by the contract.",
																"type": "string",
																"pattern": "^0x[0-9a-f]*$"
															},
															"to": {
																"description": "The contract or address being called.",
																"type": "string",
																"pattern": "^0x[0-9a-fA-F]{40}$"
															},
															"error": {
																"description": "Error, if any.",
																"type": "string"
															},
															"revertReason": {
																"description": "Solidity revert reason, if any."
															},
															"type": {
																"type": "string",
																"description": "The type of call used in the transaction.",
																"enum": [
																	"staticcall",
																	"call",
																	"delegatecall",
																	"callcode",
																	"create",
																	"create2",
																	"selfdestruct"
																]
															},
															"value": {
																"description": "The amount of ETH in wei transferred in the call.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															}
														}
													},
													"linkedCalls": {
														"type": "array",
														"description": "A recursive structure that nests additional call frames. Each call frame can, in turn, make sub-calls, and the calls field within each frame captures those sub-calls.",
														"items": {
															"type": "object",
															"properties": {
																"from": {
																	"description": "Address of the sender.",
																	"type": "string",
																	"pattern": "^0x[0-9a-fA-F]{40}$"
																},
																"gas": {
																	"description": "Gas provided by the sender.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"gasUsed": {
																	"description": "The amount of gas used for this specific transaction.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"input": {
																	"description": "The input data sent to the contract (ABI-encoded).",
																	"type": "string",
																	"pattern": "^0x[0-9a-f]*$"
																},
																"output": {
																	"description": "The output data returned by the contract.",
																	"type": "string",
																	"pattern": "^0x[0-9a-f]*$"
																},
																"to": {
																	"description": "The contract or address being called.",
																	"type": "string",
																	"pattern": "^0x[0-9a-fA-F]{40}$"
																},
																"error": {
																	"description": "Error, if any.",
																	"type": "string"
																},
																"revertReason": {
																	"description": "Solidity revert reason, if any."
																},
																"type": {
																	"type": "string",
																	"description": "The type of call used in the transaction.",
																	"enum": [
																		"staticcall",
																		"call",
																		"delegatecall",
																		"callcode",
																		"create",
																		"create2",
																		"selfdestruct"
																	]
																},
																"value": {
																	"description": "The amount of ETH in wei transferred in the call.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															}
														}
													}
												}
											},
											{
												"type": "object",
												"properties": {
													"from": {
														"description": "Address of the sender.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$"
													},
													"gas": {
														"description": "Gas provided by the sender.",
														"type": "string",
														"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
														"example": "0x1"
													},
													"gasUsed": {
														"description": "The amount of gas used for this specific transaction.",
														"type": "string",
														"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
														"example": "0x1"
													},
													"input": {
														"description": "The input data sent to the contract (ABI-encoded).",
														"type": "string",
														"pattern": "^0x[0-9a-f]*$"
													},
													"output": {
														"description": "The output data returned by the contract.",
														"type": "string",
														"pattern": "^0x[0-9a-f]*$"
													},
													"to": {
														"description": "The contract or address being called.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$"
													},
													"error": {
														"description": "Error, if any.",
														"type": "string"
													},
													"revertReason": {
														"description": "Solidity revert reason, if any."
													},
													"type": {
														"type": "string",
														"description": "The type of call used in the transaction.",
														"enum": [
															"staticcall",
															"call",
															"delegatecall",
															"callcode",
															"create",
															"create2",
															"selfdestruct"
														]
													},
													"value": {
														"description": "The amount of ETH in wei transferred in the call.",
														"type": "string",
														"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
														"example": "0x1"
													}
												},
												"calls": null,
												"description": "Next call object."
											}
										]
									}
								}
							}
						},
						{
							"type": "array",
							"description": "Participant account, balance, and transaction count.",
							"items": {
								"type": "object",
								"properties": {
									"address": {
										"description": "Participant account.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$"
									},
									"balance": {
										"description": "Balance.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
									},
									"nonce": {
										"description": "Account nonce; counter for the number of transactions sent from the account; for replay protection.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
									}
								}
							}
						},
						{
							"type": "array",
							"description": "An array of trace results from the 4byteTracer.",
							"items": {
								"type": "object",
								"properties": {
									"result": {
										"type": "object",
										"description": "A map where the key is a function selector and calldata size, and the value is the number of occurrences.",
										"additionalProperties": {
											"type": "integer",
											"description": "Number of occurrences of the function call with the specified selector and calldata size."
										}
									},
									"transactionHash": {
										"description": "The transaction hash that the traces relate to.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									}
								}
							}
						},
						{
							"description": "Returns all the call frames executed during a transaction in a flat structure. Each call frame includes details about the action taken, gas used, and other transaction information. Unlike `callTracer`, this result is not nested.\n",
							"type": "object",
							"title": "TracerObject",
							"properties": {
								"from": {
									"description": "Address of the sender.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"gas": {
									"description": "Gas provided by the sender.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"gasUsed": {
									"description": "The amount of gas used for this specific transaction.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"input": {
									"description": "The input data sent to the contract (ABI-encoded).",
									"type": "string",
									"pattern": "^0x[0-9a-f]*$"
								},
								"output": {
									"description": "The output data returned by the contract.",
									"type": "string",
									"pattern": "^0x[0-9a-f]*$"
								},
								"to": {
									"description": "The contract or address being called.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"error": {
									"description": "Error, if any.",
									"type": "string"
								},
								"revertReason": {
									"description": "Solidity revert reason, if any."
								},
								"type": {
									"type": "string",
									"description": "The type of call used in the transaction.",
									"enum": [
										"staticcall",
										"call",
										"delegatecall",
										"callcode",
										"create",
										"create2",
										"selfdestruct"
									]
								},
								"value": {
									"description": "The amount of ETH in wei transferred in the call.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"blockHash": {
									"description": "32-byte block hash in which the call was made.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"blockNumber": {
									"description": "Block number as hex-encoded unsigned integer.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"subtraces": {
									"type": "integer",
									"description": "The number of subtraces that occurred within the call."
								},
								"traceAddress": {
									"type": "array",
									"description": "The trace address showing the nested level of the call.",
									"items": {
										"type": "integer"
									}
								},
								"transactionHash": {
									"description": "The transaction hash in which the call was made.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"transactionPosition": {
									"type": "integer",
									"description": "The position of the transaction within the block."
								}
							}
						}
					]
				}
			},
			"examples": [
				{
					"name": "debug_traceBlockByHashExampleCallTracer",
					"jsonrpc": "2.0",
					"method": "debug_traceBlockByHash",
					"id": 1,
					"params": [
						{
							"name": "blockHash",
							"value": "0xd713b3656eb77f26bb6c95d459b3479b3327e7c639622b5a78de1b529021d272"
						},
						{
							"name": "tracerConfig",
							"value": {
								"tracer": "callTracer",
								"tracerConfig": {
									"onlyTopCall": false,
									"withLog": false
								}
							}
						}
					],
					"result": {
						"name": "debug_traceBlockByHashCallTracerExampleResponse",
						"value": {
							"calls": [
								{
									"calls": [
										{
											"calls": [
												{
													"calls": [
														{
															"calls": [
																{
																	"from": "0x81f6138153d473e8c5ecebd3dc8cd4903506b075",
																	"gas": "0x11f8",
																	"gasUsed": "0x0",
																	"input": "0x",
																	"to": "0xc08e5aba57275df66488973b97d233ee4eba5179",
																	"type": "CALL",
																	"value": "0x881af82a81a4000"
																}
															]
														},
														{
															"from": "0x5f688f563dc16590e570f97b542fa87931af2fed",
															"gas": "0x2be7e",
															"gasUsed": "0x6c96",
															"input": "0x203bd15f00000000000000000000000000000000000000000000000000000000000075e80000000000000000000000005634c4a5fed09819e3c46d86a965dd9447d86e470000000000000000000000000000000000000000000000000000000000008eb3252dd050cf1396907a4d94e4757d0cc4e82bd2a5e14c4dee2cafa24695f56765000000000000000000000000c08e5aba57275df66488973b97d233ee4eba51790000000000000000000000000000000000000000000000000000000000095a6400000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000",
															"to": "0x81f6138153d473e8c5ecebd3dc8cd4903506b075",
															"type": "CALL",
															"value": "0x0"
														}
													]
												},
												{
													"from": "0x1a44076050125825900e736c501f859c50fe728c",
													"gas": "0x2f21a",
													"gasUsed": "0x9576",
													"input": "0x13137d6500000000000000000000000000000000000000000000000000000000000075e80000000000000000000000005634c4a5fed09819e3c46d86a965dd9447d86e470000000000000000000000000000000000000000000000000000000000008eb3252dd050cf1396907a4d94e4757d0cc4e82bd2a5e14c4dee2cafa24695f5676500000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000408804c5dcd9796f22558464e6fe5bddf16a7c70000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000002b01000d000000000000000000000000c08e5aba57275df66488973b97d233ee4eba51790000000000095a640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
													"to": "0x5f688f563dc16590e570f97b542fa87931af2fed",
													"type": "CALL",
													"value": "0x0"
												}
											]
										},
										{
											"from": "0x0408804c5dcd9796f22558464e6fe5bddf16a7c7",
											"gas": "0x34008",
											"gasUsed": "0xdff4",
											"input": "0x0c0c389e00000000000000000000000000000000000000000000000000000000000075e80000000000000000000000005634c4a5fed09819e3c46d86a965dd9447d86e470000000000000000000000000000000000000000000000000000000000008eb30000000000000000000000005f688f563dc16590e570f97b542fa87931af2fed252dd050cf1396907a4d94e4757d0cc4e82bd2a5e14c4dee2cafa24695f5676500000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000002b01000d000000000000000000000000c08e5aba57275df66488973b97d233ee4eba51790000000000095a640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
											"to": "0x1a44076050125825900e736c501f859c50fe728c",
											"type": "CALL",
											"value": "0x0"
										},
										{
											"from": "0x0408804c5dcd9796f22558464e6fe5bddf16a7c7",
											"gas": "0x57b12",
											"gasUsed": "0x11708",
											"input": "0xcfc3257000000000000000000000000000000000000000000000000000000000000000200000000000000000000000005f688f563dc16590e570f97b542fa87931af2fed00000000000000000000000000000000000000000000000000000000000075e80000000000000000000000005634c4a5fed09819e3c46d86a965dd9447d86e470000000000000000000000000000000000000000000000000000000000008eb3252dd050cf1396907a4d94e4757d0cc4e82bd2a5e14c4dee2cafa24695f56765000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000034008000000000000000000000000000000000000000000000000000000000000002b01000d000000000000000000000000c08e5aba57275df66488973b97d233ee4eba51790000000000095a640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
											"to": "0x41abb80c2c404dec94b9f09bf758b8fa22ebbc73",
											"type": "DELEGATECALL",
											"value": "0x0"
										},
										{
											"from": "0xe93685f3bba03016f02bd1828badd6195988d950",
											"gas": "0x60324",
											"gasUsed": "0x1605b",
											"input": "0xcfc3257000000000000000000000000000000000000000000000000000000000000000200000000000000000000000005f688f563dc16590e570f97b542fa87931af2fed00000000000000000000000000000000000000000000000000000000000075e80000000000000000000000005634c4a5fed09819e3c46d86a965dd9447d86e470000000000000000000000000000000000000000000000000000000000008eb3252dd050cf1396907a4d94e4757d0cc4e82bd2a5e14c4dee2cafa24695f56765000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000034008000000000000000000000000000000000000000000000000000000000000002b01000d000000000000000000000000c08e5aba57275df66488973b97d233ee4eba51790000000000095a640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
											"to": "0x0408804c5dcd9796f22558464e6fe5bddf16a7c7",
											"type": "CALL",
											"value": "0x0",
											"txHash": "0xd19361dd3b67fa3bf31be06593c0bf3b190d8e5a6cd4149d06d148eaed976d92"
										}
									]
								}
							]
						}
					}
				},
				{
					"name": "debug_traceBlockByHashExample4byteTracer",
					"jsonrpc": "2.0",
					"method": "debug_traceBlockByHash",
					"id": 1,
					"params": [
						{
							"name": "blockHash",
							"value": "0xd713b3656ebb7f26bb6c95d459b3479b3327e7c639622b5a78de1b529021d272"
						},
						{
							"name": "tracerConfig",
							"value": {
								"tracer": "4byteTracer"
							}
						}
					],
					"result": {
						"name": "debug_traceBlockByHash4byteTracerExampleResponse",
						"description": "4byteTracer response providing a map whose keys are SELECTOR-CALLDATASIZE and the values are number of occurrences of this key.",
						"value": {
							"traces": [
								{
									"result": {
										"0x0c0c389e-352": 1,
										"0x13137d65-352": 1,
										"0x203bd15f-256": 1,
										"0xcfc32570-416": 2
									},
									"txHash": "0xd19361dd3b67fa3bf31be06593c0bf3b190d8e5a6cd4149d06d148eaed976d92"
								},
								{
									"result": {
										"0x051456a8-288": 1,
										"0x23b872dd-96": 2,
										"0x2cc4081e-608": 1,
										"0x4625a94d-192": 2,
										"0x6cb568c1-128": 1,
										"0x70a08231-32": 2,
										"0x7132bb7f-288": 1,
										"0xabcef554-32": 2,
										"0xb1dd61b6-0": 1,
										"0xf7888aec-64": 2,
										"0xf9609f08-64": 1
									},
									"txHash": "0x0a4d6f4bd64b0874b45e9c2656260f81941142183322b84e9ee72fc4cff960c2"
								},
								{
									"result": {},
									"txHash": "0xf59cd5e2838fa5643d054c265e93e898982ad778c8c1779d6ab532c0c0374722"
								},
								{
									"result": {
										"0xa2a9539c-256": 2
									},
									"txHash": "0x7722a7f28b9f293539fe6f3cfc81640c877ce1c2b36926686916590ed5b964be"
								},
								{
									"result": {
										"0xa2a9539c-256": 2
									},
									"txHash": "0x0b4abb0d825bb8ea65e943752c23d7929b421880f2d191563dc025dd871d6f25"
								},
								{
									"result": {
										"0xa2a9539c-256": 2
									},
									"txHash": "0x06a50602ed0e7bd2fdfba5cb2640dd26c2b5a652a59faa9a2576e045305a0dc1"
								},
								{
									"result": {
										"0xd123b4d8-960": 2
									},
									"txHash": "0xbd95b970d10b04c119af4211b6cc2ee35553fcc8dece61bdb749a34634d294d4"
								},
								{
									"result": {},
									"txHash": "0x43cc3e8e4b9031d1cf82dbb308770f47bcb302360f5ea1547ae295c9a4987980"
								},
								{
									"result": {},
									"txHash": "0x36d54f9282787b6eb08530e9005fce730cfa97b23615d5b0d"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "debug_traceBlockByNumber",
			"tags": [
				{
					"name": "Paid plan"
				},
				{
					"name": "Archive"
				}
			],
			"summary": "Get trace by block number",
			"description": "This request returns tracer objects for the given block identified by number or tag.",
			"params": [
				{
					"name": "block",
					"description": "Block number or string tag.",
					"required": true,
					"schema": {
						"description": "Block number or string tag.",
						"oneOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"finalized",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							}
						]
					}
				},
				{
					"name": "tracerConfig",
					"description": "Apply one of the following options to customize the tracer.",
					"required": true,
					"schema": {
						"anyOf": [
							{
								"type": "object",
								"required": [
									"tracerType"
								],
								"properties": {
									"tracerType": {
										"description": "The type of tracer; restricted to work with associated config options.",
										"type": "string",
										"enum": [
											"callTracer"
										]
									},
									"onlyTopCall": {
										"description": "When `true`, will only trace the primary (top-level) call and not any sub-calls. It eliminates the additional processing for each call frame.",
										"type": "boolean"
									},
									"withLog": {
										"description": "When  `true`, instructs the tracer to also collect the logs emitted during each call.",
										"type": "boolean"
									}
								}
							},
							{
								"type": "object",
								"required": [
									"tracerType"
								],
								"properties": {
									"tracerType": {
										"description": "The prestate tracer has two modes, `prestate` and `diff`. The prestate mode returns the accounts necessary to execute a given transaction. `diff` mode returns the differences between the transaction's pre- and post-state (what changed *because* the transaction happened). The prestateTracer defaults to `prestate` mode. It reexecutes the given transaction and tracks every part of state that's touched.",
										"type": "string",
										"enum": [
											"prestateTracer"
										]
									},
									"diffMode": {
										"type": "boolean",
										"default": false,
										"description": "Setting this to `true` enables `diff` mode. In `diff` mode, the result contains a pre and a post object."
									}
								}
							},
							{
								"type": "object",
								"required": [
									"tracerType"
								],
								"properties": {
									"tracerType": {
										"description": "The type of tracer; restricted to work with associated config options.",
										"type": "string",
										"enum": [
											"flatCallTracer"
										]
									}
								}
							},
							{
								"type": "object",
								"required": [
									"tracerType"
								],
								"properties": {
									"tracerType": {
										"description": "The type of tracer; restricted to work with associated config options.",
										"type": "string",
										"enum": [
											"4byteTracer"
										]
									}
								}
							}
						]
					}
				}
			],
			"result": {
				"name": "debug_traceBlockByNumberResponse",
				"description": "Returns the specified tracer type object.",
				"schema": {
					"anyOf": [
						{
							"description": "This returns all the call frames executed during a transaction, including depth 0. The result provides a nested list of call frames. They form a tree with the top-level call at root and sub-calls as children of the higher levels.",
							"properties": {
								"calls": {
									"type": "object",
									"items": {
										"anyOf": [
											{
												"transactionInfo": null,
												"type": "object",
												"properties": {
													"tracerData": {
														"type": "object",
														"description": "Tracer object.",
														"properties": {
															"from": {
																"description": "Address of the sender.",
																"type": "string",
																"pattern": "^0x[0-9a-fA-F]{40}$"
															},
															"gas": {
																"description": "Gas provided by the sender.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"gasUsed": {
																"description": "The amount of gas used for this specific transaction.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"input": {
																"description": "The input data sent to the contract (ABI-encoded).",
																"type": "string",
																"pattern": "^0x[0-9a-f]*$"
															},
															"output": {
																"description": "The output data returned by the contract.",
																"type": "string",
																"pattern": "^0x[0-9a-f]*$"
															},
															"to": {
																"description": "The contract or address being called.",
																"type": "string",
																"pattern": "^0x[0-9a-fA-F]{40}$"
															},
															"error": {
																"description": "Error, if any.",
																"type": "string"
															},
															"revertReason": {
																"description": "Solidity revert reason, if any."
															},
															"type": {
																"type": "string",
																"description": "The type of call used in the transaction.",
																"enum": [
																	"staticcall",
																	"call",
																	"delegatecall",
																	"callcode",
																	"create",
																	"create2",
																	"selfdestruct"
																]
															},
															"value": {
																"description": "The amount of ETH in wei transferred in the call.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															}
														}
													},
													"linkedCalls": {
														"type": "array",
														"description": "A recursive structure that nests additional call frames. Each call frame can, in turn, make sub-calls, and the calls field within each frame captures those sub-calls.",
														"items": {
															"type": "object",
															"properties": {
																"from": {
																	"description": "Address of the sender.",
																	"type": "string",
																	"pattern": "^0x[0-9a-fA-F]{40}$"
																},
																"gas": {
																	"description": "Gas provided by the sender.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"gasUsed": {
																	"description": "The amount of gas used for this specific transaction.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"input": {
																	"description": "The input data sent to the contract (ABI-encoded).",
																	"type": "string",
																	"pattern": "^0x[0-9a-f]*$"
																},
																"output": {
																	"description": "The output data returned by the contract.",
																	"type": "string",
																	"pattern": "^0x[0-9a-f]*$"
																},
																"to": {
																	"description": "The contract or address being called.",
																	"type": "string",
																	"pattern": "^0x[0-9a-fA-F]{40}$"
																},
																"error": {
																	"description": "Error, if any.",
																	"type": "string"
																},
																"revertReason": {
																	"description": "Solidity revert reason, if any."
																},
																"type": {
																	"type": "string",
																	"description": "The type of call used in the transaction.",
																	"enum": [
																		"staticcall",
																		"call",
																		"delegatecall",
																		"callcode",
																		"create",
																		"create2",
																		"selfdestruct"
																	]
																},
																"value": {
																	"description": "The amount of ETH in wei transferred in the call.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															}
														}
													}
												}
											},
											{
												"type": "object",
												"properties": {
													"from": {
														"description": "Address of the sender.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$"
													},
													"gas": {
														"description": "Gas provided by the sender.",
														"type": "string",
														"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
														"example": "0x1"
													},
													"gasUsed": {
														"description": "The amount of gas used for this specific transaction.",
														"type": "string",
														"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
														"example": "0x1"
													},
													"input": {
														"description": "The input data sent to the contract (ABI-encoded).",
														"type": "string",
														"pattern": "^0x[0-9a-f]*$"
													},
													"output": {
														"description": "The output data returned by the contract.",
														"type": "string",
														"pattern": "^0x[0-9a-f]*$"
													},
													"to": {
														"description": "The contract or address being called.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$"
													},
													"error": {
														"description": "Error, if any.",
														"type": "string"
													},
													"revertReason": {
														"description": "Solidity revert reason, if any."
													},
													"type": {
														"type": "string",
														"description": "The type of call used in the transaction.",
														"enum": [
															"staticcall",
															"call",
															"delegatecall",
															"callcode",
															"create",
															"create2",
															"selfdestruct"
														]
													},
													"value": {
														"description": "The amount of ETH in wei transferred in the call.",
														"type": "string",
														"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
														"example": "0x1"
													}
												},
												"calls": null,
												"description": "Next call object."
											}
										]
									}
								}
							}
						},
						{
							"type": "array",
							"description": "Participant account, balance, and transaction count.",
							"items": {
								"type": "object",
								"properties": {
									"address": {
										"description": "Participant account.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$"
									},
									"balance": {
										"description": "Balance.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
									},
									"nonce": {
										"description": "Account nonce; counter for the number of transactions sent from the account; for replay protection.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
									}
								}
							}
						},
						{
							"type": "array",
							"description": "An array of trace results from the 4byteTracer.",
							"items": {
								"type": "object",
								"properties": {
									"result": {
										"type": "object",
										"description": "A map where the key is a function selector and calldata size, and the value is the number of occurrences.",
										"additionalProperties": {
											"type": "integer",
											"description": "Number of occurrences of the function call with the specified selector and calldata size."
										}
									},
									"transactionHash": {
										"description": "The transaction hash that the traces relate to.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									}
								}
							}
						},
						{
							"description": "Returns all the call frames executed during a transaction in a flat structure. Each call frame includes details about the action taken, gas used, and other transaction information. Unlike `callTracer`, this result is not nested.\n",
							"type": "object",
							"title": "TracerObject",
							"properties": {
								"from": {
									"description": "Address of the sender.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"gas": {
									"description": "Gas provided by the sender.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"gasUsed": {
									"description": "The amount of gas used for this specific transaction.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"input": {
									"description": "The input data sent to the contract (ABI-encoded).",
									"type": "string",
									"pattern": "^0x[0-9a-f]*$"
								},
								"output": {
									"description": "The output data returned by the contract.",
									"type": "string",
									"pattern": "^0x[0-9a-f]*$"
								},
								"to": {
									"description": "The contract or address being called.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"error": {
									"description": "Error, if any.",
									"type": "string"
								},
								"revertReason": {
									"description": "Solidity revert reason, if any."
								},
								"type": {
									"type": "string",
									"description": "The type of call used in the transaction.",
									"enum": [
										"staticcall",
										"call",
										"delegatecall",
										"callcode",
										"create",
										"create2",
										"selfdestruct"
									]
								},
								"value": {
									"description": "The amount of ETH in wei transferred in the call.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"blockHash": {
									"description": "32-byte block hash in which the call was made.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"blockNumber": {
									"description": "Block number as hex-encoded unsigned integer.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"subtraces": {
									"type": "integer",
									"description": "The number of subtraces that occurred within the call."
								},
								"traceAddress": {
									"type": "array",
									"description": "The trace address showing the nested level of the call.",
									"items": {
										"type": "integer"
									}
								},
								"transactionHash": {
									"description": "The transaction hash in which the call was made.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"transactionPosition": {
									"type": "integer",
									"description": "The position of the transaction within the block."
								}
							}
						}
					]
				}
			},
			"examples": [
				{
					"name": "debug_traceBlockByNumberExample",
					"jsonrpc": "2.0",
					"method": "debug_traceBlockByNumber",
					"id": 1,
					"params": [
						{
							"name": "block",
							"value": "0x4d0c"
						},
						{
							"name": "tracerOptions",
							"value": "callTracer"
						}
					],
					"result": {
						"name": "debug_traceBlockByNumberExampleResponse",
						"value": {
							"calls": [
								{
									"calls": [
										{
											"from": "0x032b241de86a8660f1ae0691a4760b426ea246d7",
											"gas": "0x45f9a",
											"gasUsed": "0xc4c",
											"input": "0xbecbcc6a0000000000000000000000000a3bb08b3a15a19b4de82f8acfc862606fb69a2d000000000000000000000000e5d7c2a44ffddf6b295a15c148167daaaf5cf34f0000000000000000000000000000000000000000000000000000000000000bb8",
											"output": "0x000000000000000000000000f8018b964ac00227b892a8d3c48e682217f90bab",
											"to": "0x45e5f26451cdb01b0fa1f8582e0aad9a6f27c218",
											"type": "STATICCALL"
										},
										{
											"calls": [
												{
													"calls": [
														{
															"from": "0xf8018b964ac00227b892a8d3c48e682217f90bab",
															"gas": "0x2e09b",
															"gasUsed": "0x787f",
															"input": "0xa9059cbb00000000000000000000000018badf36ec74dae9d3f028805b58c8ca277752680000000000000000000000000000000000000000000000050b5c0ef5d801d97c",
															"output": "0x0000000000000000000000000000000000000000000000000000000000000001",
															"to": "0x0a3bb08b3a15a19b4de82f8acfc862606fb69a2d",
															"type": "CALL",
															"value": "0x0"
														},
														{
															"from": "0xf8018b964ac00227b892a8d3c48e682217f90bab",
															"gas": "0x1a1b9",
															"gasUsed": "0x216",
															"input": "0x70a08231000000000000000000000000f8018b964ac00227b892a8d3c48e682217f90bab",
															"output": "0x00000000000000000000000000000000000000000000000007c9a71528aa4bd5",
															"to": "0xe5d7c2a44ffddf6b295a15c148167daaaf5cf34f",
															"type": "STATICCALL"
														}
													]
												}
											]
										}
									]
								},
								{
									"calls": [
										{
											"from": "0xe2df725e44ab983e8513ecfc9c3e13bc21ea867e",
											"gas": "0x1c721",
											"gasUsed": "0x750a",
											"input": "0xa9059cbb000000000000000000000000272e156df8da513c69cb41cc7a99185d53f926bb00000000000000000000000000000000000000000000000000157f47b74c925b",
											"output": "0x0000000000000000000000000000000000000000000000000000000000000001",
											"to": "0xe5d7c2a44ffddf6b295a15c148167daaaf5cf34f",
											"type": "CALL",
											"value": "0x0"
										}
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "debug_traceTransaction",
			"tags": [
				{
					"name": "Paid plan"
				}
			],
			"summary": "Get trace by transaction hash",
			"description": "This request returns tracer objects for the given transaction hash.",
			"params": [
				{
					"name": "transactionHash",
					"description": "A string representing the hash (32 bytes) of a transaction.",
					"required": true,
					"schema": {
						"description": "32 byte hex value.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					}
				},
				{
					"name": "tracerConfig",
					"description": "Apply one of the following options to customize the tracer, including an optional timeout.",
					"required": true,
					"schema": {
						"type": "object",
						"anyOf": [
							{
								"type": "object",
								"required": [
									"tracerType"
								],
								"properties": {
									"tracerType": {
										"description": "The type of tracer; restricted to work with associated config options.",
										"type": "string",
										"enum": [
											"callTracer"
										]
									},
									"onlyTopCall": {
										"description": "When `true`, will only trace the primary (top-level) call and not any sub-calls. It eliminates the additional processing for each call frame.",
										"type": "boolean"
									},
									"withLog": {
										"description": "When  `true`, instructs the tracer to also collect the logs emitted during each call.",
										"type": "boolean"
									}
								}
							},
							{
								"type": "object",
								"required": [
									"tracerType"
								],
								"properties": {
									"tracerType": {
										"description": "The prestate tracer has two modes, `prestate` and `diff`. The prestate mode returns the accounts necessary to execute a given transaction. `diff` mode returns the differences between the transaction's pre- and post-state (what changed *because* the transaction happened). The prestateTracer defaults to `prestate` mode. It reexecutes the given transaction and tracks every part of state that's touched.",
										"type": "string",
										"enum": [
											"prestateTracer"
										]
									},
									"diffMode": {
										"type": "boolean",
										"default": false,
										"description": "Setting this to `true` enables `diff` mode. In `diff` mode, the result contains a pre and a post object."
									}
								}
							},
							{
								"type": "object",
								"required": [
									"tracerType"
								],
								"properties": {
									"tracerType": {
										"description": "The type of tracer; restricted to work with associated config options.",
										"type": "string",
										"enum": [
											"flatCallTracer"
										]
									}
								}
							},
							{
								"type": "object",
								"required": [
									"tracerType"
								],
								"properties": {
									"tracerType": {
										"description": "The type of tracer; restricted to work with associated config options.",
										"type": "string",
										"enum": [
											"4byteTracer"
										]
									}
								}
							}
						],
						"properties": {
							"timeout": {
								"description": "Specifies a maximum time for how long the trace operation should run before timing out. Valid units are `ns`, `us`, `ms`, `s`. For example, \"5s\" for 5 seconds or \"3s30ms\" for 3.03 seconds.",
								"type": "string",
								"example": "5s",
								"pattern": "^(10s|[0-9]s([0-9]{1,2}ms)?)?$"
							}
						}
					}
				}
			],
			"result": {
				"name": "debug_traceTransactionResponse",
				"description": "Returns the specified tracer type object.",
				"schema": {
					"anyOf": [
						{
							"description": "This returns all the call frames executed during a transaction, including depth 0. The result provides a nested list of call frames. They form a tree with the top-level call at root and sub-calls as children of the higher levels.",
							"properties": {
								"calls": {
									"type": "object",
									"items": {
										"anyOf": [
											{
												"transactionInfo": null,
												"type": "object",
												"properties": {
													"tracerData": {
														"type": "object",
														"description": "Tracer object.",
														"properties": {
															"from": {
																"description": "Address of the sender.",
																"type": "string",
																"pattern": "^0x[0-9a-fA-F]{40}$"
															},
															"gas": {
																"description": "Gas provided by the sender.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"gasUsed": {
																"description": "The amount of gas used for this specific transaction.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"input": {
																"description": "The input data sent to the contract (ABI-encoded).",
																"type": "string",
																"pattern": "^0x[0-9a-f]*$"
															},
															"output": {
																"description": "The output data returned by the contract.",
																"type": "string",
																"pattern": "^0x[0-9a-f]*$"
															},
															"to": {
																"description": "The contract or address being called.",
																"type": "string",
																"pattern": "^0x[0-9a-fA-F]{40}$"
															},
															"error": {
																"description": "Error, if any.",
																"type": "string"
															},
															"revertReason": {
																"description": "Solidity revert reason, if any."
															},
															"type": {
																"type": "string",
																"description": "The type of call used in the transaction.",
																"enum": [
																	"staticcall",
																	"call",
																	"delegatecall",
																	"callcode",
																	"create",
																	"create2",
																	"selfdestruct"
																]
															},
															"value": {
																"description": "The amount of ETH in wei transferred in the call.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															}
														}
													},
													"linkedCalls": {
														"type": "array",
														"description": "A recursive structure that nests additional call frames. Each call frame can, in turn, make sub-calls, and the calls field within each frame captures those sub-calls.",
														"items": {
															"type": "object",
															"properties": {
																"from": {
																	"description": "Address of the sender.",
																	"type": "string",
																	"pattern": "^0x[0-9a-fA-F]{40}$"
																},
																"gas": {
																	"description": "Gas provided by the sender.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"gasUsed": {
																	"description": "The amount of gas used for this specific transaction.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"input": {
																	"description": "The input data sent to the contract (ABI-encoded).",
																	"type": "string",
																	"pattern": "^0x[0-9a-f]*$"
																},
																"output": {
																	"description": "The output data returned by the contract.",
																	"type": "string",
																	"pattern": "^0x[0-9a-f]*$"
																},
																"to": {
																	"description": "The contract or address being called.",
																	"type": "string",
																	"pattern": "^0x[0-9a-fA-F]{40}$"
																},
																"error": {
																	"description": "Error, if any.",
																	"type": "string"
																},
																"revertReason": {
																	"description": "Solidity revert reason, if any."
																},
																"type": {
																	"type": "string",
																	"description": "The type of call used in the transaction.",
																	"enum": [
																		"staticcall",
																		"call",
																		"delegatecall",
																		"callcode",
																		"create",
																		"create2",
																		"selfdestruct"
																	]
																},
																"value": {
																	"description": "The amount of ETH in wei transferred in the call.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															}
														}
													}
												}
											},
											{
												"type": "object",
												"properties": {
													"from": {
														"description": "Address of the sender.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$"
													},
													"gas": {
														"description": "Gas provided by the sender.",
														"type": "string",
														"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
														"example": "0x1"
													},
													"gasUsed": {
														"description": "The amount of gas used for this specific transaction.",
														"type": "string",
														"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
														"example": "0x1"
													},
													"input": {
														"description": "The input data sent to the contract (ABI-encoded).",
														"type": "string",
														"pattern": "^0x[0-9a-f]*$"
													},
													"output": {
														"description": "The output data returned by the contract.",
														"type": "string",
														"pattern": "^0x[0-9a-f]*$"
													},
													"to": {
														"description": "The contract or address being called.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$"
													},
													"error": {
														"description": "Error, if any.",
														"type": "string"
													},
													"revertReason": {
														"description": "Solidity revert reason, if any."
													},
													"type": {
														"type": "string",
														"description": "The type of call used in the transaction.",
														"enum": [
															"staticcall",
															"call",
															"delegatecall",
															"callcode",
															"create",
															"create2",
															"selfdestruct"
														]
													},
													"value": {
														"description": "The amount of ETH in wei transferred in the call.",
														"type": "string",
														"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
														"example": "0x1"
													}
												},
												"calls": null,
												"description": "Next call object."
											}
										]
									}
								}
							}
						},
						{
							"type": "array",
							"description": "Participant account, balance, and transaction count.",
							"items": {
								"type": "object",
								"properties": {
									"address": {
										"description": "Participant account.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$"
									},
									"balance": {
										"description": "Balance.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
									},
									"nonce": {
										"description": "Account nonce; counter for the number of transactions sent from the account; for replay protection.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
									}
								}
							}
						},
						{
							"type": "array",
							"description": "An array of trace results from the 4byteTracer.",
							"items": {
								"type": "object",
								"properties": {
									"result": {
										"type": "object",
										"description": "A map where the key is a function selector and calldata size, and the value is the number of occurrences.",
										"additionalProperties": {
											"type": "integer",
											"description": "Number of occurrences of the function call with the specified selector and calldata size."
										}
									},
									"transactionHash": {
										"description": "The transaction hash that the traces relate to.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									}
								}
							}
						},
						{
							"description": "Returns all the call frames executed during a transaction in a flat structure. Each call frame includes details about the action taken, gas used, and other transaction information. Unlike `callTracer`, this result is not nested.\n",
							"type": "object",
							"title": "TracerObject",
							"properties": {
								"from": {
									"description": "Address of the sender.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"gas": {
									"description": "Gas provided by the sender.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"gasUsed": {
									"description": "The amount of gas used for this specific transaction.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"input": {
									"description": "The input data sent to the contract (ABI-encoded).",
									"type": "string",
									"pattern": "^0x[0-9a-f]*$"
								},
								"output": {
									"description": "The output data returned by the contract.",
									"type": "string",
									"pattern": "^0x[0-9a-f]*$"
								},
								"to": {
									"description": "The contract or address being called.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"error": {
									"description": "Error, if any.",
									"type": "string"
								},
								"revertReason": {
									"description": "Solidity revert reason, if any."
								},
								"type": {
									"type": "string",
									"description": "The type of call used in the transaction.",
									"enum": [
										"staticcall",
										"call",
										"delegatecall",
										"callcode",
										"create",
										"create2",
										"selfdestruct"
									]
								},
								"value": {
									"description": "The amount of ETH in wei transferred in the call.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"blockHash": {
									"description": "32-byte block hash in which the call was made.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"blockNumber": {
									"description": "Block number as hex-encoded unsigned integer.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"subtraces": {
									"type": "integer",
									"description": "The number of subtraces that occurred within the call."
								},
								"traceAddress": {
									"type": "array",
									"description": "The trace address showing the nested level of the call.",
									"items": {
										"type": "integer"
									}
								},
								"transactionHash": {
									"description": "The transaction hash in which the call was made.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"transactionPosition": {
									"type": "integer",
									"description": "The position of the transaction within the block."
								}
							}
						}
					]
				}
			},
			"examples": [
				{
					"name": "debug_traceTransactionExample",
					"jsonrpc": "2.0",
					"method": "debug_traceTransaction",
					"id": 1,
					"params": [
						{
							"name": "transactionHash",
							"value": "0x5d3faa9b9605a8fb04d989a79bfe6d3b708bdcfc66048d2fe18ed2dda4a8297c"
						},
						{
							"name": "tracerConfig",
							"value": {
								"tracer": "callTracer",
								"tracerConfig": {
									"onlyTopCall": true,
									"timeout": "3s30ms"
								}
							}
						}
					],
					"result": {
						"name": "debug_traceTransactionExampleResponse",
						"value": {
							"from": "0xa5ba45f484bc67fe293cf01f7d92d5ba3514dd42",
							"gas": "0x5208",
							"gasUsed": "0x5208",
							"input": "0x",
							"to": "0x45a318273749d6eb00f5f6ca3bc7cd3de26d642a",
							"type": "CALL",
							"value": "0x2ca186f5fda8004"
						}
					}
				}
			]
		},
		{
			"name": "eth_accounts",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Returns a null value",
			"description": "Typically, this request returns a list of addresses owned by a user. However, as Infura doesn't support \"unlocking\" of accounts, consider sending a pre-signed raw transactions using `eth_sendRawTransaction`.",
			"params": [],
			"result": {
				"name": "eth_accountsResponse",
				"description": "This request returns an empty object because Infura does not support \"unlocking\" accounts.",
				"schema": {
					"type": "array",
					"items": {
						"description": "Hex-encoded address.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					}
				}
			},
			"examples": [
				{
					"name": "eth_accountsExample",
					"jsonrpc": "2.0",
					"method": "eth_accounts",
					"id": 1,
					"params": [],
					"result": {
						"name": "eth_accountsExampleResponse",
						"value": []
					}
				}
			]
		},
		{
			"name": "eth_blockNumber",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get the latest block number",
			"description": "This request returns a hexadecimal of the current/latest block number.",
			"params": [],
			"result": {
				"name": "eth_blockNumberResponse",
				"schema": {
					"description": "The current block number the client is on, in hexadecimal.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0x1"
				}
			},
			"examples": [
				{
					"name": "eth_blockNumberExample",
					"jsonrpc": "2.0",
					"method": "eth_blockNumber",
					"id": 1,
					"params": [],
					"result": {
						"name": "eth_blockNumberExampleResponse",
						"value": "0x8a369b"
					}
				}
			]
		},
		{
			"name": "eth_call",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Execute a new message call",
			"description": "This request executes a new message call without creating a transaction on the blockchain. It allows you to invoke a contract function locally to interact with smart contracts and query data without modifying the blockchain state or consuming gas. `eth_call` is ideal for retrieving data, simulating transactions, or testing contract interactions. \nYou may (optionally) specify a block identifier to simulate the transaction on, or estimate gas usage based on the state of the blockchain at that block.\nIf the execution continues beyond the gas cap (10x the block gas limit), the node stops the simulation and returns an error. This prevents demand for excessive computational resource use or API abuse.\n",
			"params": [
				{
					"name": "transaction",
					"required": true,
					"schema": {
						"type": "object",
						"description": "Transaction object generic to all Linea-supported transactions. All transaction call object parameters are optional.",
						"additionalProperties": false,
						"properties": {
							"type": {
								"description": "The transaction type as introduced in EIP-2718, in hexadecimal. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType (EIP-2930)\n- 0x02 for DynamicFeeTxType (EIP-1559)\n",
								"type": "string",
								"enum": [
									"0x00",
									"0x01",
									"0x02"
								]
							},
							"nonce": {
								"description": "Account nonce; counter for the number of transactions sent from the account; for replay protection.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"to": {
								"description": "Address of the action receiver.",
								"oneOf": [
									{
										"title": "Contract Creation (null)",
										"type": "null"
									},
									{
										"description": "Hex-encoded address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$",
										"title": "Address"
									}
								]
							},
							"from": {
								"description": "Address of the sender.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$"
							},
							"gas": {
								"description": "Gas provided by the sender. `eth_call` consumes zero gas, but this schema supports other executions that might need this parameter. `eth_estimateGas` ignores this value.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"value": {
								"description": "Value to transfer in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"input": {
								"description": "Input data; alternative term for `data`.",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							},
							"gasPrice": {
								"description": "The gas price the sender is willing to pay in wei. Used only in non-[EIP-1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md) transactions.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"default": "0x0"
							},
							"maxPriorityFeePerGas": {
								"description": "Maximum fee, in wei, the sender is willing to pay per gas above the base fee. Can be used only in [EIP-1559 transactions](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md). If used, must specify `maxFeePerGas`.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"maxFeePerGas": {
								"description": "Maximum total fee (base fee + priority fee), in wei, the sender is willing to pay per gas. Can be used only in [EIP-1559 transactions](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md). If used, must specify `maxPriorityFeePerGas`.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"accessList": {
								"description": "EIP-2930 access list; a list of addresses and storage keys that the transaction plans to access.",
								"type": "array",
								"items": {
									"description": "Access list entry.",
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"address": {
											"description": "Hex-encoded address.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										},
										"storageKeys": {
											"type": "array",
											"items": {
												"description": "32 byte hex value.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											}
										}
									}
								}
							},
							"chainId": {
								"description": "Chain ID that this transaction is valid on.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						}
					}
				},
				{
					"name": "block",
					"required": false,
					"schema": {
						"description": "Block number, block hash, or string tag.",
						"anyOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block).\n- `earliest`: The lowest numbered block the client has available.\n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							},
							{
								"description": "32 byte hex value.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$",
								"title": "Block hash"
							}
						]
					}
				}
			],
			"result": {
				"name": "eth_callResponse",
				"description": "Note that, an `execution reverted` message suggests that the transaction would fail on-chain or that the contract logic has conditions that aren't met when simulating the transaction.",
				"schema": {
					"description": "Hex-encoded bytes.",
					"type": "string",
					"pattern": "^0x[0-9a-f]*$"
				}
			},
			"examples": [
				{
					"name": "eth_callExample",
					"jsonrpc": "2.0",
					"method": "eth_call",
					"id": 1,
					"params": [
						{
							"name": "transaction",
							"value": {
								"to": "0xe5d7c2a44ffddf6b295a15c148167daaaf5cf34f",
								"input": {
									"description": "This example provides the function selector for the totalSupply() function in the ERC-20 token standard.",
									"value": "0x18160ddd"
								}
							}
						},
						{
							"name": "block",
							"value": "0x980a20"
						}
					],
					"result": {
						"name": "eth_callExampleResponse",
						"value": "0x00000000000000000000000000000000000000000000070083c753e38b19336e"
					}
				}
			]
		},
		{
			"name": "eth_chainId",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get `chainId`",
			"description": "This request returns the chain ID, a unique identifier across all EVM-compatible networks. This value is critical for transaction replay protection introduced by [EIP-155](https://eips.ethereum.org/EIPS/eip-155).",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "mainnet_eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "eth_chainId",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				},
				{
					"name": "testnet_eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "eth_chainId",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea Sepolia node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe705"
					}
				}
			]
		},
		{
			"name": "eth_coinbase",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "eth_coinbase",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "eth_createAccessList",
			"tags": [
				{
					"name": "EVM"
				},
				{
					"name": "Internal"
				},
				{
					"name": "Archive"
				}
			],
			"summary": "Create access list for EIP-2930 or EIP-1559 transactions",
			"description": "This request generates an access list that you can include in an EIP-2930 or EIP-1559 transaction. This allows you to optimize gas usage for such transactions by preloading storage locations or contract addresses.\n**Important**\n  This request consumes gas because it involves processing the transaction data to predict which addresses and storage locations will be accessed. However, the access list generated helps optimize the gas usage of the actual transaction by preloading these addresses and storage slots, ultimately reducing the overall gas cost during execution.\n",
			"params": [
				{
					"name": "transaction",
					"description": "Transaction call object.",
					"required": true,
					"schema": {
						"type": "object",
						"description": "Transaction object generic to all Linea-supported transactions. All transaction call object parameters are optional.",
						"additionalProperties": false,
						"properties": {
							"type": {
								"description": "The transaction type as introduced in EIP-2718, in hexadecimal. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType (EIP-2930)\n- 0x02 for DynamicFeeTxType (EIP-1559)\n",
								"type": "string",
								"enum": [
									"0x00",
									"0x01",
									"0x02"
								]
							},
							"nonce": {
								"description": "Account nonce; counter for the number of transactions sent from the account; for replay protection.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"to": {
								"description": "Address of the action receiver.",
								"oneOf": [
									{
										"title": "Contract Creation (null)",
										"type": "null"
									},
									{
										"description": "Hex-encoded address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$",
										"title": "Address"
									}
								]
							},
							"from": {
								"description": "Address of the sender.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$"
							},
							"gas": {
								"description": "Gas provided by the sender. `eth_call` consumes zero gas, but this schema supports other executions that might need this parameter. `eth_estimateGas` ignores this value.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"value": {
								"description": "Value to transfer in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"input": {
								"description": "Input data; alternative term for `data`.",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							},
							"gasPrice": {
								"description": "The gas price the sender is willing to pay in wei. Used only in non-[EIP-1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md) transactions.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"default": "0x0"
							},
							"maxPriorityFeePerGas": {
								"description": "Maximum fee, in wei, the sender is willing to pay per gas above the base fee. Can be used only in [EIP-1559 transactions](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md). If used, must specify `maxFeePerGas`.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"maxFeePerGas": {
								"description": "Maximum total fee (base fee + priority fee), in wei, the sender is willing to pay per gas. Can be used only in [EIP-1559 transactions](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md). If used, must specify `maxPriorityFeePerGas`.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"accessList": {
								"description": "EIP-2930 access list; a list of addresses and storage keys that the transaction plans to access.",
								"type": "array",
								"items": {
									"description": "Access list entry.",
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"address": {
											"description": "Hex-encoded address.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										},
										"storageKeys": {
											"type": "array",
											"items": {
												"description": "32 byte hex value.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											}
										}
									}
								}
							},
							"chainId": {
								"description": "Chain ID that this transaction is valid on.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						}
					}
				},
				{
					"name": "block",
					"required": false,
					"description": "Block number or string tag.",
					"schema": {
						"description": "Block number or string tag.",
						"oneOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"finalized",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							}
						]
					}
				}
			],
			"result": {
				"name": "eth_createAccessListResponse",
				"schema": {
					"type": "object",
					"description": "Access list object and approximate gas cost for the transaction if the access list is included.",
					"additionalProperties": false,
					"properties": {
						"accessList": {
							"description": "Access list.",
							"type": "array",
							"items": {
								"description": "Access list entry.",
								"type": "object",
								"additionalProperties": false,
								"properties": {
									"address": {
										"description": "Hex-encoded address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$"
									},
									"storageKeys": {
										"type": "array",
										"items": {
											"description": "32 byte hex value.",
											"type": "string",
											"pattern": "^0x[0-9a-f]{64}$"
										}
									}
								}
							}
						},
						"gasUsed": {
							"description": "Gas used.",
							"type": "string",
							"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
							"example": "0x1"
						}
					}
				}
			},
			"examples": [
				{
					"name": "eth_createAccessListExample",
					"description": "This example demonstrates how a `from` address (a wallet) is used to create a new smart contract. The absence of a `to` address indicates that the transaction is for contract deployment, and the `data` field contains the contract code to be deployed.",
					"jsonrpc": "2.0",
					"method": "eth_createAccessList",
					"id": 1,
					"params": [
						{
							"name": "Transaction",
							"value": {
								"from": "0x188e0B45cEdd8F5e425e73c8aa7953B92115ec24",
								"data": "0x608060806080608155"
							}
						},
						{
							"name": "Block",
							"value": "latest"
						}
					],
					"result": {
						"name": "eth_createAccessListExampleResponse",
						"description": "Gas used by generating the access list, addresses, and associated storage keys that will likely be accessed during the transaction.",
						"value": {
							"accessList": [
								{
									"address": "0xa02457e5dfd32bda5fc7e1f1b008aa5979568150",
									"storageKeys": [
										"0x0000000000000000000000000000000000000000000000000000000000000081"
									]
								}
							],
							"gasUsed": "0x2710"
						}
					}
				}
			]
		},
		{
			"name": "eth_estimateGas",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get gas estimate",
			"description": "This request returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction is *not* added to the blockchain. Expect a significant overestimate (for reasons including EVM mechanics and node performance). Consider using `linea_estimateGas` instead.\nThe min gas price for inclusion in the transaction pool is set to 0.02 gwei for mainnet. Practical minimum gas price depends on both the transaction's properties and L1 fees.\nIf the execution continues beyond the gas cap (10x the block gas limit), the node stops the simulation and returns an error. This prevents demand for excessive computational resource use or API abuse.\n",
			"params": [
				{
					"name": "transaction",
					"description": "Transaction call object. For `eth_estimateGas`, fields are optional because setting a gas limit is irrelevant to the estimation process (unlike transactions, in which gas limits apply).",
					"required": true,
					"schema": {
						"type": "object",
						"description": "Transaction object generic to all Linea-supported transactions. All transaction call object parameters are optional.",
						"additionalProperties": false,
						"properties": {
							"type": {
								"description": "The transaction type as introduced in EIP-2718, in hexadecimal. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType (EIP-2930)\n- 0x02 for DynamicFeeTxType (EIP-1559)\n",
								"type": "string",
								"enum": [
									"0x00",
									"0x01",
									"0x02"
								]
							},
							"nonce": {
								"description": "Account nonce; counter for the number of transactions sent from the account; for replay protection.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"to": {
								"description": "Address of the action receiver.",
								"oneOf": [
									{
										"title": "Contract Creation (null)",
										"type": "null"
									},
									{
										"description": "Hex-encoded address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$",
										"title": "Address"
									}
								]
							},
							"from": {
								"description": "Address of the sender.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$"
							},
							"gas": {
								"description": "Gas provided by the sender. `eth_call` consumes zero gas, but this schema supports other executions that might need this parameter. `eth_estimateGas` ignores this value.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"value": {
								"description": "Value to transfer in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"input": {
								"description": "Input data; alternative term for `data`.",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							},
							"gasPrice": {
								"description": "The gas price the sender is willing to pay in wei. Used only in non-[EIP-1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md) transactions.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"default": "0x0"
							},
							"maxPriorityFeePerGas": {
								"description": "Maximum fee, in wei, the sender is willing to pay per gas above the base fee. Can be used only in [EIP-1559 transactions](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md). If used, must specify `maxFeePerGas`.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"maxFeePerGas": {
								"description": "Maximum total fee (base fee + priority fee), in wei, the sender is willing to pay per gas. Can be used only in [EIP-1559 transactions](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md). If used, must specify `maxPriorityFeePerGas`.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"accessList": {
								"description": "EIP-2930 access list; a list of addresses and storage keys that the transaction plans to access.",
								"type": "array",
								"items": {
									"description": "Access list entry.",
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"address": {
											"description": "Hex-encoded address.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										},
										"storageKeys": {
											"type": "array",
											"items": {
												"description": "32 byte hex value.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											}
										}
									}
								}
							},
							"chainId": {
								"description": "Chain ID that this transaction is valid on.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						}
					}
				},
				{
					"name": "block",
					"required": false,
					"schema": {
						"description": "Block number or string tag.",
						"oneOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block).\n- `earliest`: The lowest numbered block the client has available.\n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							}
						]
					}
				}
			],
			"result": {
				"name": "eth_estimateGasResponse",
				"description": "The gas estimate for the transaction, in hexadecimal.",
				"schema": {
					"description": "Hex-encoded unsigned integer.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0x1"
				}
			},
			"examples": [
				{
					"name": "eth_estimateGasExample",
					"jsonrpc": "2.0",
					"method": "eth_estimateGas",
					"id": 1,
					"params": [
						{
							"name": "transaction",
							"value": {
								"from": "0x188e0B45cedd8f5e425e73c8aa7953b92115ec24",
								"to": "0x791A479620F2A5cf58BB53D45CD3Ec72cFef22Fe",
								"value": "0x28F"
							}
						}
					],
					"result": {
						"name": "eth_estimateGasExampleResponse",
						"value": "0x5208"
					}
				}
			]
		},
		{
			"name": "eth_feeHistory",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get transaction fee history",
			"description": "This request returns historical transaction base fee per gas and effective priority fee per gas for the filtered block range, allowing you to track trends over time.",
			"params": [
				{
					"name": "blockCount",
					"description": "Hexadecimal or decimal integer of the number of blocks for which historical fee data is required; up to maximum of 1024 blocks. Clients will return less than the requested range if not all blocks are available.",
					"required": true,
					"schema": {
						"description": "Hex-encoded unsigned integer.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x5"
					}
				},
				{
					"name": "newestBlock",
					"description": "Hexadecimal or decimal integer representing the highest number block of the requested range, or one of the string tags. Defines the starting point for fetching fee history information. The history will go from this point backward to the provided blockCount, if that data is available.",
					"required": true,
					"schema": {
						"description": "Block number or string tag.",
						"oneOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"finalized",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							}
						]
					}
				},
				{
					"name": "rewardPercentiles",
					"description": "Pass empty array if this request is not required. An ordered array of integers of reward percentile values; from smallest to largest as floating point value between 0 and 100. For each block in the requested range, the transactions are sorted in ascending order by effective tip per gas and the corresponding effective tip for the percentile then determined, accounting for gas consumed.",
					"required": true,
					"schema": {
						"type": "array",
						"items": {
							"type": "number"
						}
					}
				}
			],
			"result": {
				"name": "eth_feeHistoryResponse",
				"schema": {
					"description": "Fee history for the returned block range. If not all blocks are available, this will be a subsection of the requested range.",
					"type": "object",
					"required": [
						"oldestBlock",
						"baseFeePerGas",
						"gasUsedRatio"
					],
					"properties": {
						"oldestBlock": {
							"description": "Hexadecimal of the integer for the lowest number  block of returned range.",
							"type": "string",
							"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
							"example": "0x1"
						},
						"baseFeePerGas": {
							"description": "An array of block base fees per gas. The extra value is the next block after the newest block in the returned range.",
							"type": "array",
							"items": {
								"description": "Hex-encoded unsigned integer.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						},
						"gasUsedRatio": {
							"description": "An array of block gas used ratios. These are calculated as the ratio of `gasUsed` to `gasLimit`.",
							"type": "array",
							"items": {
								"description": "Normalized ratio.",
								"type": "number",
								"minimum": 0,
								"maximum": 1
							}
						},
						"reward": {
							"description": "A two-dimensional array of effective priority fees per gas at the requested block percentiles. The first dimension of the array reflects the percentiles requested. The second reflects the number of blocks that percentile data is returned for.",
							"type": "array",
							"items": {
								"description": "An array of effective priority fee per gas data points from a single block. All zeroes are returned if the block is empty.",
								"type": "array",
								"items": {
									"description": "A given percentile sample of effective priority fees per gas from a single block in ascending order, weighted by gas used. Zeroes are returned if the block is empty.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								}
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "eth_feeHistoryLineaExample",
					"jsonrpc": "2.0",
					"method": "eth_feeHistory",
					"id": 1,
					"params": [
						{
							"name": "blockCount",
							"value": "0x5"
						},
						{
							"name": "newestBlock",
							"value": "0x7"
						},
						{
							"name": "rewardPercentiles",
							"value": [
								20,
								30
							]
						}
					],
					"result": {
						"name": "eth_feeHistoryLineaExampleResponse",
						"value": {
							"type": "object",
							"schema": null,
							"properties": {
								"baseFeePerGas": [
									"0x7",
									"0x7",
									"0x7",
									"0x7",
									"0x7",
									"0x7"
								],
								"gasUsedRatio": [
									0.00726516393442623,
									0.014271704918032787,
									0.00034426229508196723,
									0.00034426229508196723,
									0.00034426229508196723
								],
								"oldestBlock": "0x3",
								"reward": [
									[
										"0xd8f4285",
										"0xd8f4285"
									],
									[
										"0xd8f4285",
										"0xd8f4285"
									],
									[
										"0xd8f4285",
										"0xd8f4285"
									],
									[
										"0xd8f4285",
										"0xd8f4285"
									],
									[
										"0xd8f4285",
										"0xd8f4285"
									]
								]
							}
						}
					}
				}
			]
		},
		{
			"name": "eth_gasPrice",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get current price per gas",
			"description": "This request returns the current price per gas in wei. The price reflects the percentile gas unit price for the most recent blocks. By default, the last 100 blocks are examined and the 50th percentile gas unit price (that's, the median value) is returned.\nIf there are no blocks, the value for `minGasPrice` is returned. \n",
			"params": [],
			"result": {
				"name": "eth_gasPriceResponse",
				"schema": {
					"description": "The current percentile gas unit price for the most recent blocks in wei, as a hexadecimal value.",
					"properties": {
						"gasPrice": {
							"description": "Hex-encoded unsigned integer.",
							"type": "string",
							"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
							"example": "0x3938700"
						}
					}
				}
			},
			"examples": [
				{
					"name": "eth_gasPriceExample",
					"jsonrpc": "2.0",
					"method": "eth_gasPrice",
					"id": 1,
					"params": [],
					"result": {
						"name": "eth_gasPriceExampleResponse",
						"value": "0x3938700"
					}
				}
			]
		},
		{
			"name": "eth_getBalance",
			"tags": [
				{
					"name": "EVM"
				},
				{
					"name": "Archive"
				}
			],
			"summary": "Get balance of an account",
			"description": "This request returns the balance in wei of the given account address/condition.",
			"params": [
				{
					"name": "address",
					"description": "A string that represents a 20-byte Linea address to check the balance of.",
					"required": true,
					"schema": {
						"description": "Hex-encoded address.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					}
				},
				{
					"name": "block",
					"description": "Block number in hexadecimal, block hash, or one of the string tags for the block to filter by.",
					"required": true,
					"schema": {
						"description": "Block number, block hash, or string tag.",
						"anyOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"finalized",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							},
							{
								"description": "32 byte hex value.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$",
								"title": "Block hash"
							}
						]
					}
				}
			],
			"result": {
				"name": "eth_getBalanceResponse",
				"description": "The balance in wei, as a hexadecimal value.",
				"schema": {
					"type": "object",
					"properties": {
						"balance": {
							"description": "Hex-encoded unsigned integer.",
							"type": "string",
							"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
							"example": "0x44082C7F6987"
						}
					}
				}
			},
			"examples": [
				{
					"name": "eth_getBalanceExample",
					"jsonrpc": "2.0",
					"method": "eth_getBalance",
					"id": 1,
					"params": [],
					"result": {
						"name": "eth_getBalanceExampleResponse",
						"value": "0x1bcb27a395c3"
					}
				}
			]
		},
		{
			"name": "eth_getBlockByHash",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get block by block hash",
			"description": "This request returns block data for the given block hash. You can use this method to view the transactions in a block, or the transaction hashes.",
			"params": [
				{
					"name": "blockHash",
					"required": true,
					"schema": {
						"description": "A string representing the hash (32 bytes) of a block.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					}
				},
				{
					"name": "hydratedTransactions",
					"description": "For hashes pass `false`, for detailed transaction objects, pass `true`.",
					"required": true,
					"schema": {
						"type": "boolean",
						"example": false
					}
				}
			],
			"result": {
				"name": "getBlockByHashResponse",
				"description": "Block object or `null` when there is no corresponding block.",
				"schema": {
					"oneOf": [
						{
							"description": "Not Found (null).",
							"type": "null"
						},
						{
							"type": "object",
							"required": [
								"hash",
								"parentHash",
								"sha3Uncles",
								"miner",
								"stateRoot",
								"transactionsRoot",
								"receiptsRoot",
								"logsBloom",
								"number",
								"gasLimit",
								"gasUsed",
								"timestamp",
								"extraData",
								"mixHash",
								"nonce",
								"size",
								"transactions",
								"uncles"
							],
							"additionalProperties": false,
							"properties": {
								"hash": {
									"description": "Block hash, 32 byte hex identifier for the block derived from the block header; `null` when block is pending.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"parentHash": {
									"description": "32 byte hex value of the hash of the parent block.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"sha3Uncles": {
									"description": "SHA3 of the uncle's data in the block.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"miner": {
									"description": "Not relevant to Proof of Stake/Linea. Applied to Proof of Work. Address to pay mining rewards to the coinbase transaction that rewarded the miner for their work.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"stateRoot": {
									"description": "Root of the final state trie for the block as 32 byte hex value.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"transactionsRoot": {
									"description": "Root of the transaction trie for the block.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"receiptsRoot": {
									"description": "Root of the receipts trie for the block.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"logsBloom": {
									"description": "Bloom filter for the block logs; `null` when block is pending.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{512}$"
								},
								"difficulty": {
									"description": "Not relevant to Proof of Stake/Linea. Difficulty for this block.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"number": {
									"description": "Block number; `null` when block is pending.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"gasLimit": {
									"description": "Maximum gas allowed in this block.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"gasUsed": {
									"description": "Total gas used by all transactions in this block.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"timestamp": {
									"description": "Unix timestamp (milliseconds) for block assembly.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"extraData": {
									"description": "Extra data field for this block.",
									"type": "string",
									"pattern": "^0x[0-9a-f]*$"
								},
								"mixHash": {
									"description": "Not relevant to Proof of Stake/Linea. Hash used in the Proof of Work process.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"nonce": {
									"description": "Proof of Work nonce; not relevant to Proof of Stake/Linea. Hash of the generated Proof of Work.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{16}$"
								},
								"totalDifficulty": {
									"description": "Not relevant to Proof of Stake/Linea. Total difficulty of the chain until this block. This value will always be `0` for an uncle block.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"baseFeePerGas": {
									"description": "The block's base fee per gas; empty for blocks created before [EIP-1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md).",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"withdrawalsRoot": {
									"description": "Root of the trie containing withdrawal receipts in the block.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"parentBeaconBlockRoot": {
									"description": "Root of the parent Beacon Chain block. This ties the execution layer to the consensus layer in Proof of Stake.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"size": {
									"description": "Size of block in bytes.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"transactions": {
									"description": "Array of transaction objects, or 32 byte transaction hashes depending on the specified parameter.",
									"anyOf": [
										{
											"title": "Transaction hashes",
											"type": "array",
											"items": {
												"description": "32 byte hex value.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											}
										},
										{
											"title": "Full transactions",
											"type": "array",
											"items": {
												"type": "object",
												"description": "Transaction information.",
												"title": "Contextual information",
												"required": [
													"blockHash",
													"blockNumber",
													"from",
													"hash",
													"transactionIndex"
												],
												"unevaluatedProperties": false,
												"oneOf": [
													{
														"description": "Signed 4844 Transaction.",
														"type": "object",
														"required": [
															"accessList",
															"blobVersionedHashes",
															"chainId",
															"gas",
															"input",
															"maxFeePerBlobGas",
															"maxFeePerGas",
															"maxPriorityFeePerGas",
															"nonce",
															"r",
															"s",
															"to",
															"type",
															"value",
															"yParity"
														],
														"title": "Unsigned 4844 transaction",
														"properties": {
															"type": {
																"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																"type": "string",
																"enum": [
																	0,
																	1,
																	2,
																	3
																]
															},
															"nonce": {
																"description": "A counter for the number of transactions sent from the account; used for replay protection.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"to": {
																"description": "The recipient's address.",
																"type": "string",
																"pattern": "^0x[0-9a-fA-F]{40}$"
															},
															"gas": {
																"description": "Gas provided by the sender.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"value": {
																"description": "Value to transfer in wei.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"input": {
																"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																"type": "string",
																"pattern": "^0x[0-9a-f]*$"
															},
															"maxPriorityFeePerGas": {
																"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"maxFeePerGas": {
																"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"maxFeePerBlobGas": {
																"description": "The maximum total fee per gas the sender is willing to pay for blob gas in wei.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"accessList": {
																"description": "EIP-2930 access list.",
																"type": "array",
																"items": {
																	"description": "Access list entry.",
																	"type": "object",
																	"additionalProperties": false,
																	"properties": {
																		"address": {
																			"description": "Hex-encoded address.",
																			"type": "string",
																			"pattern": "^0x[0-9a-fA-F]{40}$"
																		},
																		"storageKeys": {
																			"type": "array",
																			"items": {
																				"description": "32 byte hex value.",
																				"type": "string",
																				"pattern": "^0x[0-9a-f]{64}$"
																			}
																		}
																	}
																}
															},
															"blobVersionedHashes": {
																"description": "List of versioned blob hashes associated with the transaction's EIP-4844 data blobs.",
																"type": "array",
																"items": {
																	"description": "32 byte hex value.",
																	"type": "string",
																	"pattern": "^0x[0-9a-f]{64}$"
																}
															},
															"chainId": {
																"description": "Chain ID that this transaction is valid on.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"yParity": {
																"description": "The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"r": {
																"description": "R.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"s": {
																"description": "S.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															}
														}
													},
													{
														"description": "Signed 1559 Transaction.",
														"type": "object",
														"required": [
															"accessList",
															"chainId",
															"gas",
															"gasPrice",
															"input",
															"maxFeePerGas",
															"maxPriorityFeePerGas",
															"nonce",
															"r",
															"s",
															"type",
															"value",
															"yParity"
														],
														"title": "Unsigned 1559 Transaction",
														"properties": {
															"type": {
																"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																"type": "string",
																"enum": [
																	0,
																	1,
																	2,
																	3
																]
															},
															"nonce": {
																"description": "A counter for the number of transactions sent from the account; used for replay protection..",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"to": {
																"description": "The recipient's address. `null` when it's a contract creation transaction.",
																"oneOf": [
																	{
																		"title": "Contract creation",
																		"type": "null"
																	},
																	{
																		"description": "Hex-encoded address.",
																		"type": "string",
																		"pattern": "^0x[0-9a-fA-F]{40}$",
																		"title": "Address"
																	}
																]
															},
															"gas": {
																"description": "Gas limit.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"value": {
																"description": "Value.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"input": {
																"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																"type": "string",
																"pattern": "^0x[0-9a-f]*$"
															},
															"maxPriorityFeePerGas": {
																"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"maxFeePerGas": {
																"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.\n",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"gasPrice": {
																"description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using `effectiveGasPrice` in the receipt object going forward.\n",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"accessList": {
																"description": "EIP-2930 access list.",
																"type": "array",
																"items": {
																	"description": "Access list entry.",
																	"type": "object",
																	"additionalProperties": false,
																	"properties": {
																		"address": {
																			"description": "Hex-encoded address.",
																			"type": "string",
																			"pattern": "^0x[0-9a-fA-F]{40}$"
																		},
																		"storageKeys": {
																			"type": "array",
																			"items": {
																				"description": "32 byte hex value.",
																				"type": "string",
																				"pattern": "^0x[0-9a-f]{64}$"
																			}
																		}
																	}
																}
															},
															"chainId": {
																"description": "Chain ID that this transaction is valid on.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"yParity": {
																"description": ". The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"v": {
																"description": "ECDSA Recovery ID. For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"r": {
																"description": "ECDSA signature r.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"s": {
																"description": "ECDSA signature s.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															}
														}
													},
													{
														"description": "Signed 2930 Transaction.",
														"type": "object",
														"required": [
															"accessList",
															"chainId",
															"gas",
															"gasPrice",
															"input",
															"nonce",
															"r",
															"s",
															"type",
															"value",
															"yParity"
														],
														"title": "Unsigned 2930 transaction",
														"properties": {
															"type": {
																"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																"type": "string",
																"enum": [
																	0,
																	1,
																	2,
																	3
																]
															},
															"nonce": {
																"description": "A counter for the number of transactions sent from the account; used for replay protection.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"to": {
																"description": "The recipient's address. `null` when it's a contract creation transaction.",
																"oneOf": [
																	{
																		"title": "Contract creation",
																		"type": "null"
																	},
																	{
																		"description": "Hex-encoded address.",
																		"type": "string",
																		"pattern": "^0x[0-9a-fA-F]{40}$",
																		"title": "Address"
																	}
																]
															},
															"gas": {
																"description": "Gas limit.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"value": {
																"description": "Value.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"input": {
																"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																"type": "string",
																"pattern": "^0x[0-9a-f]*$"
															},
															"gasPrice": {
																"description": "The gas price the sender is willing to be paid in wei.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"accessList": {
																"description": "EIP-2930 access list.",
																"type": "array",
																"items": {
																	"description": "Access list entry.",
																	"type": "object",
																	"additionalProperties": false,
																	"properties": {
																		"address": {
																			"description": "Hex-encoded address.",
																			"type": "string",
																			"pattern": "^0x[0-9a-fA-F]{40}$"
																		},
																		"storageKeys": {
																			"type": "array",
																			"items": {
																				"description": "32 byte hex value.",
																				"type": "string",
																				"pattern": "^0x[0-9a-f]{64}$"
																			}
																		}
																	}
																}
															},
															"chainId": {
																"description": "Chain ID that this transaction is valid on.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"yParity": {
																"description": "The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"v": {
																"description": "ECDSA Recovery ID. For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"r": {
																"description": "ECDSA signature r.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"s": {
																"description": "ECDSA signature s.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															}
														}
													},
													{
														"description": "Signed Legacy Transaction.",
														"type": "object",
														"required": [
															"gas",
															"gasPrice",
															"input",
															"nonce",
															"r",
															"s",
															"type",
															"v",
															"value"
														],
														"title": "Unsigned Legacy transaction",
														"properties": {
															"type": {
																"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																"type": "string",
																"enum": [
																	0,
																	1,
																	2,
																	3
																]
															},
															"nonce": {
																"description": "A counter for the number of transactions sent from the account; used for replay protection.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"to": {
																"description": "The recipient's address. `null` when it's a contract creation transaction.",
																"oneOf": [
																	{
																		"title": "Contract creation",
																		"type": "null"
																	},
																	{
																		"description": "Hex-encoded address.",
																		"type": "string",
																		"pattern": "^0x[0-9a-fA-F]{40}$",
																		"title": "Address"
																	}
																]
															},
															"gas": {
																"description": "Gas limit.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"value": {
																"description": "Value.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"input": {
																"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																"type": "string",
																"pattern": "^0x[0-9a-f]*$"
															},
															"gasPrice": {
																"description": "The gas price the sender is willing to pay in wei.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"chainId": {
																"description": "Chain ID that this transaction is valid on.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"v": {
																"description": "ECDSA Recovery ID.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"r": {
																"description": "ECDSA signature r.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"s": {
																"description": "ECDSA signature s.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															}
														}
													}
												],
												"properties": {
													"blockHash": {
														"description": "Block hash, 32 byte hex identifier for the block derived from the block header.",
														"type": "string",
														"pattern": "^0x[0-9a-f]{64}$"
													},
													"blockNumber": {
														"description": "Block number.",
														"type": "string",
														"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
														"example": "0x1"
													},
													"from": {
														"description": "Sender's address.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$"
													},
													"hash": {
														"description": "32 byte hex identifier for the transaction hash.",
														"type": "string",
														"pattern": "^0x[0-9a-f]{64}$"
													},
													"transactionIndex": {
														"description": "Transaction index.",
														"type": "string",
														"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
														"example": "0x1"
													}
												}
											}
										}
									]
								},
								"withdrawals": {
									"type": "array",
									"items": {
										"type": "object",
										"description": "Validator withdrawal.",
										"required": [
											"index",
											"validatorIndex",
											"address",
											"amount"
										],
										"additionalProperties": false,
										"properties": {
											"index": {
												"description": "Index of withdrawal.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
											},
											"validatorIndex": {
												"description": "Index of validator that generated withdrawal.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
											},
											"address": {
												"description": "Recipient address for withdrawal value.",
												"type": "string",
												"pattern": "^0x[0-9a-fA-F]{40}$"
											},
											"amount": {
												"description": "Value contained in withdrawal.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
											}
										}
									}
								},
								"uncles": {
									"description": "Array of uncle hashes.",
									"type": "array",
									"items": {
										"description": "32 byte hex value.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									}
								}
							}
						}
					]
				}
			},
			"examples": [
				{
					"name": "eth_getBlockByHashExample",
					"jsonrpc": "2.0",
					"method": "eth_getBlockByHash",
					"id": 1,
					"params": [
						{
							"name": "blockHash",
							"value": "0xf9539cc20c8f5271ac12e6491c022f2e9faaaff1eca0000799e0a6e78d6050c5"
						},
						{
							"name": "hydratedTransactions",
							"value": false
						}
					],
					"result": {
						"name": "eth_getBlockByHashExampleResponse",
						"description": "Block information.",
						"value": {
							"baseFeePerGas": "0x7",
							"difficulty": "0x2",
							"extraData": "0x0000000000000000000000000000000000000000000000000000000000000000f37f...",
							"gasLimit": "0x3a2c940",
							"gasUsed": "0x108061",
							"hash": "0xf9539cc20c8f5271ac12e6491c022f2e9faaaff1eca0000799e0a6e78d6050c5",
							"logsBloom": "0x04000004000c00000000100000000021000000001400524800000000000...",
							"miner": "0x0000000000000000000000000000000000000000",
							"mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
							"nonce": "0x0000000000000000",
							"number": "0x4ff31d",
							"parentHash": "0x8f702c7b4b88546f07cf66f09e46a6693a810131018b61a4ea257d369ace01c8",
							"receiptsRoot": "0x70e4d96f4800e8c86ae75de75de1846da140a853d1e29fdae46400d93f85f4b8",
							"sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
							"size": "0xf74",
							"stateRoot": "0x0411d23f01843fc2f08dc97ed9da86d19232c3c0ee6cd6e66a0fbf65ee7f0333",
							"timestamp": "0x66630dae",
							"totalDifficulty": "0x9fe63b",
							"transactions": [
								"0xd34e34e1bf1c940b7524c7180c1c8ca83fd886d736df5537214d5715365a4e29",
								"0x78109d6f5d643369fbf0ff432bc0c89a150f1c96d849f06cde2fccde7cd4cb25",
								"0x5b4ad10868aea3dbcb8999554e5ba86992a189b65f64e7e762f2e19830766de2",
								"0x058e58b8fcd988f7cdc8b9ea10811405c83e1b107c9d0c008ee4716f35bee2d2",
								"0x15bb69f5c0e7b43321c69917600665632e4a49dbfb84eeb21c31afb02f2bb49b",
								"0x8d9c25bf2dcbd1b148137702cf748ee18600d7df7a374da7b72a56200166fb7d",
								"0xee8270208bea7bee60eb10de43f7a46ae81f972e7473627d89311163dd068db8",
								"0x645ceec2a8aa92bcf2491bc97b4ac98aa2acb360627aecb2391c6d7b9a841e9f",
								"0xdcca21e756689b7bea9b5534698435b7ea729c852e50256f21832943f475c00f",
								"0x61db38d84032e85e77e927172ada7062f1747c09078ffa1131fea374d4e1c177",
								"0xd35b3f5490f13717b99efa6f1e8f2eabaf75b6e1e5ccff0c837c1e11731b0fd2",
								"0x466864e901219e93de7ea03ac640f2b7cabf2f96dda62e0ed3b9a236c1a401e8"
							],
							"transactionsRoot": "0xd5100dcb4f1adad04c51fdea94706b145cb4218c69c6b4415ee165f1d7e6434e",
							"uncles": []
						}
					}
				}
			]
		},
		{
			"name": "eth_getBlockByNumber",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get block by block number",
			"description": "This request returns block data for the given block number. You can use this method to view the transactions in a block, or the transaction hashes.",
			"params": [
				{
					"name": "block",
					"description": "Block number or string tag.",
					"required": true,
					"schema": {
						"description": "Block number or string tag.",
						"oneOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"finalized",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							}
						]
					}
				},
				{
					"name": "hydratedTransactions",
					"description": "For hashes pass `false`, for detailed transaction objects, pass `true`.",
					"required": true,
					"schema": {
						"type": "boolean",
						"example": false
					}
				}
			],
			"result": {
				"name": "eth_getBlockByNumberResponse",
				"description": "Block object, or `null` when there is no block.",
				"schema": {
					"oneOf": [
						{
							"description": "Not Found (null).",
							"type": "null"
						},
						{
							"type": "object",
							"required": [
								"hash",
								"parentHash",
								"sha3Uncles",
								"miner",
								"stateRoot",
								"transactionsRoot",
								"receiptsRoot",
								"logsBloom",
								"number",
								"gasLimit",
								"gasUsed",
								"timestamp",
								"extraData",
								"mixHash",
								"nonce",
								"size",
								"transactions",
								"uncles"
							],
							"additionalProperties": false,
							"properties": {
								"hash": {
									"description": "Block hash, 32 byte hex identifier for the block derived from the block header; `null` when block is pending.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"parentHash": {
									"description": "32 byte hex value of the hash of the parent block.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"sha3Uncles": {
									"description": "SHA3 of the uncle's data in the block.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"miner": {
									"description": "Not relevant to Proof of Stake/Linea. Applied to Proof of Work. Address to pay mining rewards to the coinbase transaction that rewarded the miner for their work.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"stateRoot": {
									"description": "Root of the final state trie for the block as 32 byte hex value.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"transactionsRoot": {
									"description": "Root of the transaction trie for the block.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"receiptsRoot": {
									"description": "Root of the receipts trie for the block.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"logsBloom": {
									"description": "Bloom filter for the block logs; `null` when block is pending.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{512}$"
								},
								"difficulty": {
									"description": "Not relevant to Proof of Stake/Linea. Difficulty for this block.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"number": {
									"description": "Block number; `null` when block is pending.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"gasLimit": {
									"description": "Maximum gas allowed in this block.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"gasUsed": {
									"description": "Total gas used by all transactions in this block.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"timestamp": {
									"description": "Unix timestamp (milliseconds) for block assembly.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"extraData": {
									"description": "Extra data field for this block.",
									"type": "string",
									"pattern": "^0x[0-9a-f]*$"
								},
								"mixHash": {
									"description": "Not relevant to Proof of Stake/Linea. Hash used in the Proof of Work process.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"nonce": {
									"description": "Proof of Work nonce; not relevant to Proof of Stake/Linea. Hash of the generated Proof of Work.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{16}$"
								},
								"totalDifficulty": {
									"description": "Not relevant to Proof of Stake/Linea. Total difficulty of the chain until this block. This value will always be `0` for an uncle block.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"baseFeePerGas": {
									"description": "The block's base fee per gas; empty for blocks created before [EIP-1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md).",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"withdrawalsRoot": {
									"description": "Root of the trie containing withdrawal receipts in the block.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"parentBeaconBlockRoot": {
									"description": "Root of the parent Beacon Chain block. This ties the execution layer to the consensus layer in Proof of Stake.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"size": {
									"description": "Size of block in bytes.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"transactions": {
									"description": "Array of transaction objects, or 32 byte transaction hashes depending on the specified parameter.",
									"anyOf": [
										{
											"title": "Transaction hashes",
											"type": "array",
											"items": {
												"description": "32 byte hex value.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											}
										},
										{
											"title": "Full transactions",
											"type": "array",
											"items": {
												"type": "object",
												"description": "Transaction information.",
												"title": "Contextual information",
												"required": [
													"blockHash",
													"blockNumber",
													"from",
													"hash",
													"transactionIndex"
												],
												"unevaluatedProperties": false,
												"oneOf": [
													{
														"description": "Signed 4844 Transaction.",
														"type": "object",
														"required": [
															"accessList",
															"blobVersionedHashes",
															"chainId",
															"gas",
															"input",
															"maxFeePerBlobGas",
															"maxFeePerGas",
															"maxPriorityFeePerGas",
															"nonce",
															"r",
															"s",
															"to",
															"type",
															"value",
															"yParity"
														],
														"title": "Unsigned 4844 transaction",
														"properties": {
															"type": {
																"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																"type": "string",
																"enum": [
																	0,
																	1,
																	2,
																	3
																]
															},
															"nonce": {
																"description": "A counter for the number of transactions sent from the account; used for replay protection.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"to": {
																"description": "The recipient's address.",
																"type": "string",
																"pattern": "^0x[0-9a-fA-F]{40}$"
															},
															"gas": {
																"description": "Gas provided by the sender.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"value": {
																"description": "Value to transfer in wei.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"input": {
																"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																"type": "string",
																"pattern": "^0x[0-9a-f]*$"
															},
															"maxPriorityFeePerGas": {
																"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"maxFeePerGas": {
																"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"maxFeePerBlobGas": {
																"description": "The maximum total fee per gas the sender is willing to pay for blob gas in wei.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"accessList": {
																"description": "EIP-2930 access list.",
																"type": "array",
																"items": {
																	"description": "Access list entry.",
																	"type": "object",
																	"additionalProperties": false,
																	"properties": {
																		"address": {
																			"description": "Hex-encoded address.",
																			"type": "string",
																			"pattern": "^0x[0-9a-fA-F]{40}$"
																		},
																		"storageKeys": {
																			"type": "array",
																			"items": {
																				"description": "32 byte hex value.",
																				"type": "string",
																				"pattern": "^0x[0-9a-f]{64}$"
																			}
																		}
																	}
																}
															},
															"blobVersionedHashes": {
																"description": "List of versioned blob hashes associated with the transaction's EIP-4844 data blobs.",
																"type": "array",
																"items": {
																	"description": "32 byte hex value.",
																	"type": "string",
																	"pattern": "^0x[0-9a-f]{64}$"
																}
															},
															"chainId": {
																"description": "Chain ID that this transaction is valid on.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"yParity": {
																"description": "The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"r": {
																"description": "R.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"s": {
																"description": "S.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															}
														}
													},
													{
														"description": "Signed 1559 Transaction.",
														"type": "object",
														"required": [
															"accessList",
															"chainId",
															"gas",
															"gasPrice",
															"input",
															"maxFeePerGas",
															"maxPriorityFeePerGas",
															"nonce",
															"r",
															"s",
															"type",
															"value",
															"yParity"
														],
														"title": "Unsigned 1559 Transaction",
														"properties": {
															"type": {
																"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																"type": "string",
																"enum": [
																	0,
																	1,
																	2,
																	3
																]
															},
															"nonce": {
																"description": "A counter for the number of transactions sent from the account; used for replay protection..",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"to": {
																"description": "The recipient's address. `null` when it's a contract creation transaction.",
																"oneOf": [
																	{
																		"title": "Contract creation",
																		"type": "null"
																	},
																	{
																		"description": "Hex-encoded address.",
																		"type": "string",
																		"pattern": "^0x[0-9a-fA-F]{40}$",
																		"title": "Address"
																	}
																]
															},
															"gas": {
																"description": "Gas limit.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"value": {
																"description": "Value.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"input": {
																"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																"type": "string",
																"pattern": "^0x[0-9a-f]*$"
															},
															"maxPriorityFeePerGas": {
																"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"maxFeePerGas": {
																"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.\n",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"gasPrice": {
																"description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using `effectiveGasPrice` in the receipt object going forward.\n",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"accessList": {
																"description": "EIP-2930 access list.",
																"type": "array",
																"items": {
																	"description": "Access list entry.",
																	"type": "object",
																	"additionalProperties": false,
																	"properties": {
																		"address": {
																			"description": "Hex-encoded address.",
																			"type": "string",
																			"pattern": "^0x[0-9a-fA-F]{40}$"
																		},
																		"storageKeys": {
																			"type": "array",
																			"items": {
																				"description": "32 byte hex value.",
																				"type": "string",
																				"pattern": "^0x[0-9a-f]{64}$"
																			}
																		}
																	}
																}
															},
															"chainId": {
																"description": "Chain ID that this transaction is valid on.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"yParity": {
																"description": ". The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"v": {
																"description": "ECDSA Recovery ID. For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"r": {
																"description": "ECDSA signature r.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"s": {
																"description": "ECDSA signature s.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															}
														}
													},
													{
														"description": "Signed 2930 Transaction.",
														"type": "object",
														"required": [
															"accessList",
															"chainId",
															"gas",
															"gasPrice",
															"input",
															"nonce",
															"r",
															"s",
															"type",
															"value",
															"yParity"
														],
														"title": "Unsigned 2930 transaction",
														"properties": {
															"type": {
																"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																"type": "string",
																"enum": [
																	0,
																	1,
																	2,
																	3
																]
															},
															"nonce": {
																"description": "A counter for the number of transactions sent from the account; used for replay protection.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"to": {
																"description": "The recipient's address. `null` when it's a contract creation transaction.",
																"oneOf": [
																	{
																		"title": "Contract creation",
																		"type": "null"
																	},
																	{
																		"description": "Hex-encoded address.",
																		"type": "string",
																		"pattern": "^0x[0-9a-fA-F]{40}$",
																		"title": "Address"
																	}
																]
															},
															"gas": {
																"description": "Gas limit.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"value": {
																"description": "Value.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"input": {
																"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																"type": "string",
																"pattern": "^0x[0-9a-f]*$"
															},
															"gasPrice": {
																"description": "The gas price the sender is willing to be paid in wei.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"accessList": {
																"description": "EIP-2930 access list.",
																"type": "array",
																"items": {
																	"description": "Access list entry.",
																	"type": "object",
																	"additionalProperties": false,
																	"properties": {
																		"address": {
																			"description": "Hex-encoded address.",
																			"type": "string",
																			"pattern": "^0x[0-9a-fA-F]{40}$"
																		},
																		"storageKeys": {
																			"type": "array",
																			"items": {
																				"description": "32 byte hex value.",
																				"type": "string",
																				"pattern": "^0x[0-9a-f]{64}$"
																			}
																		}
																	}
																}
															},
															"chainId": {
																"description": "Chain ID that this transaction is valid on.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"yParity": {
																"description": "The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"v": {
																"description": "ECDSA Recovery ID. For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"r": {
																"description": "ECDSA signature r.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"s": {
																"description": "ECDSA signature s.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															}
														}
													},
													{
														"description": "Signed Legacy Transaction.",
														"type": "object",
														"required": [
															"gas",
															"gasPrice",
															"input",
															"nonce",
															"r",
															"s",
															"type",
															"v",
															"value"
														],
														"title": "Unsigned Legacy transaction",
														"properties": {
															"type": {
																"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																"type": "string",
																"enum": [
																	0,
																	1,
																	2,
																	3
																]
															},
															"nonce": {
																"description": "A counter for the number of transactions sent from the account; used for replay protection.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"to": {
																"description": "The recipient's address. `null` when it's a contract creation transaction.",
																"oneOf": [
																	{
																		"title": "Contract creation",
																		"type": "null"
																	},
																	{
																		"description": "Hex-encoded address.",
																		"type": "string",
																		"pattern": "^0x[0-9a-fA-F]{40}$",
																		"title": "Address"
																	}
																]
															},
															"gas": {
																"description": "Gas limit.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"value": {
																"description": "Value.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"input": {
																"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																"type": "string",
																"pattern": "^0x[0-9a-f]*$"
															},
															"gasPrice": {
																"description": "The gas price the sender is willing to pay in wei.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"chainId": {
																"description": "Chain ID that this transaction is valid on.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"v": {
																"description": "ECDSA Recovery ID.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"r": {
																"description": "ECDSA signature r.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															},
															"s": {
																"description": "ECDSA signature s.",
																"type": "string",
																"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																"example": "0x1"
															}
														}
													}
												],
												"properties": {
													"blockHash": {
														"description": "Block hash, 32 byte hex identifier for the block derived from the block header.",
														"type": "string",
														"pattern": "^0x[0-9a-f]{64}$"
													},
													"blockNumber": {
														"description": "Block number.",
														"type": "string",
														"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
														"example": "0x1"
													},
													"from": {
														"description": "Sender's address.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$"
													},
													"hash": {
														"description": "32 byte hex identifier for the transaction hash.",
														"type": "string",
														"pattern": "^0x[0-9a-f]{64}$"
													},
													"transactionIndex": {
														"description": "Transaction index.",
														"type": "string",
														"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
														"example": "0x1"
													}
												}
											}
										}
									]
								},
								"withdrawals": {
									"type": "array",
									"items": {
										"type": "object",
										"description": "Validator withdrawal.",
										"required": [
											"index",
											"validatorIndex",
											"address",
											"amount"
										],
										"additionalProperties": false,
										"properties": {
											"index": {
												"description": "Index of withdrawal.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
											},
											"validatorIndex": {
												"description": "Index of validator that generated withdrawal.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
											},
											"address": {
												"description": "Recipient address for withdrawal value.",
												"type": "string",
												"pattern": "^0x[0-9a-fA-F]{40}$"
											},
											"amount": {
												"description": "Value contained in withdrawal.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
											}
										}
									}
								},
								"uncles": {
									"description": "Array of uncle hashes.",
									"type": "array",
									"items": {
										"description": "32 byte hex value.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									}
								}
							}
						}
					]
				}
			},
			"examples": [
				{
					"name": "eth_getBlockByNumberExample",
					"jsonrpc": "2.0",
					"method": "eth_getBlockByNumber",
					"id": 1,
					"params": [
						{
							"name": "block",
							"value": "0x4ff31d"
						},
						{
							"name": "hydratedTransactions",
							"value": false
						}
					],
					"result": {
						"name": "eth_getBlockByNumberExampleResponse",
						"description": "Block information.",
						"value": {
							"baseFeePerGas": "0x7",
							"difficulty": "0x2",
							"extraData": "0x0000000000000000000000000000000000000000000000000000000000000000f37...",
							"gasLimit": "0x3a2c940",
							"gasUsed": "0x108061",
							"hash": "0xf9539cc20c8f5271ac12e6491c022f2e9faaaff1eca0000799e0a6e78d6050c5",
							"logsBloom": "0x04000004000c0000000010000000002100000000140052480000000...",
							"miner": "0x0000000000000000000000000000000000000000",
							"mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
							"nonce": "0x0000000000000000",
							"number": "0x4ff31d",
							"parentHash": "0x8f702c7b4b88546f07cf66f09e46a6693a810131018b61a4ea257d369ace01c8",
							"receiptsRoot": "0x70e4d96f4800e8c86ae75de75de1846da140a853d1e29fdae46400d93f85f4b8",
							"sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
							"size": "0xf74",
							"stateRoot": "0x0411d23f01843fc2f08dc97ed9da86d19232c3c0ee6cd6e66a0fbf65ee7f0333",
							"timestamp": "0x66630dae",
							"totalDifficulty": "0x9fe63b",
							"transactions": [
								"0xd34e34e1bf1c940b7524c7180c1c8ca83fd886d736df5537214d5715365a4e29",
								"0x78109d6f5d643369fbf0ff432bc0c89a150f1c96d849f06cde2fccde7cd4cb25",
								"0x5b4ad10868aea3dbcb8999554e5ba86992a189b65f64e7e762f2e19830766de2",
								"0x058e58b8fcd988f7cdc8b9ea10811405c83e1b107c9d0c008ee4716f35bee2d2",
								"0x15bb69f5c0e7b43321c69917600665632e4a49dbfb84eeb21c31afb02f2bb49b",
								"0x8d9c25bf2dcbd1b148137702cf748ee18600d7df7a374da7b72a56200166fb7d",
								"0xee8270208bea7bee60eb10de43f7a46ae81f972e7473627d89311163dd068db8",
								"0x645ceec2a8aa92bcf2491bc97b4ac98aa2acb360627aecb2391c6d7b9a841e9f",
								"0xdcca21e756689b7bea9b5534698435b7ea729c852e50256f21832943f475c00f",
								"0x61db38d84032e85e77e927172ada7062f1747c09078ffa1131fea374d4e1c177",
								"0xd35b3f5490f13717b99efa6f1e8f2eabaf75b6e1e5ccff0c837c1e11731b0fd2",
								"0x466864e901219e93de7ea03ac640f2b7cabf2f96dda62e0ed3b9a236c1a401e8"
							],
							"transactionsRoot": "0xd5100dcb4f1adad04c51fdea94706b145cb4218c69c6b4415ee165f1d7e6434e",
							"uncles": []
						}
					}
				}
			]
		},
		{
			"name": "eth_getBlockReceipts",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get block receipts by block number",
			"description": "This request returns all transaction receipts of the given block identified by block number, hash, or tag. Transaction receipts provide a way to track the success or failure of a transaction (`1` if successful and `0` if failed), as well as the amount of gas used and any event logs that might have been produced by a smart contract during the transaction.",
			"params": [
				{
					"name": "block",
					"required": true,
					"description": "Block number in hexadecimal, block hash, or one of the string tags.",
					"schema": {
						"description": "Block number, block hash, or string tag.",
						"anyOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"finalized",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							},
							{
								"description": "32 byte hex value.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$",
								"title": "Block hash"
							}
						]
					}
				}
			],
			"result": {
				"name": "eth_getBlockReceiptsResponse",
				"description": "Block object, or `null` when there is no block.",
				"schema": {
					"oneOf": [
						{
							"description": "Not Found (null).",
							"type": "array",
							"items": {
								"type": "object",
								"description": "Receipt information",
								"required": [
									"blockHash",
									"blockNumber",
									"from",
									"cumulativeGasUsed",
									"gasUsed",
									"logs",
									"logsBloom",
									"transactionHash",
									"transactionIndex",
									"effectiveGasPrice"
								],
								"additionalProperties": false,
								"properties": {
									"type": {
										"description": "The transaction type as introduced in EIP-2718, in hexadecimal. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType (EIP-2930)\n- 0x02 for DynamicFeeTxType (EIP-1559)\n",
										"type": "string",
										"enum": [
											"0x00",
											"0x01",
											"0x02"
										]
									},
									"transactionHash": {
										"description": "The transaction hash in which the call was made.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									},
									"transactionIndex": {
										"description": "The position in the block, in hexadecimal.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"blockHash": {
										"description": "Block hash; 32 byte hex identifier for the block derived from the block header.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									},
									"blockNumber": {
										"description": "Block number as hex-encoded unsigned integer.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"from": {
										"description": "Address of the sender.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$"
									},
									"to": {
										"description": "Address of the receiver or null in a contract creation transaction.",
										"oneOf": [
											{
												"title": "Contract Creation (null)",
												"type": "null"
											},
											{
												"description": "Hex-encoded address.",
												"type": "string",
												"pattern": "^0x[0-9a-fA-F]{40}$",
												"title": "Recipient Address"
											}
										]
									},
									"cumulativeGasUsed": {
										"description": "The sum of gas used by this transaction and all preceding transactions in the same block.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"gasUsed": {
										"description": "The amount of gas used for this specific transaction alone.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"contractAddress": {
										"description": "The contract address created, if the transaction was a contract creation, otherwise null.",
										"oneOf": [
											{
												"description": "Hex-encoded address.",
												"type": "string",
												"pattern": "^0x[0-9a-fA-F]{40}$",
												"title": "Contract address"
											},
											{
												"title": "Null",
												"type": "null"
											}
										]
									},
									"logs": {
										"type": "array",
										"items": {
											"type": "object",
											"required": [
												"transactionHash"
											],
											"additionalProperties": false,
											"properties": {
												"removed": {
													"type": "boolean"
												},
												"logIndex": {
													"description": "Hex-encoded unsigned integer.",
													"type": "string",
													"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
													"example": "0x1"
												},
												"transactionIndex": {
													"description": "A hexadecimal of the integer representing the position in the block.",
													"type": "string",
													"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
													"example": "0x1"
												},
												"transactionHash": {
													"description": "The transaction hash in which the call was made.",
													"type": "string",
													"pattern": "^0x[0-9a-f]{64}$"
												},
												"blockHash": {
													"description": "Block hash; 32 byte hex identifier for the block derived from the block header.",
													"type": "string",
													"pattern": "^0x[0-9a-f]{64}$"
												},
												"blockNumber": {
													"description": "Block number as hex-encoded unsigned integer.",
													"type": "string",
													"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
													"example": "0x1"
												},
												"address": {
													"description": "Hex-encoded address.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$"
												},
												"data": {
													"description": "Hex-encoded bytes.",
													"type": "string",
													"pattern": "^0x[0-9a-f]*$"
												},
												"topics": {
													"type": "array",
													"items": {
														"description": "32 Hex-encoded bytes.",
														"type": "string",
														"pattern": "^0x[0-9a-f]{64}$"
													}
												}
											}
										}
									},
									"logsBloom": {
										"description": "Bloom filter for the block logs; `null` when block is pending.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{512}$"
									},
									"root": {
										"description": "The post-transaction state root. Only specified for transactions included before the Byzantium upgrade.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									},
									"status": {
										"description": "Either 0x1 (success) or 0x0 (failure). Only specified for transactions included after the Byzantium upgrade.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1",
										"enum": [
											"0x0",
											"0x1"
										]
									},
									"effectiveGasPrice": {
										"description": "The actual value per gas deducted from the sender's account. Before EIP-1559, this is equal to the transaction's gas price. After, it is equal to baseFeePerGas + min(maxFeePerGas - baseFeePerGas, maxPriorityFeePerGas).",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									}
								}
							}
						}
					]
				}
			},
			"examples": [
				{
					"name": "eth_getBlockReceiptsExample",
					"jsonrpc": "2.0",
					"method": "eth_getBlockReceipts",
					"id": 1,
					"params": [
						{
							"name": "blockHash",
							"value": "0xd459570b5d2994a81ec1875b058f665b7f9c006172a8bd2860de87aee9569ac8"
						}
					],
					"result": {
						"name": "eth_getBlockReceiptsExampleResponse",
						"description": "Just 3 of many receipts.",
						"value": [
							{
								"blockHash": "0xd459570b5d2994a81ec1875b058f665b7f9c006172a8bd2860de87aee9569ac8",
								"blockNumber": "0x4fde9d",
								"contractAddress": null,
								"cumulativeGasUsed": "0x5208",
								"effectiveGasPrice": "0x77359400",
								"from": "0xd3d7dbe73bbdd5a5c7a49ca322763c4d400fc240",
								"gasUsed": "0x5208",
								"logs": [],
								"logsBloom": "0x00000000000000000000000000000000000000000000000000...",
								"status": "0x1",
								"to": "0x11e90f43a39f4409935f254fac26b360893f1785",
								"transactionHash": "0x8eafa76140b66efeef371e5a62ad8b0fb16298eb349157ced4e1ec76b108cceb",
								"transactionIndex": "0x0",
								"type": "0x0"
							},
							{
								"blockHash": "0xd459570b5d2994a81ec1875b058f665b7f9c006172a8bd2860de87aee9569ac8",
								"blockNumber": "0x4fde9d",
								"contractAddress": null,
								"cumulativeGasUsed": "0x101f6",
								"effectiveGasPrice": "0x59e78fe",
								"from": "0x00381fd3e1ca2a3758bb86983836c645ca0c1f4a",
								"gasUsed": "0xafee",
								"logs": [
									{
										"address": "0xe5d7c2a44ffddf6b295a15c148167daaaf5cf34f",
										"blockHash": "0xd459570b5d2994a81ec1875b058f665b7f9c006172a8bd2860de87aee9569ac8",
										"blockNumber": "0x4fde9d",
										"data": "0x0000000000000000000000000000000000000000000000000b6139a7cbd20000",
										"logIndex": "0x0",
										"removed": false,
										"topics": [
											"0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c",
											"0x00000000000000000000000000381fd3e1ca2a3758bb86983836c645ca0c1f4a"
										],
										"transactionHash": "0x962e545e8ac3caef02f251d175cb0519c14db387559bb5804e988e175b3bc6c4",
										"transactionIndex": "0x1"
									}
								],
								"logsBloom": "0x00000000000000000000000000000000000000000000000000000...",
								"status": "0x1",
								"to": "0xe5d7c2a44ffddf6b295a15c148167daaaf5cf34f",
								"transactionHash": "0x962e545e8ac3caef02f251d175cb0519c14db387559bb5804e988e175b3bc6c4",
								"transactionIndex": "0x1",
								"type": "0x0"
							},
							{
								"blockHash": "0xd459570b5d2994a81ec1875b058f665b7f9c006172a8bd2860de87aee9569ac8",
								"blockNumber": "0x4fde9d",
								"contractAddress": null,
								"cumulativeGasUsed": "0x1fc52",
								"effectiveGasPrice": "0x4f20124",
								"from": "0x685ee51518320a6625fa2bb523b2eab385df68b3",
								"gasUsed": "0xfa5c",
								"logs": [
									{
										"address": "0xffbfd3124eae5938afd36294af98a6207567135b",
										"blockHash": "0xd459570b5d2994a81ec1875b058f665b7f9c006172a8bd2860de87aee9569ac8",
										"blockNumber": "0x4fde9d",
										"data": "0x0000000000000000000000000d92d3d772d85389b4b25d10dc52715546...",
										"logIndex": "0x1",
										"removed": false,
										"topics": [
											"0x2f824f69f211e444df15d741157e83cdf23c50f39399b9523853a84b91379ca6"
										],
										"transactionHash": "0x04d2b7d5c8e2452bfdafe1655bd88332ad5f0c14aafa574da794adf3d4e7e14f",
										"transactionIndex": "0x2"
									}
								],
								"logsBloom": "0x0000000001000000000000000000000000000000000000000000...",
								"status": "0x1",
								"to": "0xffbfd3124eae5938afd36294af98a6207567135b",
								"transactionHash": "0x04d2b7d5c8e2452bfdafe1655bd88332ad5f0c14aafa574da794adf3d4e7e14f",
								"transactionIndex": "0x2",
								"type": "0x2"
							}
						]
					}
				}
			]
		},
		{
			"name": "eth_getBlockTransactionCountByHash",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get number of transactions by hash",
			"description": "This request returns the number of transactions from the block matching the given block hash.",
			"params": [
				{
					"name": "blockHash",
					"required": true,
					"schema": {
						"description": "A string representing the hash (32 bytes) of a block.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					}
				}
			],
			"result": {
				"name": "eth_getBlockTransactionCountByHashResponse",
				"description": "The number of transactions in the block in hexadecimal, or `null` if no matching block hash is found.",
				"schema": {
					"oneOf": [
						{
							"description": "Not Found (null).",
							"type": "null",
							"title": "Not found"
						},
						{
							"description": "Hex-encoded unsigned integer.",
							"type": "string",
							"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
							"example": "0x21",
							"title": "Transaction count"
						}
					]
				}
			},
			"examples": [
				{
					"name": "eth_getBlockTransactionCountByHashExample",
					"jsonrpc": "2.0",
					"method": "eth_getBlockTransactionCountByHash",
					"id": 1,
					"params": [
						{
							"name": "blockHash",
							"value": "0xd459570b5d2994a81ec1875b058f665b7f9c006172a8bd2860de87aee9569ac8"
						}
					],
					"result": {
						"name": "eth_getBlockTransactionCountByHashExampleRespone",
						"value": "0x21"
					}
				}
			]
		},
		{
			"name": "eth_getBlockTransactionCountByNumber",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get number of transactions by block number",
			"description": "This request returns the number of transactions from the block matching the given block number.",
			"params": [
				{
					"name": "block",
					"description": "Hexadecimal of the digital integer representing a block number, or one of the string tags.",
					"required": true,
					"schema": {
						"description": "Block number or string tag.",
						"oneOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"finalized",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							}
						]
					}
				}
			],
			"result": {
				"name": "eth_getBlockTransactionCountByNumberResponse",
				"description": "The number of transactions in the block in hexadecimal, or `null` if not found.",
				"schema": {
					"oneOf": [
						{
							"description": "Not Found (null).",
							"type": "null"
						},
						{
							"description": "Hex-encoded unsigned integer.",
							"type": "string",
							"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
							"example": "0x1"
						}
					]
				}
			},
			"examples": [
				{
					"name": "eth_getBlockTransactionCountByNumberExample",
					"jsonrpc": "2.0",
					"method": "eth_getBlockTransactionCountByNumber",
					"id": 1,
					"params": [
						{
							"name": "block",
							"value": "0x4fde9d"
						}
					],
					"result": {
						"name": "eth_getBlockTransactionCountByNumberExampleResponse",
						"value": "0x21"
					}
				}
			]
		},
		{
			"name": "eth_getCode",
			"tags": [
				{
					"name": "EVM"
				},
				{
					"name": "Archive"
				}
			],
			"summary": "Get smart contract code",
			"description": "This request returns the compiled byte code of a smart contract, if any, at a given address and block.",
			"params": [
				{
					"name": "address",
					"required": true,
					"schema": {
						"description": "Hex-encoded address.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					}
				},
				{
					"name": "block",
					"required": true,
					"description": "Block number in hexadecimal, block hash, or one of the string tags.",
					"schema": {
						"description": "Block number, block hash, or string tag.",
						"anyOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"finalized",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							},
							{
								"description": "32 byte hex value.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$",
								"title": "Block hash"
							}
						]
					}
				}
			],
			"result": {
				"name": "eth_getCodeResponse",
				"description": "The compiled byte code of the smart contract at the given address. Linea stores compiled smart contract code as a hexadecimal value.",
				"schema": {
					"description": "Hex-encoded bytes.",
					"type": "string",
					"pattern": "^0x[0-9a-f]*$"
				}
			},
			"examples": [
				{
					"name": "eth_getCodeExample",
					"jsonrpc": "2.0",
					"method": "eth_getCode",
					"id": 1,
					"params": [
						{
							"name": "address",
							"value": "0xe5d7c2a44ffddf6b295a15c148167daaaf5cf34f"
						},
						{
							"name": "block",
							"value": "0x927cf4"
						}
					],
					"result": {
						"name": "eth_getCodeExampleResponse",
						"value": "0x6060604052600436106100af576000357c01000000000...."
					}
				}
			]
		},
		{
			"name": "eth_getFilterChanges",
			"tags": [
				{
					"name": "EVM"
				},
				{
					"name": "Internal"
				}
			],
			"summary": "Poll recent filter events",
			"description": "This request polls for event data as required by the filter with the given Id (created using `eth_newFilter` or `eth_newBlockFilter`). It returns an array of logs which occurred since last poll.",
			"params": [
				{
					"name": "filterId",
					"schema": {
						"description": "Hex-encoded unsigned integer.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					}
				}
			],
			"result": {
				"name": "eth_getFilterChangesResponse",
				"description": "Array of log objects for the requested filter data available either since filter creation or last poll of filter.",
				"schema": {
					"oneOf": [
						{
							"title": "New block or transaction hashes",
							"type": "array",
							"items": {
								"description": "32 byte hex value.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							}
						},
						{
							"title": "New logs",
							"type": "array",
							"items": {
								"type": "object",
								"required": [
									"transactionHash"
								],
								"additionalProperties": false,
								"properties": {
									"removed": {
										"type": "boolean"
									},
									"logIndex": {
										"description": "Hex-encoded unsigned integer.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"transactionIndex": {
										"description": "A hexadecimal of the integer representing the position in the block.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"transactionHash": {
										"description": "The transaction hash in which the call was made.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									},
									"blockHash": {
										"description": "Block hash; 32 byte hex identifier for the block derived from the block header.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									},
									"blockNumber": {
										"description": "Block number as hex-encoded unsigned integer.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"address": {
										"description": "Hex-encoded address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$"
									},
									"data": {
										"description": "Hex-encoded bytes.",
										"type": "string",
										"pattern": "^0x[0-9a-f]*$"
									},
									"topics": {
										"type": "array",
										"items": {
											"description": "32 Hex-encoded bytes.",
											"type": "string",
											"pattern": "^0x[0-9a-f]{64}$"
										}
									}
								}
							}
						}
					]
				}
			},
			"examples": [
				{
					"name": "eth_getFilterChangesExample",
					"description": "Example filter applying Id for a \"new block\" filter.",
					"jsonrpc": "2.0",
					"method": "eth_getFilterChanges",
					"id": 1,
					"params": [
						{
							"name": "filterId",
							"value": "0x814451e169814a572e72a081e72982f9d8e55449c55490b48ca4eff1d5d7cead"
						}
					],
					"result": {
						"name": "eth_getFilterChangesExampleResponse",
						"description": "Block hashes of new blocks since filter creation or last poll.",
						"value": [
							"0x4d1c9238adcaaf6aef9ca7aca3effc48b16a91015ddab263bb7c573618407251",
							"0xc1d56d50a1002eb59a357f1044e26b88cd2ce3f30c6302d75758ffd654fedc29",
							"0xc2f5350ca7a75badf56aff7bed3a698572de6732f3fd654304c03e4b71e7f209",
							"0x236dd785e2e1105f14abbb31ac687487b56df01a10356e6b841b06019347db24",
							"0xd0e3028e097256e0d84402bfe92d88b4aa595b8c9b71967ae5b9de34a3bd36ba",
							"0x3e21808a8446e9178ca26b42c13db816226b788d9b62da0960a5f5aff8d879ac",
							"0x3a21615c326d660e8d78ec94b61816652b7be863e8fad2380d98dc6277e0d57c",
							"0xd8336eabe49935e67c9173066e804f5d6071c7b32b548cadd20e3ccd6b2e76dc",
							"0x354bc7a9135f75fcf0bfc3613c887868532c65093a1bee3fe6ede293cdbb780b",
							"0x627cc2af92ee82bc8bb486f3a746f3bc0e79d0867296423fb41315514011ff55"
						]
					}
				}
			]
		},
		{
			"name": "eth_getFilterLogs",
			"tags": [
				{
					"name": "EVM"
				},
				{
					"name": "Internal"
				}
			],
			"summary": "Poll all filter events",
			"description": "This request returns an array of all logs matching the filter with the given Id \n(created using `eth_newFilter`). \n**Important**:\n- This method doesn't support block filters as created by `eth_newBlockFilter`\n- For fetching historical data (logs prior to filter creation), use `eth_getLogs`\n",
			"params": [
				{
					"name": "filterId",
					"schema": {
						"description": "Hex-encoded unsigned integer.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					}
				}
			],
			"result": {
				"name": "eth_getFilterLogsResponse",
				"description": "Log objects.",
				"schema": {
					"oneOf": [
						{
							"title": "New block or transaction hashes",
							"type": "array",
							"items": {
								"description": "32 byte hex value.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							}
						},
						{
							"title": "New logs",
							"type": "array",
							"items": {
								"type": "object",
								"required": [
									"transactionHash"
								],
								"additionalProperties": false,
								"properties": {
									"removed": {
										"type": "boolean"
									},
									"logIndex": {
										"description": "Hex-encoded unsigned integer.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"transactionIndex": {
										"description": "A hexadecimal of the integer representing the position in the block.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"transactionHash": {
										"description": "The transaction hash in which the call was made.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									},
									"blockHash": {
										"description": "Block hash; 32 byte hex identifier for the block derived from the block header.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									},
									"blockNumber": {
										"description": "Block number as hex-encoded unsigned integer.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"address": {
										"description": "Hex-encoded address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$"
									},
									"data": {
										"description": "Hex-encoded bytes.",
										"type": "string",
										"pattern": "^0x[0-9a-f]*$"
									},
									"topics": {
										"type": "array",
										"items": {
											"description": "32 Hex-encoded bytes.",
											"type": "string",
											"pattern": "^0x[0-9a-f]{64}$"
										}
									}
								}
							}
						}
					]
				}
			},
			"examples": [
				{
					"name": "eth_getFilterLogsExample",
					"jsonrpc": "2.0",
					"method": "eth_getFilterLogs",
					"id": 1,
					"params": [
						{
							"name": "Filter identifier",
							"value": "0x10ff28ad20da8c91dd9c5177d08895fb70d3ed94b684f30bb086fb90f6984e53"
						}
					],
					"result": {
						"name": "eth_getFilterLogsExampleResponse",
						"value": []
					}
				}
			]
		},
		{
			"name": "eth_getLogs",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get logs",
			"description": "This request passes a set of search conditions and returns an array of all logs matching those.",
			"params": [
				{
					"name": "filter",
					"description": "Filter conditions for your search.",
					"schema": {
						"type": "object",
						"additionalProperties": false,
						"properties": {
							"fromBlock": {
								"description": "Block number or string tag.",
								"oneOf": [
									{
										"description": "Block number in hexadecimal.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1",
										"title": "Block number"
									},
									{
										"type": "string",
										"enum": [
											"earliest",
											"finalized",
											"latest",
											"pending"
										],
										"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
										"title": "Block tag"
									}
								]
							},
							"toBlock": {
								"description": "Block number or string tag.",
								"oneOf": [
									{
										"description": "Block number in hexadecimal.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1",
										"title": "Block number"
									},
									{
										"type": "string",
										"enum": [
											"earliest",
											"finalized",
											"latest",
											"pending"
										],
										"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
										"title": "Block tag"
									}
								]
							},
							"address": {
								"oneOf": [
									{
										"title": "Any address",
										"type": "null"
									},
									{
										"description": "Hex-encoded address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$",
										"title": "Address"
									},
									{
										"description": "Hex-encoded address.",
										"type": "array",
										"items": {
											"description": "Hex-encoded address.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										},
										"title": "Addresses"
									}
								]
							},
							"topics": {
								"description": "Filter topics.",
								"oneOf": [
									{
										"title": "Any topic match",
										"type": "null"
									},
									{
										"title": "Specified filter topics",
										"type": "array",
										"items": {
											"description": "Filter topic list entry.",
											"oneOf": [
												{
													"description": "32 Hex-encoded bytes.",
													"type": "string",
													"pattern": "^0x[0-9a-f]{64}$",
													"title": "Single topic match"
												},
												{
													"title": "Multiple topic match",
													"type": "array",
													"items": {
														"description": "32 Hex-encoded bytes.",
														"type": "string",
														"pattern": "^0x[0-9a-f]{64}$"
													}
												}
											]
										}
									}
								]
							}
						}
					}
				}
			],
			"result": {
				"name": "eth_getLogsResponse",
				"description": "Array of log objects.",
				"schema": {
					"oneOf": [
						{
							"title": "New block or transaction hashes",
							"type": "array",
							"items": {
								"description": "32 byte hex value.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							}
						},
						{
							"title": "New logs",
							"type": "array",
							"items": {
								"type": "object",
								"required": [
									"transactionHash"
								],
								"additionalProperties": false,
								"properties": {
									"removed": {
										"type": "boolean"
									},
									"logIndex": {
										"description": "Hex-encoded unsigned integer.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"transactionIndex": {
										"description": "A hexadecimal of the integer representing the position in the block.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"transactionHash": {
										"description": "The transaction hash in which the call was made.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									},
									"blockHash": {
										"description": "Block hash; 32 byte hex identifier for the block derived from the block header.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									},
									"blockNumber": {
										"description": "Block number as hex-encoded unsigned integer.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"address": {
										"description": "Hex-encoded address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$"
									},
									"data": {
										"description": "Hex-encoded bytes.",
										"type": "string",
										"pattern": "^0x[0-9a-f]*$"
									},
									"topics": {
										"type": "array",
										"items": {
											"description": "32 Hex-encoded bytes.",
											"type": "string",
											"pattern": "^0x[0-9a-f]{64}$"
										}
									}
								}
							}
						}
					]
				}
			},
			"examples": [
				{
					"name": "eth_getLogsExample",
					"jsonrpc": "2.0",
					"method": "eth_getLogs",
					"id": 1,
					"params": [
						{
							"name": "filter",
							"description": "Search terms to apply to this request.",
							"value": {
								"fromBlock": "0x4fde9d",
								"toBlock": "0x4fde9d",
								"address": "0xe5d7c2a44ffddf6b295a15c148167daaaf5cf34f",
								"topics": []
							}
						}
					],
					"result": {
						"name": "eth_getLogsExampleResponse",
						"description": "Four records (of many) returned by the request.",
						"value": [
							{
								"address": "0xe5d7c2a44ffddf6b295a15c148167daaaf5cf34f",
								"blockHash": "0xd459570b5d2994a81ec1875b058f665b7f9c006172a8bd2860de87aee9569ac8",
								"blockNumber": "0x4fde9d",
								"data": "0x0000000000000000000000000000000000000000000000000b6139a7cbd20000",
								"logIndex": "0x0",
								"removed": false,
								"topics": [
									"0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c",
									"0x00000000000000000000000000381fd3e1ca2a3758bb86983836c645ca0c1f4a"
								],
								"transactionHash": "0x962e545e8ac3caef02f251d175cb0519c14db387559bb5804e988e175b3bc6c4",
								"transactionIndex": "0x1"
							},
							{
								"address": "0xe5d7c2a44ffddf6b295a15c148167daaaf5cf34f",
								"blockHash": "0xd459570b5d2994a81ec1875b058f665b7f9c006172a8bd2860de87aee9569ac8",
								"blockNumber": "0x4fde9d",
								"data": "0x000000000000000000000000000000000000000000000000001057acf5f78000",
								"logIndex": "0x18",
								"removed": false,
								"topics": [
									"0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c",
									"0x000000000000000000000000fe6508f0015c778bdcc1fb5465ba5ebe224c9912"
								],
								"transactionHash": "0x1edcdbf205d33cb1f7f88eb58324f20aa32ad7af494ead208d7bc90762c304ea",
								"transactionIndex": "0xa"
							},
							{
								"address": "0xe5d7c2a44ffddf6b295a15c148167daaaf5cf34f",
								"blockHash": "0xd459570b5d2994a81ec1875b058f665b7f9c006172a8bd2860de87aee9569ac8",
								"blockNumber": "0x4fde9d",
								"data": "0x000000000000000000000000000000000000000000000000001057acf5f78000",
								"logIndex": "0x1a",
								"removed": false,
								"topics": [
									"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"0x000000000000000000000000fe6508f0015c778bdcc1fb5465ba5ebe224c9912",
									"0x000000000000000000000000586733678b9ac9da43dd7cb83bbb41d23677dfc3"
								],
								"transactionHash": "0x1edcdbf205d33cb1f7f88eb58324f20aa32ad7af494ead208d7bc90762c304ea",
								"transactionIndex": "0xa"
							},
							{
								"address": "0xe5d7c2a44ffddf6b295a15c148167daaaf5cf34f",
								"blockHash": "0xd459570b5d2994a81ec1875b058f665b7f9c006172a8bd2860de87aee9569ac8",
								"blockNumber": "0x4fde9d",
								"data": "0x00000000000000000000000000000000000000000000000000138a64211903b7",
								"logIndex": "0x2a",
								"removed": false,
								"topics": [
									"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"0x000000000000000000000000e24b4a292ba102a9b7b7f9de20718d7ba45ddb29",
									"0x000000000000000000000000d804ba88371a3f00ddaca03cbc2b6c47f38105fc"
								],
								"transactionHash": "0x3613dbdec4df03cd1efc903773ffad8703c8a6f902384299dc22e32bf3223fab",
								"transactionIndex": "0x10"
							}
						]
					}
				}
			]
		},
		{
			"name": "eth_getMinerDataByBlockHash",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Bespoke"
				},
				{
					"name": "Geth"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "eth_getMinerDataByBlockHash",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "eth_getMinerDataByBlockNumber",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Bespoke"
				},
				{
					"name": "Besu"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "eth_getMinerDataByBlockNumber",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "eth_getProof",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get Merkle proof",
			"description": "This request returns the account information, storage values, and Merkle proof for a given account (and, optionally, storage values for given storage keys), supporting data verification.",
			"params": [
				{
					"name": "address",
					"description": "A string identifier for the contract or EOA address (20 bytes).",
					"required": true,
					"schema": {
						"description": "Hex-encoded address.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					}
				},
				{
					"name": "storageKeys",
					"required": true,
					"schema": {
						"description": "Storage keys may be specified to retrieve the storage proofs for particular slots in a smart contract's storage. If not required, pass empty array.",
						"type": "array",
						"default": [],
						"items": {
							"description": "32 Hex-encoded bytes.",
							"type": "string",
							"pattern": "^0x[0-9a-f]{0,64}$"
						}
					}
				},
				{
					"name": "block",
					"required": true,
					"description": "Block number in hexadecimal, block hash, or one of the string tags.",
					"schema": {
						"description": "Block number, block hash, or string tag.",
						"anyOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block).\n- `earliest`: The lowest numbered block the client has available.\n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							},
							{
								"description": "32 byte hex value.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$",
								"title": "Block hash"
							}
						]
					}
				}
			],
			"result": {
				"name": "eth_getProofResponse",
				"description": "Account proof object returned for the given account.",
				"schema": {
					"description": "Account proof.",
					"type": "object",
					"required": [
						"address",
						"accountProof",
						"balanceeth_getBalance",
						"codeHash",
						"nonce",
						"storageHash",
						"storageProof"
					],
					"additionalProperties": false,
					"properties": {
						"address": {
							"description": "The account address for which the Merkle proof is retrieved. This is an echo of the address passed in the request.",
							"type": "string",
							"pattern": "^0x[0-9a-fA-F]{40}$"
						},
						"accountProof": {
							"description": "An array of RLP-serialized MerkleTree-Nodes, starting with the `stateRoot`-Node, following the path of the address as key.",
							"type": "array",
							"items": {
								"description": "Hex-encoded bytes.",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							}
						},
						"balance": {
							"description": "Hexadecimal of the balance in wei.",
							"type": "string",
							"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
						},
						"codeHash": {
							"description": "The 32-byte hash of the account's code. For EOAs, this will be the hash of an empty string. For contract accounts, it represents the hash of the deployed contract code.",
							"type": "string",
							"pattern": "^0x[0-9a-f]{64}$"
						},
						"nonce": {
							"description": "Account nonce; counter for the number of transactions sent from the account.",
							"type": "string",
							"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
						},
						"storageHash": {
							"description": "32-byte SHA3 hash of the storage root. All storage will deliver a Merkle proof starting with this root hash.",
							"type": "string",
							"pattern": "^0x[0-9a-f]{64}$"
						},
						"storageProof": {
							"description": "An array of requested storage-entries.",
							"type": "array",
							"items": {
								"type": "object",
								"required": [
									"key",
									"value",
									"proof"
								],
								"additionalProperties": false,
								"properties": {
									"key": {
										"description": "The requested storage key.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{0,64}$"
									},
									"value": {
										"description": "The storage value.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
									},
									"proof": {
										"type": "array",
										"description": "An array of RLP-serialized MerkleTree-Nodes, starting with the `storageHash` node and following the path of the key.",
										"items": {
											"description": "Hex-encoded bytes.",
											"type": "string",
											"pattern": "^0x[0-9a-f]*$"
										}
									}
								}
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "eth_getProofExample",
					"jsonrpc": "2.0",
					"method": "eth_getProof",
					"id": 1,
					"params": [
						{
							"name": "address",
							"value": "0x7F0d15C7FAae65896648C8273B6d7E43f58Fa842"
						},
						{
							"name": "storageKeys",
							"value": [
								[
									"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"
								]
							]
						},
						{
							"name": "block",
							"value": "latest"
						}
					],
					"result": {
						"name": "eth_getProofExampleResponse",
						"value": {
							"accountProof": [
								"0xf90211a0d2055f3da7451f06ac53b35d3729fc8192382d0915736424665a83c6741df4ea...",
								"0xf90211a08240dd659347a41078eed3c036d4ee577051cde7ce63942d755d9d8e795cfcc...",
								"0xf90211a0229a27809010e39babd9e7ffe7a95d92309ed0996c8c1c6954b5d439d817e82...",
								"0xf90211a0d99442fec74394991d81a27b2433979f4650aee6e21d3166a3d1a06e16cc7f7...",
								"0xf90211a08f7ed368618eab7a47c550034fef18c54ad2b5ffc9fe7b1d5955a45d2f51e91...",
								"0xf89180808080808080a05f1b4688b8385116ef65b021e0193fa11244005696c25de336f...",
								"0xf86d9e20b884b45d46839a7e66ba35c504168d404ae8e87a72077873d13b7403b8b84cf..."
							],
							"address": "0x7f0d15c7faae65896648c8273b6d7e43f58fa842",
							"balance": "0x0",
							"codeHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
							"nonce": "0x0",
							"storageHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
							"storageProof": [
								{
									"key": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
									"proof": [],
									"value": "0x0"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "eth_getStorageAt",
			"tags": [
				{
					"name": "EVM"
				},
				{
					"name": "Archive"
				}
			],
			"summary": "Get value from storage",
			"description": "This request returns the value from the given storage position of the provided contract's or externally owned account's (EOA).",
			"params": [
				{
					"name": "address",
					"description": "A string identifier for the contract or EOA address (20 bytes).",
					"required": true,
					"schema": {
						"description": "Hex-encoded address.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					}
				},
				{
					"name": "storageSlot",
					"description": "The storage position or index, in hexadecimal.",
					"required": true,
					"schema": {
						"description": "Hex-encoded 256 bit unsigned integer.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
					}
				},
				{
					"name": "block",
					"required": true,
					"description": "Block number in hexadecimal, block hash, or one of the string tags.",
					"schema": {
						"description": "Block number, block hash, or string tag.",
						"anyOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"finalized",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							},
							{
								"description": "32 byte hex value.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$",
								"title": "Block hash"
							}
						]
					}
				}
			],
			"result": {
				"name": "eth_getStorageAtResponse",
				"schema": {
					"description": "The data stored in the specified storage position at the specified address, in hexadecimal.",
					"type": "string",
					"pattern": "^0x[0-9a-f]*$"
				}
			},
			"examples": [
				{
					"name": "eth_getStorageAtExample",
					"jsonrpc": "2.0",
					"method": "eth_getStorageAt",
					"id": 1,
					"params": [
						{
							"name": "address",
							"value": "0x7d43aabc515c356145049227cee54b608342c0ad"
						},
						{
							"name": "storageSlot",
							"value": "0x5"
						},
						{
							"name": "block",
							"value": "latest"
						}
					],
					"result": {
						"name": "eth_getStorageAtExampleResponse",
						"value": "\"0x00000000000000000000000034dfa1226f8b3e36fe597b34eea809a2b5c0bbf9"
					}
				}
			]
		},
		{
			"name": "eth_getTransactionByBlockHashAndIndex",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get transaction by block hash and index",
			"description": "This request returns information about a transaction for the provided block hash and transaction index position.",
			"params": [
				{
					"name": "blockHash",
					"required": true,
					"description": "A string representing the hash (32 bytes) of a block.",
					"schema": {
						"description": "32 byte hex value.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					}
				},
				{
					"name": "transactionIndex",
					"required": true,
					"description": "The position in the block in hexadecimal.",
					"schema": {
						"description": "Hex-encoded unsigned integer.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					}
				}
			],
			"result": {
				"name": "eth_getTransactionByBlockHashAndIndexResponse",
				"description": "Returns the transaction information or \"not found\".",
				"schema": {
					"oneOf": [
						{
							"description": "Not Found (null).",
							"type": "null"
						},
						{
							"type": "object",
							"title": "Linea transaction context",
							"required": [
								"blockHash",
								"blockNumber",
								"from",
								"hash",
								"transactionIndex"
							],
							"unevaluatedProperties": false,
							"oneOf": [
								{
									"type": "object",
									"title": "Signed 1559 transaction",
									"description": "EIP-1559 transaction.",
									"required": [
										"accessList",
										"chainId",
										"gas",
										"gasPrice",
										"input",
										"maxFeePerGas",
										"maxPriorityFeePerGas",
										"nonce",
										"r",
										"s",
										"type",
										"value"
									],
									"properties": {
										"type": {
											"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
											"type": "string",
											"enum": [
												0,
												1,
												2,
												3
											]
										},
										"nonce": {
											"description": "A counter for the number of transactions sent from the account; used for replay protection..",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"to": {
											"description": "The recipient's address. `null` when it's a contract creation transaction.",
											"oneOf": [
												{
													"title": "Contract creation",
													"type": "null"
												},
												{
													"description": "Hex-encoded address.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$",
													"title": "Address"
												}
											]
										},
										"gas": {
											"description": "Gas limit.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"value": {
											"description": "Value.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"input": {
											"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
											"type": "string",
											"pattern": "^0x[0-9a-f]*$"
										},
										"maxPriorityFeePerGas": {
											"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"maxFeePerGas": {
											"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.\n",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"gasPrice": {
											"description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using `effectiveGasPrice` in the receipt object going forward.\n",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"accessList": {
											"description": "EIP-2930 access list.",
											"type": "array",
											"items": {
												"description": "Access list entry.",
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"address": {
														"description": "Hex-encoded address.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$"
													},
													"storageKeys": {
														"type": "array",
														"items": {
															"description": "32 byte hex value.",
															"type": "string",
															"pattern": "^0x[0-9a-f]{64}$"
														}
													}
												}
											}
										},
										"chainId": {
											"description": "Chain ID that this transaction is valid on.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"v": {
											"description": "ECDSA Recovery ID. An alternative to `yParity`.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"r": {
											"description": "ECDSA signature r.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"s": {
											"description": "ECDSA signature s.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										}
									}
								},
								{
									"type": "object",
									"title": "Signed 2930 transaction",
									"description": "EIP-2930 transaction.",
									"required": [
										"accessList",
										"chainId",
										"gas",
										"gasPrice",
										"input",
										"nonce",
										"r",
										"s",
										"type",
										"value"
									],
									"properties": {
										"type": {
											"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
											"type": "string",
											"enum": [
												0,
												1,
												2,
												3
											]
										},
										"nonce": {
											"description": "A counter for the number of transactions sent from the account; used for replay protection.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"to": {
											"description": "The recipient's address. `null` when it's a contract creation transaction.",
											"oneOf": [
												{
													"title": "Contract creation",
													"type": "null"
												},
												{
													"description": "Hex-encoded address.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$",
													"title": "Address"
												}
											]
										},
										"gas": {
											"description": "Gas limit.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"value": {
											"description": "Value.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"input": {
											"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
											"type": "string",
											"pattern": "^0x[0-9a-f]*$"
										},
										"gasPrice": {
											"description": "The gas price the sender is willing to be paid in wei.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"accessList": {
											"description": "EIP-2930 access list.",
											"type": "array",
											"items": {
												"description": "Access list entry.",
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"address": {
														"description": "Hex-encoded address.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$"
													},
													"storageKeys": {
														"type": "array",
														"items": {
															"description": "32 byte hex value.",
															"type": "string",
															"pattern": "^0x[0-9a-f]{64}$"
														}
													}
												}
											}
										},
										"chainId": {
											"description": "Chain ID that this transaction is valid on.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"v": {
											"description": "ECDSA Recovery ID. An alternative to `yParity`.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"r": {
											"description": "ECDSA signature r.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"s": {
											"description": "ECDSA signature s.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										}
									}
								},
								{
									"description": "Signed Legacy Transaction.",
									"type": "object",
									"title": "Signed legacy transaction",
									"required": [
										"gas",
										"gasPrice",
										"input",
										"nonce",
										"r",
										"s",
										"type",
										"v",
										"value"
									],
									"properties": {
										"type": {
											"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
											"type": "string",
											"enum": [
												0,
												1,
												2,
												3
											]
										},
										"nonce": {
											"description": "A counter for the number of transactions sent from the account; used for replay protection.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"to": {
											"description": "The recipient's address. `null` when it's a contract creation transaction.",
											"oneOf": [
												{
													"title": "Contract creation",
													"type": "null"
												},
												{
													"description": "Hex-encoded address.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$",
													"title": "Address"
												}
											]
										},
										"gas": {
											"description": "Gas limit.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"value": {
											"description": "Value.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"input": {
											"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
											"type": "string",
											"pattern": "^0x[0-9a-f]*$"
										},
										"gasPrice": {
											"description": "The gas price the sender is willing to pay in wei.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"chainId": {
											"description": "Chain ID that this transaction is valid on.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"v": {
											"description": "ECDSA Recovery ID.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"r": {
											"description": "ECDSA signature r.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"s": {
											"description": "ECDSA signature s.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										}
									}
								}
							],
							"properties": {
								"blockHash": {
									"description": "Block hash, 32 byte hex identifier for the block derived from the block header.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"blockNumber": {
									"description": "Block number as hex-encoded unsigned integer.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"from": {
									"description": "Sender's address.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"hash": {
									"description": "32 byte hex identifier for the transaction hash.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"transactionIndex": {
									"description": "Transaction position.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								}
							}
						}
					]
				}
			},
			"examples": [
				{
					"name": "eth_getTransactionByBlockHashAndIndexExample",
					"jsonrpc": "2.0",
					"method": "eth_getTransactionByBlockHashAndIndex",
					"id": 1,
					"params": [
						{
							"name": "blockHash",
							"value": "0x3ff53efeec688238a8ecc0a1404221d1be3723aa6531f12f4d635dc8e7824779"
						},
						{
							"name": "transactionIndex",
							"value": "0x2"
						}
					],
					"result": {
						"name": "eth_getTransactionByBlockHashAndIndexExampleResponse",
						"value": {
							"blockHash": "0x3ff53efeec688238a8ecc0a1404221d1be3723aa6531f12f4d635dc8e7824779",
							"blockNumber": "0x49b95c",
							"chainId": "0xe708",
							"from": "0x05cc939ac053dc47366fe8032f9be00f5f33b508",
							"gas": "0x439d0",
							"gasPrice": "0x3dfd240",
							"hash": "0x8b04f98bec033ccc46e13f01ed75e0b2b12c0dc8b7d7d16102cf2b4addeaa3b8",
							"input": "0x83bd37f900011a51b19ce03dbe0cb44c1528e34a7edd7771e9af000...",
							"nonce": "0x8d",
							"r": "0xbc381ffdf71e5934df37913906305d88e06daf0051e69e42cabe4539e6fc4c58",
							"s": "0x4d65409fdc70bb2d14926b038ac7a064d8cce583df50efb424438dfd9333d578",
							"to": "0x2d8879046f1559e53eb052e949e9544bcb72f414",
							"transactionIndex": "0x2",
							"type": "0x0",
							"v": "0x1ce33",
							"value": "0x0"
						}
					}
				}
			]
		},
		{
			"name": "eth_getTransactionByBlockNumberAndIndex",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get transaction by block identifier and index",
			"description": "This request returns information about a transaction by block number or tag and the transaction's index position.",
			"params": [
				{
					"name": "block",
					"required": true,
					"description": "Block number in hexadecimal, or one of the string tags.",
					"schema": {
						"description": "Block number or string tag.",
						"oneOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"finalized",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							}
						]
					}
				},
				{
					"name": "transactionIndex",
					"required": true,
					"description": "The position in the block, in hexadecimal.",
					"schema": {
						"description": "Hex-encoded unsigned integer.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					}
				}
			],
			"result": {
				"name": "eth_getTransactionByBlockNumberAndIndexResponse",
				"description": "Returns the transaction information or \"not found\".",
				"schema": {
					"oneOf": [
						{
							"description": "Not Found (null).",
							"type": "null"
						},
						{
							"type": "object",
							"title": "Linea transaction context",
							"required": [
								"blockHash",
								"blockNumber",
								"from",
								"hash",
								"transactionIndex"
							],
							"unevaluatedProperties": false,
							"oneOf": [
								{
									"type": "object",
									"title": "Signed 1559 transaction",
									"description": "EIP-1559 transaction.",
									"required": [
										"accessList",
										"chainId",
										"gas",
										"gasPrice",
										"input",
										"maxFeePerGas",
										"maxPriorityFeePerGas",
										"nonce",
										"r",
										"s",
										"type",
										"value"
									],
									"properties": {
										"type": {
											"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
											"type": "string",
											"enum": [
												0,
												1,
												2,
												3
											]
										},
										"nonce": {
											"description": "A counter for the number of transactions sent from the account; used for replay protection..",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"to": {
											"description": "The recipient's address. `null` when it's a contract creation transaction.",
											"oneOf": [
												{
													"title": "Contract creation",
													"type": "null"
												},
												{
													"description": "Hex-encoded address.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$",
													"title": "Address"
												}
											]
										},
										"gas": {
											"description": "Gas limit.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"value": {
											"description": "Value.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"input": {
											"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
											"type": "string",
											"pattern": "^0x[0-9a-f]*$"
										},
										"maxPriorityFeePerGas": {
											"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"maxFeePerGas": {
											"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.\n",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"gasPrice": {
											"description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using `effectiveGasPrice` in the receipt object going forward.\n",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"accessList": {
											"description": "EIP-2930 access list.",
											"type": "array",
											"items": {
												"description": "Access list entry.",
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"address": {
														"description": "Hex-encoded address.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$"
													},
													"storageKeys": {
														"type": "array",
														"items": {
															"description": "32 byte hex value.",
															"type": "string",
															"pattern": "^0x[0-9a-f]{64}$"
														}
													}
												}
											}
										},
										"chainId": {
											"description": "Chain ID that this transaction is valid on.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"v": {
											"description": "ECDSA Recovery ID. An alternative to `yParity`.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"r": {
											"description": "ECDSA signature r.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"s": {
											"description": "ECDSA signature s.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										}
									}
								},
								{
									"type": "object",
									"title": "Signed 2930 transaction",
									"description": "EIP-2930 transaction.",
									"required": [
										"accessList",
										"chainId",
										"gas",
										"gasPrice",
										"input",
										"nonce",
										"r",
										"s",
										"type",
										"value"
									],
									"properties": {
										"type": {
											"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
											"type": "string",
											"enum": [
												0,
												1,
												2,
												3
											]
										},
										"nonce": {
											"description": "A counter for the number of transactions sent from the account; used for replay protection.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"to": {
											"description": "The recipient's address. `null` when it's a contract creation transaction.",
											"oneOf": [
												{
													"title": "Contract creation",
													"type": "null"
												},
												{
													"description": "Hex-encoded address.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$",
													"title": "Address"
												}
											]
										},
										"gas": {
											"description": "Gas limit.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"value": {
											"description": "Value.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"input": {
											"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
											"type": "string",
											"pattern": "^0x[0-9a-f]*$"
										},
										"gasPrice": {
											"description": "The gas price the sender is willing to be paid in wei.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"accessList": {
											"description": "EIP-2930 access list.",
											"type": "array",
											"items": {
												"description": "Access list entry.",
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"address": {
														"description": "Hex-encoded address.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$"
													},
													"storageKeys": {
														"type": "array",
														"items": {
															"description": "32 byte hex value.",
															"type": "string",
															"pattern": "^0x[0-9a-f]{64}$"
														}
													}
												}
											}
										},
										"chainId": {
											"description": "Chain ID that this transaction is valid on.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"v": {
											"description": "ECDSA Recovery ID. An alternative to `yParity`.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"r": {
											"description": "ECDSA signature r.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"s": {
											"description": "ECDSA signature s.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										}
									}
								},
								{
									"description": "Signed Legacy Transaction.",
									"type": "object",
									"title": "Signed legacy transaction",
									"required": [
										"gas",
										"gasPrice",
										"input",
										"nonce",
										"r",
										"s",
										"type",
										"v",
										"value"
									],
									"properties": {
										"type": {
											"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
											"type": "string",
											"enum": [
												0,
												1,
												2,
												3
											]
										},
										"nonce": {
											"description": "A counter for the number of transactions sent from the account; used for replay protection.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"to": {
											"description": "The recipient's address. `null` when it's a contract creation transaction.",
											"oneOf": [
												{
													"title": "Contract creation",
													"type": "null"
												},
												{
													"description": "Hex-encoded address.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$",
													"title": "Address"
												}
											]
										},
										"gas": {
											"description": "Gas limit.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"value": {
											"description": "Value.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"input": {
											"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
											"type": "string",
											"pattern": "^0x[0-9a-f]*$"
										},
										"gasPrice": {
											"description": "The gas price the sender is willing to pay in wei.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"chainId": {
											"description": "Chain ID that this transaction is valid on.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"v": {
											"description": "ECDSA Recovery ID.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"r": {
											"description": "ECDSA signature r.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"s": {
											"description": "ECDSA signature s.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										}
									}
								}
							],
							"properties": {
								"blockHash": {
									"description": "Block hash, 32 byte hex identifier for the block derived from the block header.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"blockNumber": {
									"description": "Block number as hex-encoded unsigned integer.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"from": {
									"description": "Sender's address.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"hash": {
									"description": "32 byte hex identifier for the transaction hash.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"transactionIndex": {
									"description": "Transaction position.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								}
							}
						}
					]
				}
			},
			"examples": [
				{
					"name": "eth_getTransactionByBlockNumberAndIndexExample",
					"jsonrpc": "2.0",
					"method": "eth_getTransactionByBlockNumberAndIndex",
					"id": 1,
					"params": [
						{
							"name": "block",
							"value": "0x49b95c"
						},
						{
							"name": "transactionIndex",
							"value": "0x2"
						}
					],
					"result": {
						"name": "eth_getTransactionByBlockNumberAndIndexExampleResponse",
						"description": "Transaction information",
						"value": {
							"blockHash": "0x3ff53efeec688238a8ecc0a1404221d1be3723aa6531f12f4d635dc8e7824779",
							"blockNumber": "0x49b95c",
							"chainId": "0xe708",
							"from": "0x05cc939ac053dc47366fe8032f9be00f5f33b508",
							"gas": "0x439d0",
							"gasPrice": "0x3dfd240",
							"hash": "0x8b04f98bec033ccc46e13f01ed75e0b2b12c0dc8b7d7d16102cf2b4addeaa3b8",
							"input": "0x83bd37f900011a51b19ce03dbe0cb44c1528e34a7edd7771e9af000...",
							"nonce": "0x8d",
							"r": "0xbc381ffdf71e5934df37913906305d88e06daf0051e69e42cabe4539e6fc4c58",
							"s": "0x4d65409fdc70bb2d14926b038ac7a064d8cce583df50efb424438dfd9333d578",
							"to": "0x2d8879046f1559e53eb052e949e9544bcb72f414",
							"transactionIndex": "0x2",
							"type": "0x0",
							"v": "0x1ce33",
							"value": "0x0"
						}
					}
				}
			]
		},
		{
			"name": "eth_getTransactionByHash",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get transaction by transaction hash",
			"description": "This request returns the information about a transaction for the given transaction hash.",
			"params": [
				{
					"name": "transactionHash",
					"description": "A string representing the hash (32 bytes) of a transaction.",
					"required": true,
					"schema": {
						"description": "32 byte hex value.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					}
				}
			],
			"result": {
				"name": "eth_getTransactionByHashResponse",
				"schema": {
					"description": "Returns the transaction information or \"not found\".",
					"oneOf": [
						{
							"description": "Not Found (null).",
							"type": "null"
						},
						{
							"type": "object",
							"title": "Linea transaction context",
							"required": [
								"blockHash",
								"blockNumber",
								"from",
								"hash",
								"transactionIndex"
							],
							"unevaluatedProperties": false,
							"oneOf": [
								{
									"type": "object",
									"title": "Signed 1559 transaction",
									"description": "EIP-1559 transaction.",
									"required": [
										"accessList",
										"chainId",
										"gas",
										"gasPrice",
										"input",
										"maxFeePerGas",
										"maxPriorityFeePerGas",
										"nonce",
										"r",
										"s",
										"type",
										"value"
									],
									"properties": {
										"type": {
											"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
											"type": "string",
											"enum": [
												0,
												1,
												2,
												3
											]
										},
										"nonce": {
											"description": "A counter for the number of transactions sent from the account; used for replay protection..",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"to": {
											"description": "The recipient's address. `null` when it's a contract creation transaction.",
											"oneOf": [
												{
													"title": "Contract creation",
													"type": "null"
												},
												{
													"description": "Hex-encoded address.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$",
													"title": "Address"
												}
											]
										},
										"gas": {
											"description": "Gas limit.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"value": {
											"description": "Value.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"input": {
											"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
											"type": "string",
											"pattern": "^0x[0-9a-f]*$"
										},
										"maxPriorityFeePerGas": {
											"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"maxFeePerGas": {
											"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.\n",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"gasPrice": {
											"description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using `effectiveGasPrice` in the receipt object going forward.\n",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"accessList": {
											"description": "EIP-2930 access list.",
											"type": "array",
											"items": {
												"description": "Access list entry.",
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"address": {
														"description": "Hex-encoded address.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$"
													},
													"storageKeys": {
														"type": "array",
														"items": {
															"description": "32 byte hex value.",
															"type": "string",
															"pattern": "^0x[0-9a-f]{64}$"
														}
													}
												}
											}
										},
										"chainId": {
											"description": "Chain ID that this transaction is valid on.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"v": {
											"description": "ECDSA Recovery ID. An alternative to `yParity`.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"r": {
											"description": "ECDSA signature r.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"s": {
											"description": "ECDSA signature s.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										}
									}
								},
								{
									"type": "object",
									"title": "Signed 2930 transaction",
									"description": "EIP-2930 transaction.",
									"required": [
										"accessList",
										"chainId",
										"gas",
										"gasPrice",
										"input",
										"nonce",
										"r",
										"s",
										"type",
										"value"
									],
									"properties": {
										"type": {
											"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
											"type": "string",
											"enum": [
												0,
												1,
												2,
												3
											]
										},
										"nonce": {
											"description": "A counter for the number of transactions sent from the account; used for replay protection.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"to": {
											"description": "The recipient's address. `null` when it's a contract creation transaction.",
											"oneOf": [
												{
													"title": "Contract creation",
													"type": "null"
												},
												{
													"description": "Hex-encoded address.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$",
													"title": "Address"
												}
											]
										},
										"gas": {
											"description": "Gas limit.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"value": {
											"description": "Value.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"input": {
											"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
											"type": "string",
											"pattern": "^0x[0-9a-f]*$"
										},
										"gasPrice": {
											"description": "The gas price the sender is willing to be paid in wei.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"accessList": {
											"description": "EIP-2930 access list.",
											"type": "array",
											"items": {
												"description": "Access list entry.",
												"type": "object",
												"additionalProperties": false,
												"properties": {
													"address": {
														"description": "Hex-encoded address.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$"
													},
													"storageKeys": {
														"type": "array",
														"items": {
															"description": "32 byte hex value.",
															"type": "string",
															"pattern": "^0x[0-9a-f]{64}$"
														}
													}
												}
											}
										},
										"chainId": {
											"description": "Chain ID that this transaction is valid on.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"v": {
											"description": "ECDSA Recovery ID. An alternative to `yParity`.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"r": {
											"description": "ECDSA signature r.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"s": {
											"description": "ECDSA signature s.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										}
									}
								},
								{
									"description": "Signed Legacy Transaction.",
									"type": "object",
									"title": "Signed legacy transaction",
									"required": [
										"gas",
										"gasPrice",
										"input",
										"nonce",
										"r",
										"s",
										"type",
										"v",
										"value"
									],
									"properties": {
										"type": {
											"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
											"type": "string",
											"enum": [
												0,
												1,
												2,
												3
											]
										},
										"nonce": {
											"description": "A counter for the number of transactions sent from the account; used for replay protection.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"to": {
											"description": "The recipient's address. `null` when it's a contract creation transaction.",
											"oneOf": [
												{
													"title": "Contract creation",
													"type": "null"
												},
												{
													"description": "Hex-encoded address.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$",
													"title": "Address"
												}
											]
										},
										"gas": {
											"description": "Gas limit.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"value": {
											"description": "Value.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"input": {
											"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
											"type": "string",
											"pattern": "^0x[0-9a-f]*$"
										},
										"gasPrice": {
											"description": "The gas price the sender is willing to pay in wei.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"chainId": {
											"description": "Chain ID that this transaction is valid on.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"v": {
											"description": "ECDSA Recovery ID.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"r": {
											"description": "ECDSA signature r.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"s": {
											"description": "ECDSA signature s.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										}
									}
								}
							],
							"properties": {
								"blockHash": {
									"description": "Block hash, 32 byte hex identifier for the block derived from the block header.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"blockNumber": {
									"description": "Block number as hex-encoded unsigned integer.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"from": {
									"description": "Sender's address.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"hash": {
									"description": "32 byte hex identifier for the transaction hash.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"transactionIndex": {
									"description": "Transaction position.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								}
							}
						}
					]
				}
			},
			"examples": [
				{
					"name": "eth_getTransactionByHashExample",
					"description": "Type 0 transaction.",
					"jsonrpc": "2.0",
					"method": "eth_getTransactionByHash",
					"id": 1,
					"params": [
						{
							"name": "transactionHash",
							"value": "0x1ecac319d356e2bd78262dc9efddb6b048f33e4c706f356d72768f87c5fc0753"
						}
					],
					"result": {
						"name": "eth_getTransactionByHashExampleResponse",
						"description": "Type 0/EIP-2930 transaction data.",
						"value": {
							"blockHash": "0x3ff53efeec688238a8ecc0a1404221d1be3723aa6531f12f4d635dc8e7824779",
							"blockNumber": "0x49b95c",
							"chainId": "0xe708",
							"from": "0x188e0b45cedd8f5e425e73c8aa7953b92115ec24",
							"gas": "0x2dc04",
							"gasPrice": "0x3ba1f2a",
							"hash": "0x1ecac319d356e2bd78262dc9efddb6b048f33e4c706f356d72768f87c5fc0753",
							"input": "0xb93037010000000000000000000000000000000000000000000000000000...",
							"nonce": "0x50",
							"r": "0x9eb4ed965beb69b22086727a746bf7af81a1a54ba1b209582909b40bd4d30f77",
							"s": "0x29ff48a513574546b651edb11c5f3ba61eb0758094f6c1f2bc617c860a736245",
							"to": "0xef4fb24ad0916217251f553c0596f8edc630eb66",
							"transactionIndex": "0x8",
							"v": "0x1ce33",
							"value": "0x79b3d693c7788"
						}
					}
				}
			]
		},
		{
			"name": "eth_getTransactionCount",
			"tags": [
				{
					"name": "EVM"
				},
				{
					"name": "Archive"
				}
			],
			"summary": "Get transaction count",
			"description": "This request returns a count of transactions sent from a given address up to and including the provided block.",
			"params": [
				{
					"name": "address",
					"description": "A string identifier for the contract or EOA address (20 bytes).",
					"required": true,
					"schema": {
						"description": "Hex-encoded address.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					}
				},
				{
					"name": "block",
					"required": true,
					"description": "Block number in hexadecimal, block hash, or one of the string tags. Use the `pending` tag to get the next account nonce not used by any pending transactions.",
					"schema": {
						"description": "Block number, block hash, or string tag.",
						"anyOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"finalized",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							},
							{
								"description": "32 byte hex value.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$",
								"title": "Block hash"
							}
						]
					}
				}
			],
			"result": {
				"name": "eth_getTransactionCountResponse",
				"description": "The number of transactions sent from the specified address up to and including the specified block, in hexadecimal.",
				"schema": {
					"description": "Hex-encoded unsigned integer.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0x1"
				}
			},
			"examples": [
				{
					"name": "eth_getTransactionCountExample",
					"jsonrpc": "2.0",
					"method": "eth_getTransactionCount",
					"id": 1,
					"params": [
						{
							"name": "address",
							"value": "0x188e0B45cedd8f5e425e73c8aa7953b92115ec24"
						},
						{
							"name": "block",
							"value": "0x4fb66d"
						}
					],
					"result": {
						"name": "eth_getTransactionCountExampleResponse",
						"value": "0x52"
					}
				}
			]
		},
		{
			"name": "eth_getTransactionReceipt",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get transaction receipt by hash",
			"description": "This request returns the receipt of a transaction by transaction hash. Receipts for pending transactions aren't available.",
			"params": [
				{
					"name": "transactionHash",
					"description": "A string representing the hash (32 bytes) of a transaction.",
					"required": true,
					"schema": {
						"description": "32 byte hex value.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					}
				}
			],
			"result": {
				"name": "eth_getTransactionReceiptResponse",
				"description": "A transaction receipt object, or `null` when no receipt was found.",
				"schema": {
					"oneOf": [
						{
							"description": "Not Found (null).",
							"type": "null"
						},
						{
							"type": "object",
							"description": "Receipt information",
							"required": [
								"blockHash",
								"blockNumber",
								"from",
								"cumulativeGasUsed",
								"gasUsed",
								"logs",
								"logsBloom",
								"transactionHash",
								"transactionIndex",
								"effectiveGasPrice"
							],
							"additionalProperties": false,
							"properties": {
								"type": {
									"description": "The transaction type as introduced in EIP-2718, in hexadecimal. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType (EIP-2930)\n- 0x02 for DynamicFeeTxType (EIP-1559)\n",
									"type": "string",
									"enum": [
										"0x00",
										"0x01",
										"0x02"
									]
								},
								"transactionHash": {
									"description": "The transaction hash in which the call was made.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"transactionIndex": {
									"description": "The position in the block, in hexadecimal.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"blockHash": {
									"description": "Block hash; 32 byte hex identifier for the block derived from the block header.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"blockNumber": {
									"description": "Block number as hex-encoded unsigned integer.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"from": {
									"description": "Address of the sender.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"to": {
									"description": "Address of the receiver or null in a contract creation transaction.",
									"oneOf": [
										{
											"title": "Contract Creation (null)",
											"type": "null"
										},
										{
											"description": "Hex-encoded address.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$",
											"title": "Recipient Address"
										}
									]
								},
								"cumulativeGasUsed": {
									"description": "The sum of gas used by this transaction and all preceding transactions in the same block.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"gasUsed": {
									"description": "The amount of gas used for this specific transaction alone.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"contractAddress": {
									"description": "The contract address created, if the transaction was a contract creation, otherwise null.",
									"oneOf": [
										{
											"description": "Hex-encoded address.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$",
											"title": "Contract address"
										},
										{
											"title": "Null",
											"type": "null"
										}
									]
								},
								"logs": {
									"type": "array",
									"items": {
										"type": "object",
										"required": [
											"transactionHash"
										],
										"additionalProperties": false,
										"properties": {
											"removed": {
												"type": "boolean"
											},
											"logIndex": {
												"description": "Hex-encoded unsigned integer.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"transactionIndex": {
												"description": "A hexadecimal of the integer representing the position in the block.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"transactionHash": {
												"description": "The transaction hash in which the call was made.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											},
											"blockHash": {
												"description": "Block hash; 32 byte hex identifier for the block derived from the block header.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											},
											"blockNumber": {
												"description": "Block number as hex-encoded unsigned integer.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"address": {
												"description": "Hex-encoded address.",
												"type": "string",
												"pattern": "^0x[0-9a-fA-F]{40}$"
											},
											"data": {
												"description": "Hex-encoded bytes.",
												"type": "string",
												"pattern": "^0x[0-9a-f]*$"
											},
											"topics": {
												"type": "array",
												"items": {
													"description": "32 Hex-encoded bytes.",
													"type": "string",
													"pattern": "^0x[0-9a-f]{64}$"
												}
											}
										}
									}
								},
								"logsBloom": {
									"description": "Bloom filter for the block logs; `null` when block is pending.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{512}$"
								},
								"root": {
									"description": "The post-transaction state root. Only specified for transactions included before the Byzantium upgrade.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"status": {
									"description": "Either 0x1 (success) or 0x0 (failure). Only specified for transactions included after the Byzantium upgrade.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1",
									"enum": [
										"0x0",
										"0x1"
									]
								},
								"effectiveGasPrice": {
									"description": "The actual value per gas deducted from the sender's account. Before EIP-1559, this is equal to the transaction's gas price. After, it is equal to baseFeePerGas + min(maxFeePerGas - baseFeePerGas, maxPriorityFeePerGas).",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								}
							}
						}
					]
				}
			},
			"examples": [
				{
					"name": "eth_getTransactionReceiptExample",
					"jsonrpc": "2.0",
					"method": "eth_getTransactionReceipt",
					"id": 1,
					"params": [
						{
							"name": "Transaction hash",
							"value": "0x1ecac319d356e2bd78262dc9efddb6b048f33e4c706f356d72768f87c5fc0753"
						}
					],
					"result": {
						"name": "eth_getTransactionReceiptExampleResponse",
						"value": {
							"blockHash": "0x3ff53efeec688238a8ecc0a1404221d1be3723aa6531f12f4d635dc8e7824779",
							"blockNumber": "0x49b95c",
							"contractAddress": null,
							"cumulativeGasUsed": "0xadcd6",
							"effectiveGasPrice": "0x3ba1f2a",
							"from": "0x188e0b45cedd8f5e425e73c8aa7953b92115ec24",
							"gasUsed": "0x21950",
							"logs": [
								{
									"address": "0xef4fb24ad0916217251f553c0596f8edc630eb66",
									"blockHash": "0x3ff53efeec688238a8ecc0a1404221d1be3723aa6531f12f4d635dc8e7824779",
									"blockNumber": "0x49b95c",
									"data": "0x00000000000000000000000000000000000000000000000000000000000000e0a0...",
									"logIndex": "0x14",
									"removed": false,
									"topics": [
										"0xfc8703fd57380f9dd234a89dce51333782d49c5902f307b02f03e014d18fe471"
									],
									"transactionHash": "0x1ecac319d356e2bd78262dc9efddb6b048f33e4c706f356d72768f87c5fc0753",
									"transactionIndex": "0x8"
								}
							],
							"logsBloom": "0x000000000000000000000000000000000000000000000000000000000000000000...",
							"status": "0x1",
							"to": "0xef4fb24ad0916217251f553c0596f8edc630eb66",
							"transactionHash": "0x1ecac319d356e2bd78262dc9efddb6b048f33e4c706f356d72768f87c5fc0753",
							"transactionIndex": "0x8",
							"type": "0x0"
						}
					}
				}
			]
		},
		{
			"name": "eth_getUncleByBlockHashAndIndex",
			"tags": [
				{
					"name": "EVM"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get uncle by block hash and index",
			"description": "This request returns information about an uncle block given the block hash and the uncle index position.",
			"params": [
				{
					"name": "blockHash",
					"description": "32-byte block hash.",
					"required": true,
					"schema": {
						"description": "32 byte hex value.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					}
				},
				{
					"name": "index",
					"description": "Hexadecimal of the uncle's index position. Also known as the storage.",
					"required": true,
					"schema": {
						"description": "Hex-encoded 256 bit unsigned integer.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
					}
				}
			],
			"result": {
				"name": "eth_getUncleByBlockHashAndIndexResponse",
				"description": "A block object, or null when no block was found, or `null` if not found.",
				"schema": {
					"oneOf": [
						{
							"description": "Not Found (null).",
							"type": "null"
						},
						{
							"description": "Hex-encoded unsigned integer.",
							"type": "string",
							"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
							"example": "0x1"
						}
					]
				}
			},
			"examples": [
				{
					"name": "eth_getUncleByBlockHashAndIndexExample",
					"jsonrpc": "2.0",
					"method": "eth_getUncleCountByBlockHash",
					"id": 1,
					"params": [
						{
							"name": "blockHash",
							"value": "0xd459570b5d2994a81ec1875b058f665b7f9c006172a8bd2860de87aee9569ac8"
						},
						{
							"name": "index",
							"value": "0x0"
						}
					],
					"result": {
						"name": "eth_getUncleByBlockHashAndIndexExampleResponse",
						"value": null
					}
				}
			]
		},
		{
			"name": "eth_getUncleCountByBlockHash",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get number of uncles by block hash",
			"description": "This request returns the number of uncles in a block from a block matching the given block hash.",
			"params": [
				{
					"name": "blockHash",
					"description": "32-byte block hash.",
					"schema": {
						"description": "32 byte hex value.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					}
				}
			],
			"result": {
				"name": "eth_getUncleCountByBlockHashResponse",
				"description": "The number of uncles in the block in hexadecimal, or `null` if not found.",
				"schema": {
					"oneOf": [
						{
							"description": "Not Found (null).",
							"type": "null"
						},
						{
							"description": "Hex-encoded unsigned integer.",
							"type": "string",
							"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
							"example": "0x1"
						}
					]
				}
			},
			"examples": [
				{
					"name": "eth_getUncleCountByBlockHashExample",
					"jsonrpc": "2.0",
					"method": "eth_getUncleCountByBlockHash",
					"id": 1,
					"params": [
						{
							"name": "blockHash",
							"value": "0xd459570b5d2994a81ec1875b058f665b7f9c006172a8bd2860de87aee9569ac8"
						}
					],
					"result": {
						"name": "eth_getUncleCountByBlockHashExampleResponse",
						"value": "0x0"
					}
				}
			]
		},
		{
			"name": "eth_maxPriorityFeePerGas",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get current max priority fee per gas",
			"description": "This request returns an estimate of how much priority fee, in wei, you should pay to get a transaction included in a block.",
			"params": [],
			"result": {
				"name": "eth_maxPriorityFeePerGasResponse",
				"schema": {
					"maxPriorityFeePerGas": {
						"description": "The priority fee for block inclusion in wei, as a hexadecimal value.",
						"$ref": "#/components/schemas/uint",
						"example": "0x3b9aca00"
					}
				}
			},
			"examples": [
				{
					"name": "eth_maxPriorityFeePerGasExample",
					"jsonrpc": "2.0",
					"method": "eth_maxPriorityFeePerGas",
					"id": 1,
					"params": [],
					"result": {
						"name": "eth_maxPriorityFeePerGasExampleResponse",
						"value": "0x3b9aca00"
					}
				}
			]
		},
		{
			"name": "eth_protocolVersion",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				}
			],
			"summary": "Get client's protocol version",
			"description": "This request returns the current Ethereum protocol version of the client run by the node serving the request. **Warning**, not all methods are supported by the same client across Infura.",
			"params": [],
			"result": {
				"name": "eth_protocolVersionResponse",
				"schema": {
					"description": "The current Ethereum protocol version, in hexadecimal.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0x1"
				}
			},
			"examples": [
				{
					"name": "eth_protocolVersionExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "eth_protocolVersion",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_protocolVersionResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "eth_sendRawTransaction",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Submit a raw transaction",
			"description": "This request submits a raw, pre-signed, transaction. Linea is compatible with the [London fork](https://ethereum.org/en/history/#london_facilities) and supports [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) type 2 transactions.\n\n**Important**:\n\n- The transaction must be signed externally using a private key. Consider using a wallet such as [MetaMask](https://metamask.io) or libraries such as [web3.js](https://docs.metamask.io/services/tutorials/ethereum/send-a-transaction/use-web3.js) or [ethers.js](https://docs.metamask.io/services/tutorials/ethereum/send-a-transaction/send-a-transaction-ethers). \n- Ensure the account controlled by the private key has enough funds to pay the network's gas fee.\n- The gas allocated to this transaction must cover both the value of the transaction and network gas fees.\n",
			"params": [
				{
					"name": "transaction",
					"description": "Hex-encoded, serialized, pre-signed transaction data that includes all necessary fields (such as sender, recipient, value, gas, etc.) as required by the Ethereum transaction format. Linea supports 1559, 2930, and legacy transactions types.",
					"required": true,
					"schema": {
						"description": "Hex-encoded bytes.",
						"type": "string",
						"pattern": "^0x[0-9a-f]*$"
					}
				}
			],
			"result": {
				"name": "eth_sendRawTransactionResponse",
				"description": "The transaction hash if the transaction was successfully broadcast, or a zero hash if the transaction is not yet included in a block. If creating a contract, consider using `eth_getTransactionReceipt` to get the contract address after the transaction is included.",
				"schema": {
					"description": "32 byte hex value.",
					"type": "string",
					"pattern": "^0x[0-9a-f]{64}$"
				}
			},
			"examples": [
				{
					"name": "eth_sendRawTransactionExample",
					"jsonrpc": "2.0",
					"method": "eth_sendRawTransaction",
					"id": 1,
					"params": [
						{
							"name": "transaction",
							"value": "0xf869018203e882520894f17f52151..."
						}
					],
					"result": {
						"name": "eth_sendRawTransactionExampleResponse",
						"value": "0xe670ec64341771606e55d6b4ca35a1a6..."
					}
				}
			]
		},
		{
			"name": "eth_submitHashrate",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "eth_submitHashrate",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "eth_submitWork",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Submit work solution",
			"description": "This request is used for submitting a proof-of-work solution.",
			"params": [],
			"result": {
				"name": "eth_submitWorkResponse",
				"schema": {
					"description": "Returns `true` if the provided solution is valid, otherwise `false`.",
					"type": "boolean",
					"example": "true"
				}
			},
			"examples": [
				{
					"name": "eth_submitWorkExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "eth_submitWork",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_submitWorkExampleResponse",
						"value": "false"
					}
				}
			]
		},
		{
			"name": "eth_subscribe",
			"tags": [
				{
					"name": "WebSocket"
				}
			],
			"summary": "Create a new subscription",
			"description": "This request creates a new subscription for particular events. The node returns a subscription ID. For each event that matches the subscription, a notification with relevant data is sent together with the subscription ID.\nThis must be a WebSocket request and is only available on mainnet. We recommend you use the WSS protocol to set up bidirectional stateful subscriptions. Stateless HTTP WebSockets are also supported.\n**We strongly recommend specifying a filter (addresses, topics, or both) when subscribing to the logs event.**\n",
			"params": [
				{
					"name": "events",
					"description": "Specify one of the following subscription events.",
					"required": true,
					"schema": {
						"anyOf": [
							{
								"title": "newHeads",
								"description": "This subscription returns a notification each time a new header is appended to the chain, including chain reorganizations. In a chain reorganization, the subscription emits all new headers for the new chain. Therefore, the subscription can emit multiple headers at the same height.",
								"type": "string",
								"enum": [
									"newHeads"
								]
							},
							{
								"title": "logs",
								"description": "This subscription returns logs from newly imported blocks that match the specified filter criteria. If a chain reorganization occurs, logs from the old chain are resent with the removed property set to `true`. Logs from transactions that are included in the new chain are emitted. As a result, the same transaction might emit logs multiple times during a reorganization.",
								"type": "object",
								"properties": {
									"logs": {
										"type": "string",
										"enum": [
											"logs"
										]
									},
									"address": {
										"description": "Optional filter to only return logs that are created from an array of (one or more) provided addresses.",
										"type": "array",
										"items": {
											"description": "Hex-encoded address.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										}
									},
									"topics": {
										"type": "array",
										"description": "Optionally filter by [topics](https://info.etherscan.com/what-is-event-logs). Topics are made available when contracts are deployed with an indexed keyword added to the parameter declarationFilter.\n    - Topic 0: Is the first topic in the event log. It often represents an event or a primary identifier of an event, for example, the Keccak256 hash of the event signature.\n    - Topic 1: The first indexed parameter (for example, sender address).\n    - Topic 2: The second indexed parameter (for example, recipient address).\n    - Topic 3: The third indexed parameter (for example, additional event-specific data).\n",
										"items": {
											"type": "string",
											"example": "0xEventSignatureHash",
											"default": null,
											"maxItems": 4
										}
									}
								}
							},
							{
								"title": "newPendingTransactions",
								"description": "This subscription returns the hash for all transactions that are added to the pending state and are signed with a key that's available in the node. When a transaction that was previously part of the canonical chain isn't part of the new canonical chain after a reorganization, it's emitted again.",
								"type": "string",
								"enum": [
									"newPendingTransactions"
								]
							}
						]
					}
				}
			],
			"result": {
				"name": "subscriptionId",
				"schema": {
					"description": "The ID of the newly-created subscription on the node.",
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "eth_subscribeExample_subscriptionID",
					"jsonrpc": "2.0",
					"method": "eth_subscribe",
					"id": 1,
					"params": [],
					"result": {
						"name": "eth_subscribeExampleResponse",
						"description": "Subscription identifier.",
						"value": "0x9cef478923ff08bf67fde6c64013158d"
					}
				}
			]
		},
		{
			"name": "eth_syncing",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get sync status",
			"description": "This request returns an object with data about the sync status or `false`, indicating that that the node is fully synchronized.",
			"params": [],
			"result": {
				"name": "syncingStatus",
				"description": "Synchronization status data object, or `false` if not synchronizing.",
				"schema": {
					"description": "Syncing status.",
					"oneOf": [
						{
							"title": "Syncing progress",
							"type": "object",
							"properties": {
								"startingBlock": {
									"description": "Block number at which the import started, in hexadecimal. This will only be reset after the sync reaches the head.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x8A9D0"
								},
								"currentBlock": {
									"description": "Block number of the current syncing block, in hexadecimal. This is the same as `eth_blockNumber`.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x8FA20"
								},
								"highestBlock": {
									"description": "Block number of the highest syncing block, in hexadecimal.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x90B70"
								}
							}
						},
						{
							"title": "Not syncing",
							"description": "Should always return `false` if not syncing.",
							"properties": {
								"result": {
									"type": "boolean",
									"value": false
								}
							}
						}
					]
				}
			},
			"examples": [
				{
					"name": "eth_syncingExampleIsSync",
					"params": [],
					"jsonrpc": "2.0",
					"method": "eth_syncing",
					"id": 1,
					"result": {
						"name": "eth_syncingExampleIsSyncResponse",
						"value": {
							"startingBlock": "0x8A9D0",
							"currentBlock": "0x8FA20",
							"highestBlock": "0x90B70"
						}
					}
				},
				{
					"name": "eth_syncingExampleNoSync",
					"params": [],
					"jsonrpc": "2.0",
					"method": "eth_syncing",
					"id": 1,
					"result": {
						"name": "eth_syncingExampleNoSyncResponse",
						"value": "false"
					}
				}
			]
		},
		{
			"name": "eth_uninstallFilter",
			"tags": [
				{
					"name": "EVM"
				},
				{
					"name": "Internal"
				}
			],
			"summary": "Uninstall filter",
			"description": "This request uninstalls a filter that matches the given filter identifier.",
			"params": [
				{
					"name": "filterId",
					"schema": {
						"description": "Hex-encoded unsigned integer.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					}
				}
			],
			"result": {
				"name": "eth_uninstallFilterResponse",
				"description": "Result is always given as `true`; as in \"filter doesn't exist\" or \"filter no longer exists\".",
				"schema": {
					"type": "boolean",
					"value": true
				}
			},
			"examples": [
				{
					"name": "eth_uninstallFilterExample",
					"jsonrpc": "2.0",
					"method": "eth_uninstallFilter",
					"id": 1,
					"params": [
						{
							"name": "filterId",
							"value": "0x8144b30022b5d309ac57b8e228d77d52d39a6e0b65e95123dd1e5d375b8b1be6"
						}
					],
					"result": {
						"name": "eth_uninstallFilterExampleResponse",
						"description": "Filter doesn't exist.",
						"value": true
					}
				}
			]
		},
		{
			"name": "eth_unsubscribe",
			"tags": [
				{
					"name": "WebSocket"
				}
			],
			"summary": "Delete a subscription",
			"description": "This request deletes an existing subscription based on the supplied subscription ID.",
			"params": [
				{
					"name": "subscriptionId",
					"description": "Subscription identifier.",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "successStatus",
				"schema": {
					"description": "Success status of the unsubscribe request.",
					"type": "boolean",
					"example": true
				}
			},
			"examples": [
				{
					"name": "eth_unsubscribeExample",
					"jsonrpc": "2.0",
					"method": "eth_unsubscribe",
					"id": 1,
					"params": [
						{
							"name": "subscriptionId",
							"value": "0x9cef478923ff08bf67fde6c64013158d"
						}
					],
					"result": {
						"name": "eth_unsubscribeExampleResponse",
						"value": true
					}
				}
			]
		},
		{
			"name": "linea_estimateGas",
			"tags": [
				{
					"name": "EVM"
				}
			],
			"summary": "Get gas estimate",
			"description": "This request returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction is *not* added to the blockchain. The min gas price for inclusion in the transaction pool is set to 0.02 gwei for mainnet. Practical minimum gas price depends on both the transaction's properties and L1 fees.\n`linea_estimateGas` uses the same inputs as the standard `eth_estimateGas`, but returns the recommended gas limit, the base fee per gas, and the priority fee per gas. We recommend using linea_estimateGas for more accurate results. Learn more about [estimating Linea gas fees](https://docs.linea.build/build-on-linea/gas-fees).\n",
			"params": [
				{
					"name": "transaction",
					"description": "Transaction call object. For `linea_estimateGas`, fields are optional because setting a gas limit is irrelevant to the estimation process (unlike transactions, in which gas limits apply).",
					"required": true,
					"schema": {
						"type": "object",
						"description": "Transaction object generic to all Linea-supported transactions. All transaction call object parameters are optional.",
						"additionalProperties": false,
						"properties": {
							"type": {
								"description": "The transaction type as introduced in EIP-2718, in hexadecimal. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType (EIP-2930)\n- 0x02 for DynamicFeeTxType (EIP-1559)\n",
								"type": "string",
								"enum": [
									"0x00",
									"0x01",
									"0x02"
								]
							},
							"nonce": {
								"description": "Account nonce; counter for the number of transactions sent from the account; for replay protection.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"to": {
								"description": "Address of the action receiver.",
								"oneOf": [
									{
										"title": "Contract Creation (null)",
										"type": "null"
									},
									{
										"description": "Hex-encoded address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$",
										"title": "Address"
									}
								]
							},
							"from": {
								"description": "Address of the sender.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$"
							},
							"gas": {
								"description": "Gas provided by the sender. `eth_call` consumes zero gas, but this schema supports other executions that might need this parameter. `eth_estimateGas` ignores this value.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"value": {
								"description": "Value to transfer in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"input": {
								"description": "Input data; alternative term for `data`.",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							},
							"gasPrice": {
								"description": "The gas price the sender is willing to pay in wei. Used only in non-[EIP-1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md) transactions.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"default": "0x0"
							},
							"maxPriorityFeePerGas": {
								"description": "Maximum fee, in wei, the sender is willing to pay per gas above the base fee. Can be used only in [EIP-1559 transactions](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md). If used, must specify `maxFeePerGas`.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"maxFeePerGas": {
								"description": "Maximum total fee (base fee + priority fee), in wei, the sender is willing to pay per gas. Can be used only in [EIP-1559 transactions](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md). If used, must specify `maxPriorityFeePerGas`.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"accessList": {
								"description": "EIP-2930 access list; a list of addresses and storage keys that the transaction plans to access.",
								"type": "array",
								"items": {
									"description": "Access list entry.",
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"address": {
											"description": "Hex-encoded address.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										},
										"storageKeys": {
											"type": "array",
											"items": {
												"description": "32 byte hex value.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											}
										}
									}
								}
							},
							"chainId": {
								"description": "Chain ID that this transaction is valid on.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						}
					}
				},
				{
					"name": "block",
					"required": false,
					"schema": {
						"description": "Block number or string tag.",
						"oneOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block).\n- `earliest`: The lowest numbered block the client has available.\n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							}
						]
					}
				}
			],
			"result": {
				"name": "linea_estimateGasResponse",
				"description": "The gas estimate for the transaction, in hexadecimal.",
				"schema": {
					"description": "Hex-encoded unsigned integer.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0x1"
				}
			},
			"examples": [
				{
					"name": "linea_estimateGasExample",
					"jsonrpc": "2.0",
					"method": "linea_estimateGas",
					"id": 1,
					"params": [
						{
							"name": "transaction",
							"value": {
								"from": "0x188e0B45cedd8f5e425e73c8aa7953b92115ec24",
								"to": "0x791A479620F2A5cf58BB53D45CD3Ec72cFef22Fe",
								"value": "0x28F"
							}
						}
					],
					"result": {
						"name": "linea_estimateGasExampleResponse",
						"value": {
							"baseFeePerGas": "0x7",
							"gasLimit": "0x5208",
							"priorityFeePerGas": "0x9c670ff"
						}
					}
				}
			]
		},
		{
			"name": "linea_getTransactionExclusionStatusV1",
			"tags": [
				{
					"name": "Bespoke"
				}
			],
			"summary": "Verify if a transaction exceeded data line limits",
			"description": "This request checks if a transaction was rejected for exceeding data line limits, preventing the prover from generating a proof to be included in a block. \nRejected transaction data is only available within seven days of the transaction attempt. Querying older transactions returns a null response.\n",
			"params": [
				{
					"name": "transactionHash",
					"description": "A string representing the hash (32 bytes) of a transaction.",
					"required": true,
					"schema": {
						"description": "32 byte hex value.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					}
				}
			],
			"result": {
				"name": "linea_getTransactionExclusionStatusV1Response",
				"schema": {
					"oneOf": [
						{
							"title": "Null response",
							"type": "null"
						},
						{
							"title": "Exclusion details",
							"type": "object",
							"description": "Only returned for transactions rejected by the sequencer.",
							"properties": {
								"txHash": {
									"description": "32 byte hex identifier for the transaction hash.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"from": {
									"description": "Sender's address.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"nonce": {
									"description": "Account nonce; counter for the number of transactions sent from the account; for replay protection.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"txRejectionStage": {
									"description": "The point at which the transaction was rejected:\n  - SEQUENCER: Rejected by the sequencer\n  - RPC: Rejected by an RPC node\n  - P2P: Rejected by a P2P-connected node\n",
									"type": "string",
									"enum": [
										"SEQUENCER",
										"RPC",
										"P2P"
									]
								},
								"reasonMessage": {
									"description": "The reason the transaction was rejected.",
									"type": "string"
								},
								"blockNumber": {
									"description": "Block number of the block that the transaction was rejected from, in hexadecimal.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"timestamp": {
									"description": "Time of rejection, in ISO 8601 format.",
									"type": "string"
								}
							}
						}
					]
				}
			},
			"examples": [
				{
					"name": "linea_getTransactionExclusionStatusV1Example_ResponseProvided",
					"params": [
						{
							"name": "transactionHash",
							"value": "0x526e56101cf39c1e717cef9cedf6fdddb42684711abda35bae51136dbb350ad7"
						}
					],
					"jsonrpc": "2.0",
					"method": "linea_getTransactionExclusionStatusV1",
					"id": 1,
					"result": {
						"description": "Example of a transaction exclusion response.",
						"name": "linea_getTransactionExclusionStatusV1ExampleResponse",
						"value": {
							"txHash": "0x526e56101cf39c1e717cef9cedf6fdddb42684711abda35bae51136dbb350ad7",
							"from": "0x4d144d7b9c96b26361d6ac74dd1d8267edca4fc2",
							"nonce": "0x64",
							"txRejectionStage": "SEQUENCER",
							"reasonMessage": "Transaction line count for module ADD=402 is above the limit 70",
							"blockNumber": "0x3039",
							"timestamp": "2024-08-22T09:18:51Z"
						}
					}
				},
				{
					"name": "linea_getTransactionExclusionStatusV1ExampleNull",
					"params": [
						{
							"name": "transactionHash",
							"value": "0x526e56101cf39c1e717cef9cedf6fdddb42684711abda35bae51136dbb350ad7"
						}
					],
					"jsonrpc": "2.0",
					"method": "linea_getTransactionExclusionStatusV1",
					"id": 1,
					"result": {
						"description": "Null response due to data purge or transaction non exclusion.",
						"name": "linea_getTransactionExclusionStatusV1Example_NullResponse",
						"value": null
					}
				}
			]
		},
		{
			"name": "miner_changeTargetGasLimit",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "miner_changeTargetGasLimit",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "miner_setCoinbase",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "miner_setCoinbase",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "net_enode",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "net_enode",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "net_listening",
			"tags": [
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get listening status",
			"description": "This request returns `true` if the client is actively listening for network connections. **Warning**: Since Infura methods may be supported by different Ethereum clients, the result can't be considered a global status. It only reflects the listening status of the specific client handling this request.\n",
			"params": [],
			"result": {
				"name": "net_listeningResponse",
				"schema": {
					"description": "Returns `true` If the client is actively listening for network connections, otherwise returns `false`.",
					"type": "boolean",
					"example": true
				}
			},
			"examples": [
				{
					"name": "net_listeningExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "net_listening",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea node.",
						"name": "net_listeningExampleResponse",
						"value": true
					}
				}
			]
		},
		{
			"name": "net_peerCount",
			"tags": [
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get number of peers",
			"description": "This request returns the number of peers currently connected to the client. **Warning**: Since Infura methods may be supported by different Ethereum clients, the result can't be considered a global status. It only reflects the number of peers currently connected to the specific client handling this request.\n",
			"params": [],
			"result": {
				"name": "net_peerCountResponse",
				"schema": {
					"description": "The number of connected peers in hexadecimal.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0x64"
				}
			},
			"examples": [
				{
					"name": "net_peerCountExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "net_peerCount",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "net_peerCountExampleResponse",
						"value": "0x64"
					}
				}
			]
		},
		{
			"name": "net_services",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "net_services",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "net_version",
			"tags": [
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId`",
			"description": "This request returns the `chainId` as a decimal where eth_chainId returns a hexadecimal.",
			"params": [],
			"result": {
				"name": "net_versionResponse",
				"schema": {
					"description": "String representation of the chain ID.",
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "maininet_net_versionExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "net_version",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "net_versionExampleResponse",
						"value": "59144"
					}
				},
				{
					"name": "testnet_net_versionExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "net_version",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea Sepolia node.",
						"name": "net_versionExampleResponse",
						"value": "59141"
					}
				}
			]
		},
		{
			"name": "plugins_reloadPluginConfig",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "plugins_reloadPluginConfig",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "rpc_modules",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "rpc_modules",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "trace_block",
			"tags": [
				{
					"name": "Archive"
				},
				{
					"name": "Bespoke"
				},
				{
					"name": "Beta"
				}
			],
			"summary": "Get trace information",
			"description": "This request returns trace data for all the transactions in a given block. This can be useful for debugging purposes or for analyzing the behavior of the chain.",
			"params": [
				{
					"name": "block",
					"description": "Block number or string tag.",
					"required": true,
					"schema": {
						"description": "Block number or string tag.",
						"oneOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"finalized",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							}
						]
					}
				}
			],
			"result": {
				"name": "trace_blockResponse",
				"schema": {
					"description": "An array of [calls to other contracts](https://docs.infura.io/api/networks/ethereum/json-rpc-methods/trace-methods#trace) containing one object per call, in transaction execution order."
				}
			},
			"examples": [
				{
					"name": "trace_blockExample",
					"params": [
						{
							"name": "block",
							"value": "0x4ff31d"
						}
					],
					"jsonrpc": "2.0",
					"method": "trace_block",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "trace_blockExampleResponse",
						"value": {
							"jsonrpc": "2.0",
							"id": 1,
							"result": [
								{
									"action": {
										"callType": "call",
										"from": "0xf89d7b9c864f589bbf53a82105107622b35eaa40",
										"gas": "0x10d88",
										"input": "0x",
										"to": "0x675ae26b90ec4a16ce0df8723c545f01f2cfe5c7",
										"value": "0x60317a81f0400"
									},
									"blockHash": "0xf9539cc20c8f5271ac12e6491c022f2e9faaaff1eca0000799e0a6e78d6050c5",
									"blockNumber": 5239581,
									"result": {
										"gasUsed": "0x0",
										"output": "0x"
									},
									"subtraces": 0,
									"traceAddress": [],
									"transactionHash": "0xd34e34e1bf1c940b7524c7180c1c8ca83fd886d736df5537214d5715365a4e29",
									"transactionPosition": 0,
									"type": "call"
								},
								{
									"action": {
										"callType": "call",
										"from": "0x893594fd296f4a7e9991aa416a37232da6e018aa",
										"gas": "0x82f02",
										"input": "0x83bd37f900015fbdf89403270a1846f5ae7d113a989f850d156600000a07e5679f99d6d...",
										"to": "0x2d8879046f1559e53eb052e949e9544bcb72f414",
										"value": "0x0"
									},
									"blockHash": "0xf9539cc20c8f5271ac12e6491c022f2e9faaaff1eca0000799e0a6e78d6050c5",
									"blockNumber": 5239581,
									"result": {
										"gasUsed": "0x56737",
										"output": "0x00000000000000000000000000000000000000000000000003888e23c0f08580"
									},
									"subtraces": 3,
									"traceAddress": [],
									"transactionHash": "0x78109d6f5d643369fbf0ff432bc0c89a150f1c96d849f06cde2fccde7cd4cb25",
									"transactionPosition": 1,
									"type": "call"
								},
								{
									"action": {
										"callType": "call",
										"from": "0x2d8879046f1559e53eb052e949e9544bcb72f414",
										"gas": "0x7fa25",
										"input": "0x23b872dd000000000000000000000000893594fd296f4a7e9991aa416a37232da6e018a...",
										"to": "0x5fbdf89403270a1846f5ae7d113a989f850d1566",
										"value": "0x0"
									},
									"blockHash": "0xf9539cc20c8f5271ac12e6491c022f2e9faaaff1eca0000799e0a6e78d6050c5",
									"blockNumber": 5239581,
									"result": {
										"gasUsed": "0x7ea7",
										"output": "0x0000000000000000000000000000000000000000000000000000000000000001"
									},
									"subtraces": 0,
									"traceAddress": [
										0
									],
									"transactionHash": "0x78109d6f5d643369fbf0ff432bc0c89a150f1c96d849f06cde2fccde7cd4cb25",
									"transactionPosition": 1,
									"type": "call"
								},
								{
									"action": {
										"callType": "call",
										"from": "0x2d8879046f1559e53eb052e949e9544bcb72f414",
										"gas": "0x76d2e",
										"input": "0xcb70e2730000000000000000000000000000000000000000000000000000000000000060...",
										"to": "0xd804ba88371a3f00ddaca03cbc2b6c47f38105fc",
										"value": "0x0"
									},
									"blockHash": "0xf9539cc20c8f5271ac12e6491c022f2e9faaaff1eca0000799e0a6e78d6050c5",
									"blockNumber": 5239581,
									"result": {
										"gasUsed": "0x49af8",
										"output": "0x"
									},
									"subtraces": 3,
									"traceAddress": [
										1
									],
									"transactionHash": "0x78109d6f5d643369fbf0ff432bc0c89a150f1c96d849f06cde2fccde7cd4cb25",
									"transactionPosition": 1,
									"type": "call"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "trace_call",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Archive"
				},
				{
					"name": "Besu"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "trace_call",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "trace_callMany",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Archive"
				},
				{
					"name": "Besu"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "trace_callMany",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "trace_filter",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "trace_filter",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "trace_get",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "trace_rawTransaction",
					"params": [],
					"jsonrpc": "2.0",
					"method": "trace_get",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "trace_rawTransaction",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "trace_rawTransaction",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "trace_replayBlockTransactions",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Archive"
				},
				{
					"name": "Besu"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "trace_replayBlockTransactions",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "trace_transaction",
			"tags": [
				{
					"name": "Bespoke"
				},
				{
					"name": "Paid plan"
				},
				{
					"name": "Beta"
				}
			],
			"summary": "Get transaction trace",
			"description": "This request returns a transaction processing trace for the specified transaction. This method can assist in improving smart contract performance by providing analysis of its internal transactions and execution steps. Use this information to identify bottlenecks and optimize the contract for better performance.",
			"params": [
				{
					"name": "transactionHash",
					"description": "A string representing the hash (32 bytes) of a transaction.",
					"required": true,
					"schema": {
						"description": "32 byte hex value.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					}
				}
			],
			"result": {
				"name": "transactionHashResponse",
				"description": "A [trace](https://docs.infura.io/api/networks/linea/json-rpc-methods/trace-methods/#trace) and subtraces; in the order called by the transaction.\n",
				"schema": {
					"type": "array"
				}
			},
			"examples": [
				{
					"name": "trace_transactionExample",
					"params": [
						{
							"name": "transactionHash",
							"value": "0x5d3faa9b9605a8fb04d989a79bfe6d3b708bdcfc66048d2fe18ed2dda4a8297c"
						}
					],
					"jsonrpc": "2.0",
					"method": "trace_transaction",
					"id": 1,
					"result": {
						"name": "trace_transactionExampleResponse",
						"value": [
							{
								"action": null,
								"callType": "call",
								"from": "0xa5ba45f484bc67fe293cf01f7d92d5ba3514dd42",
								"gas": "0x0",
								"input": "0x",
								"to": "0x45a318273749d6eb00f5f6ca3bc7cd3de26d642a",
								"value": "0x2ca186f5fda8004",
								"blockHash": "0x3f1336edc5299a68dde4e4bfc870e2d81886f8e3c0fbe88279c56ca25bf013a5",
								"blockNumber": 19724,
								"result": {
									"gasUsed": "0x0",
									"output": "0x"
								},
								"subtraces": 0,
								"traceAddress": [],
								"transactionHash": "0x5d3faa9b9605a8fb04d989a79bfe6d3b708bdcfc66048d2fe18ed2dda4a8297c",
								"transactionPosition": 3,
								"type": "call"
							}
						]
					}
				}
			]
		},
		{
			"name": "txpool_besuPendingTransactions",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "txpool_besuPendingTransactions",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "txpool_besuStatistics",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "txpool_besuStatistics",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "txpool_besuTransactions",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "txpool_besuTransactions",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		},
		{
			"name": "web3_clientVersion",
			"tags": [
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get current client version",
			"description": "This request returns the current client version, which includes details such as the client software name, version, operating system, architecture, and runtime environment. **Warning**: Not all methods are supported by the same client across Infura.\n",
			"params": [],
			"result": {
				"name": "web3_clientVersionResponse",
				"schema": {
					"description": "A string representing the current client version.",
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "web3_clientVersionExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "web3_clientVersion",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "web3_clientVersionExampleResponse",
						"value": "Geth/v1.13.15-stable-b278b28b/linux-amd64/go1.21.9"
					}
				}
			]
		},
		{
			"name": "web3_sha3",
			"tags": [
				{
					"name": "Internal"
				},
				{
					"name": "Geth"
				},
				{
					"name": "Bespoke"
				}
			],
			"summary": "Get `chainId` method standing in",
			"description": "todo determine whether to document for internal use",
			"params": [],
			"result": {
				"name": "eth_chainIdResponse",
				"schema": {
					"description": "Hexadecimal representation of the chain ID.",
					"type": "string",
					"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
					"example": "0xe728"
				}
			},
			"examples": [
				{
					"name": "eth_chainIdExample",
					"params": [],
					"jsonrpc": "2.0",
					"method": "web3_sha3",
					"id": 1,
					"result": {
						"description": "Example of a response from a Linea mainnet node.",
						"name": "eth_chainIdExampleResponse",
						"value": "0xe728"
					}
				}
			]
		}
	],
	"components": {
		"schemas": {
			"JsonRpc": {
				"value": "2.0",
				"description": "The JSON-RPC protocol version."
			},
			"Id": {
				"description": "Your identifier for the request, echoed back in the response.",
				"example": 1
			},
			"Method": {
				"description": "Identifier for the RPC request, pass method name.",
				"type": "string"
			},
			"address": {
				"description": "Hex-encoded address.",
				"type": "string",
				"pattern": "^0x[0-9a-fA-F]{40}$"
			},
			"addresses": {
				"description": "Hex-encoded address.",
				"type": "array",
				"items": {
					"description": "Hex-encoded address.",
					"type": "string",
					"pattern": "^0x[0-9a-fA-F]{40}$"
				}
			},
			"byte": {
				"description": "Hex-encoded byte.",
				"type": "string",
				"pattern": "^0x([0-9a-fA-F]?){1,2}$"
			},
			"bytes": {
				"description": "Hex-encoded bytes.",
				"type": "string",
				"pattern": "^0x[0-9a-f]*$"
			},
			"bytesMax32": {
				"description": "32 Hex-encoded bytes.",
				"type": "string",
				"pattern": "^0x[0-9a-f]{0,64}$"
			},
			"bytes8": {
				"description": "8 Hex-encoded bytes.",
				"type": "string",
				"pattern": "^0x[0-9a-f]{16}$"
			},
			"bytes32": {
				"description": "32 Hex-encoded bytes.",
				"type": "string",
				"pattern": "^0x[0-9a-f]{64}$"
			},
			"bytes48": {
				"description": "48 Hex-encoded bytes.",
				"type": "string",
				"pattern": "^0x[0-9a-f]{96}$"
			},
			"bytes96": {
				"description": "96 Hex-encoded bytes.",
				"type": "string",
				"pattern": "^0x[0-9a-f]{192}$"
			},
			"bytes256": {
				"description": "256 Hex-encoded bytes.",
				"type": "string",
				"pattern": "^0x[0-9a-f]{512}$"
			},
			"bytes65": {
				"description": "65 Hex-encoded bytes.",
				"type": "string",
				"pattern": "^0x[0-9a-f]{130}$"
			},
			"hash32": {
				"description": "32 byte hex value.",
				"type": "string",
				"pattern": "^0x[0-9a-f]{64}$"
			},
			"notFound": {
				"description": "Not Found (null).",
				"type": "null"
			},
			"ratio": {
				"description": "Normalized ratio.",
				"type": "number",
				"minimum": 0,
				"maximum": 1
			},
			"uint": {
				"description": "Hex-encoded unsigned integer.",
				"type": "string",
				"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
				"example": "0x1"
			},
			"uint64": {
				"description": "Hex-encoded 64 bit unsigned integer.",
				"type": "string",
				"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
			},
			"uint256": {
				"description": "Hex-encoded 256 bit unsigned integer.",
				"type": "string",
				"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
			},
			"BadBlock": {
				"description": "Bad block.",
				"type": "object",
				"required": [
					"block",
					"hash",
					"rlp"
				],
				"additionalProperties": false,
				"properties": {
					"block": {
						"description": "Block object.",
						"type": "object",
						"required": [
							"hash",
							"parentHash",
							"sha3Uncles",
							"miner",
							"stateRoot",
							"transactionsRoot",
							"receiptsRoot",
							"logsBloom",
							"number",
							"gasLimit",
							"gasUsed",
							"timestamp",
							"extraData",
							"mixHash",
							"nonce",
							"size",
							"transactions",
							"uncles"
						],
						"additionalProperties": false,
						"properties": {
							"hash": {
								"description": "Block hash, 32 byte hex identifier for the block derived from the block header.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							},
							"parentHash": {
								"description": "32 byte hex value of the hash of the parent block.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							},
							"sha3Uncles": {
								"description": "SHA3 of the uncle's data in the block.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							},
							"miner": {
								"description": "Not relevant to Proof of Stake. Applied to Proof of Work. Address to pay mining rewards to the coinbase transaction that rewarded the miner for their work.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$"
							},
							"stateRoot": {
								"description": "Root of the final state trie for the block as 32 byte hex value.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							},
							"transactionsRoot": {
								"description": "Root of the transaction trie for the block.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							},
							"receiptsRoot": {
								"description": "Root of the receipts trie for the block.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							},
							"logsBloom": {
								"description": "Bloom filter for the block logs; `null` when block is pending.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{512}$"
							},
							"difficulty": {
								"description": "Not relevant to Proof of Stake. Difficulty for this block.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"number": {
								"description": "Block number as hex-encoded unsigned integer.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"gasLimit": {
								"description": "Maximum gas allowed in this block.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"gasUsed": {
								"description": "Total gas used by all transactions in this block.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"timestamp": {
								"description": "Unix timestamp (milliseconds) for block assembly.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"extraData": {
								"description": "Extra data field for this block.",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							},
							"mixHash": {
								"description": "Not relevant to Proof of Stake. Hash used in the Proof of Work process.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							},
							"nonce": {
								"description": "Proof of Work nonce; not relevant to Proof of Stake. Hash of the generated Proof of Work.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{16}$"
							},
							"totalDifficulty": {
								"description": "Not relevant to Proof of Stake. Total difficulty of the chain until this block. This value will always be `0` for an uncle block.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"baseFeePerGas": {
								"description": "The block's base fee per gas; empty for blocks created before [EIP-1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md).",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"withdrawalsRoot": {
								"description": "Root of the trie containing withdrawal receipts in the block.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							},
							"blobGasUsed": {
								"description": "Total blob gas used in the block. Relevant to data availability and EIP-4844 (blob transactions).",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"excessBlobGas": {
								"description": "Excess blob gas that's carried over to the next block. Relevant for managing the blob gas market introduced in EIP-4844.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"parentBeaconBlockRoot": {
								"description": "Root of the parent Beacon Chain block. This ties the execution layer to the consensus layer in Proof of Stake.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							},
							"size": {
								"description": "Array of transaction objects, or 32 byte transaction hashes depending on the specified parameter.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"transactions": {
								"anyOf": [
									{
										"title": "Transaction hashes",
										"type": "array",
										"items": {
											"description": "32 byte hex value.",
											"type": "string",
											"pattern": "^0x[0-9a-f]{64}$"
										}
									},
									{
										"title": "Full transactions",
										"type": "array",
										"items": {
											"type": "object",
											"description": "Transaction information.",
											"allOf": [
												{
													"title": "Contextual information",
													"required": [
														"blockHash",
														"blockNumber",
														"from",
														"hash",
														"transactionIndex"
													],
													"unevaluatedProperties": false,
													"properties": {
														"blockHash": {
															"description": "Block hash, 32 byte hex identifier for the block derived from the block header.",
															"type": "string",
															"pattern": "^0x[0-9a-f]{64}$"
														},
														"blockNumber": {
															"description": "Block number.",
															"type": "string",
															"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
															"example": "0x1"
														},
														"from": {
															"description": "Sender's address.",
															"type": "string",
															"pattern": "^0x[0-9a-fA-F]{40}$"
														},
														"hash": {
															"description": "32 byte hex identifier for the transaction hash.",
															"type": "string",
															"pattern": "^0x[0-9a-f]{64}$"
														},
														"transactionIndex": {
															"description": "Transaction index.",
															"type": "string",
															"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
															"example": "0x1"
														}
													}
												},
												{
													"oneOf": [
														{
															"description": "Signed 4844 Transaction.",
															"type": "object",
															"allOf": [
																{
																	"type": "object",
																	"description": "EIP-4844 transaction.",
																	"required": [
																		"type",
																		"nonce",
																		"to",
																		"gas",
																		"value",
																		"input",
																		"maxPriorityFeePerGas",
																		"maxFeePerGas",
																		"maxFeePerBlobGas",
																		"accessList",
																		"blobVersionedHashes",
																		"chainId"
																	],
																	"properties": {
																		"type": {
																			"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																			"type": "string",
																			"enum": [
																				0,
																				1,
																				2,
																				3
																			]
																		},
																		"nonce": {
																			"description": "A counter for the number of transactions sent from the account; used for replay protection.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"to": {
																			"description": "The recipient's address.",
																			"type": "string",
																			"pattern": "^0x[0-9a-fA-F]{40}$"
																		},
																		"gas": {
																			"description": "Gas provided by the sender.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"value": {
																			"description": "Value to transfer in wei.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"input": {
																			"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																			"type": "string",
																			"pattern": "^0x[0-9a-f]*$"
																		},
																		"maxPriorityFeePerGas": {
																			"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"maxFeePerGas": {
																			"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"maxFeePerBlobGas": {
																			"description": "The maximum total fee per gas the sender is willing to pay for blob gas in wei.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"accessList": {
																			"description": "EIP-2930 access list.",
																			"type": "array",
																			"items": {
																				"description": "Access list entry.",
																				"type": "object",
																				"additionalProperties": false,
																				"properties": {
																					"address": {
																						"description": "Hex-encoded address.",
																						"type": "string",
																						"pattern": "^0x[0-9a-fA-F]{40}$"
																					},
																					"storageKeys": {
																						"type": "array",
																						"items": {
																							"description": "32 byte hex value.",
																							"type": "string",
																							"pattern": "^0x[0-9a-f]{64}$"
																						}
																					}
																				}
																			}
																		},
																		"blobVersionedHashes": {
																			"description": "List of versioned blob hashes associated with the transaction's EIP-4844 data blobs.",
																			"type": "array",
																			"items": {
																				"description": "32 byte hex value.",
																				"type": "string",
																				"pattern": "^0x[0-9a-f]{64}$"
																			}
																		},
																		"chainId": {
																			"description": "Chain ID that this transaction is valid on.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		}
																	},
																	"title": "Unsigned 4844 transaction"
																},
																{
																	"title": "EIP-4844 transaction signature properties",
																	"required": [
																		"yParity",
																		"r",
																		"s"
																	],
																	"properties": {
																		"yParity": {
																			"description": "The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"r": {
																			"description": "R.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"s": {
																			"description": "S.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		}
																	}
																}
															]
														},
														{
															"description": "Signed 1559 Transaction.",
															"type": "object",
															"allOf": [
																{
																	"type": "object",
																	"description": "EIP-1559 transaction.",
																	"required": [
																		"type",
																		"nonce",
																		"gas",
																		"value",
																		"input",
																		"maxFeePerGas",
																		"maxPriorityFeePerGas",
																		"gasPrice",
																		"chainId",
																		"accessList"
																	],
																	"properties": {
																		"type": {
																			"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																			"type": "string",
																			"enum": [
																				0,
																				1,
																				2,
																				3
																			]
																		},
																		"nonce": {
																			"description": "A counter for the number of transactions sent from the account; used for replay protection..",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"to": {
																			"description": "The recipient's address. `null` when it's a contract creation transaction.",
																			"oneOf": [
																				{
																					"title": "Contract creation",
																					"type": "null"
																				},
																				{
																					"description": "Hex-encoded address.",
																					"type": "string",
																					"pattern": "^0x[0-9a-fA-F]{40}$",
																					"title": "Address"
																				}
																			]
																		},
																		"gas": {
																			"description": "Gas limit.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"value": {
																			"description": "Value.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"input": {
																			"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																			"type": "string",
																			"pattern": "^0x[0-9a-f]*$"
																		},
																		"maxPriorityFeePerGas": {
																			"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"maxFeePerGas": {
																			"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.\n",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"gasPrice": {
																			"description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using `effectiveGasPrice` in the receipt object going forward.\n",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"accessList": {
																			"description": "EIP-2930 access list.",
																			"type": "array",
																			"items": {
																				"description": "Access list entry.",
																				"type": "object",
																				"additionalProperties": false,
																				"properties": {
																					"address": {
																						"description": "Hex-encoded address.",
																						"type": "string",
																						"pattern": "^0x[0-9a-fA-F]{40}$"
																					},
																					"storageKeys": {
																						"type": "array",
																						"items": {
																							"description": "32 byte hex value.",
																							"type": "string",
																							"pattern": "^0x[0-9a-f]{64}$"
																						}
																					}
																				}
																			}
																		},
																		"chainId": {
																			"description": "Chain ID that this transaction is valid on.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		}
																	},
																	"title": "Unsigned 1559 Transaction"
																},
																{
																	"title": "EIP-1559 transaction signature properties",
																	"required": [
																		"yParity",
																		"r",
																		"s"
																	],
																	"properties": {
																		"yParity": {
																			"description": ". The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"v": {
																			"description": "ECDSA Recovery ID. For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"r": {
																			"description": "ECDSA signature r.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"s": {
																			"description": "ECDSA signature s.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		}
																	}
																}
															]
														},
														{
															"description": "Signed 2930 Transaction.",
															"type": "object",
															"allOf": [
																{
																	"type": "object",
																	"description": "EIP-2930 transaction.",
																	"required": [
																		"type",
																		"nonce",
																		"gas",
																		"value",
																		"input",
																		"gasPrice",
																		"chainId",
																		"accessList"
																	],
																	"properties": {
																		"type": {
																			"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																			"type": "string",
																			"enum": [
																				0,
																				1,
																				2,
																				3
																			]
																		},
																		"nonce": {
																			"description": "A counter for the number of transactions sent from the account; used for replay protection.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"to": {
																			"description": "The recipient's address. `null` when it's a contract creation transaction.",
																			"oneOf": [
																				{
																					"title": "Contract creation",
																					"type": "null"
																				},
																				{
																					"description": "Hex-encoded address.",
																					"type": "string",
																					"pattern": "^0x[0-9a-fA-F]{40}$",
																					"title": "Address"
																				}
																			]
																		},
																		"gas": {
																			"description": "Gas limit.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"value": {
																			"description": "Value.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"input": {
																			"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																			"type": "string",
																			"pattern": "^0x[0-9a-f]*$"
																		},
																		"gasPrice": {
																			"description": "The gas price the sender is willing to be paid in wei.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"accessList": {
																			"description": "EIP-2930 access list.",
																			"type": "array",
																			"items": {
																				"description": "Access list entry.",
																				"type": "object",
																				"additionalProperties": false,
																				"properties": {
																					"address": {
																						"description": "Hex-encoded address.",
																						"type": "string",
																						"pattern": "^0x[0-9a-fA-F]{40}$"
																					},
																					"storageKeys": {
																						"type": "array",
																						"items": {
																							"description": "32 byte hex value.",
																							"type": "string",
																							"pattern": "^0x[0-9a-f]{64}$"
																						}
																					}
																				}
																			}
																		},
																		"chainId": {
																			"description": "Chain ID that this transaction is valid on.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		}
																	},
																	"title": "Unsigned 2930 transaction"
																},
																{
																	"title": "EIP-2930 transaction signature properties",
																	"required": [
																		"yParity",
																		"r",
																		"s"
																	],
																	"properties": {
																		"yParity": {
																			"description": "The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"v": {
																			"description": "ECDSA Recovery ID. For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"r": {
																			"description": "ECDSA signature r.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"s": {
																			"description": "ECDSA signature s.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		}
																	}
																}
															]
														},
														{
															"description": "Signed Legacy Transaction.",
															"type": "object",
															"allOf": [
																{
																	"type": "object",
																	"description": "Legacy transaction.",
																	"required": [
																		"type",
																		"nonce",
																		"gas",
																		"value",
																		"input",
																		"gasPrice"
																	],
																	"properties": {
																		"type": {
																			"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																			"type": "string",
																			"enum": [
																				0,
																				1,
																				2,
																				3
																			]
																		},
																		"nonce": {
																			"description": "A counter for the number of transactions sent from the account; used for replay protection.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"to": {
																			"description": "The recipient's address. `null` when it's a contract creation transaction.",
																			"oneOf": [
																				{
																					"title": "Contract creation",
																					"type": "null"
																				},
																				{
																					"description": "Hex-encoded address.",
																					"type": "string",
																					"pattern": "^0x[0-9a-fA-F]{40}$",
																					"title": "Address"
																				}
																			]
																		},
																		"gas": {
																			"description": "Gas limit.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"value": {
																			"description": "Value.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"input": {
																			"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																			"type": "string",
																			"pattern": "^0x[0-9a-f]*$"
																		},
																		"gasPrice": {
																			"description": "The gas price the sender is willing to pay in wei.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"chainId": {
																			"description": "Chain ID that this transaction is valid on.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		}
																	},
																	"title": "Unsigned Legacy transaction"
																},
																{
																	"title": "Legacy transaction signature properties",
																	"required": [
																		"v",
																		"r",
																		"s"
																	],
																	"properties": {
																		"v": {
																			"description": "ECDSA Recovery ID.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"r": {
																			"description": "ECDSA signature r.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		},
																		"s": {
																			"description": "ECDSA signature s.",
																			"type": "string",
																			"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																			"example": "0x1"
																		}
																	}
																}
															]
														}
													],
													"title": "Signed transaction"
												}
											]
										}
									}
								]
							},
							"withdrawals": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "Validator withdrawal.",
									"required": [
										"index",
										"validatorIndex",
										"address",
										"amount"
									],
									"additionalProperties": false,
									"properties": {
										"index": {
											"description": "Index of withdrawal.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
										},
										"validatorIndex": {
											"description": "Index of validator that generated withdrawal.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
										},
										"address": {
											"description": "Recipient address for withdrawal value.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										},
										"amount": {
											"description": "Value contained in withdrawal.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
										}
									}
								}
							},
							"uncles": {
								"description": "Array of uncle hashes.",
								"type": "array",
								"items": {
									"description": "32 byte hex value.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								}
							}
						}
					},
					"hash": {
						"description": "32 byte hex value.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"rlp": {
						"description": "RLP (Recursive Length Prefix); method used to serialize blocks, transactions, and other data in a compact, hex- and byte-encoded format.",
						"type": "string",
						"pattern": "^0x[0-9a-f]*$"
					}
				}
			},
			"Block": {
				"description": "Block object.",
				"type": "object",
				"required": [
					"hash",
					"parentHash",
					"sha3Uncles",
					"miner",
					"stateRoot",
					"transactionsRoot",
					"receiptsRoot",
					"logsBloom",
					"number",
					"gasLimit",
					"gasUsed",
					"timestamp",
					"extraData",
					"mixHash",
					"nonce",
					"size",
					"transactions",
					"uncles"
				],
				"additionalProperties": false,
				"properties": {
					"hash": {
						"description": "Block hash, 32 byte hex identifier for the block derived from the block header.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"parentHash": {
						"description": "32 byte hex value of the hash of the parent block.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"sha3Uncles": {
						"description": "SHA3 of the uncle's data in the block.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"miner": {
						"description": "Not relevant to Proof of Stake. Applied to Proof of Work. Address to pay mining rewards to the coinbase transaction that rewarded the miner for their work.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					},
					"stateRoot": {
						"description": "Root of the final state trie for the block as 32 byte hex value.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"transactionsRoot": {
						"description": "Root of the transaction trie for the block.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"receiptsRoot": {
						"description": "Root of the receipts trie for the block.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"logsBloom": {
						"description": "Bloom filter for the block logs; `null` when block is pending.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{512}$"
					},
					"difficulty": {
						"description": "Not relevant to Proof of Stake. Difficulty for this block.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"number": {
						"description": "Block number as hex-encoded unsigned integer.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"gasLimit": {
						"description": "Maximum gas allowed in this block.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"gasUsed": {
						"description": "Total gas used by all transactions in this block.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"timestamp": {
						"description": "Unix timestamp (milliseconds) for block assembly.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"extraData": {
						"description": "Extra data field for this block.",
						"type": "string",
						"pattern": "^0x[0-9a-f]*$"
					},
					"mixHash": {
						"description": "Not relevant to Proof of Stake. Hash used in the Proof of Work process.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"nonce": {
						"description": "Proof of Work nonce; not relevant to Proof of Stake. Hash of the generated Proof of Work.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{16}$"
					},
					"totalDifficulty": {
						"description": "Not relevant to Proof of Stake. Total difficulty of the chain until this block. This value will always be `0` for an uncle block.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"baseFeePerGas": {
						"description": "The block's base fee per gas; empty for blocks created before [EIP-1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md).",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"withdrawalsRoot": {
						"description": "Root of the trie containing withdrawal receipts in the block.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"blobGasUsed": {
						"description": "Total blob gas used in the block. Relevant to data availability and EIP-4844 (blob transactions).",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"excessBlobGas": {
						"description": "Excess blob gas that's carried over to the next block. Relevant for managing the blob gas market introduced in EIP-4844.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"parentBeaconBlockRoot": {
						"description": "Root of the parent Beacon Chain block. This ties the execution layer to the consensus layer in Proof of Stake.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"size": {
						"description": "Array of transaction objects, or 32 byte transaction hashes depending on the specified parameter.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"transactions": {
						"anyOf": [
							{
								"title": "Transaction hashes",
								"type": "array",
								"items": {
									"description": "32 byte hex value.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								}
							},
							{
								"title": "Full transactions",
								"type": "array",
								"items": {
									"type": "object",
									"description": "Transaction information.",
									"allOf": [
										{
											"title": "Contextual information",
											"required": [
												"blockHash",
												"blockNumber",
												"from",
												"hash",
												"transactionIndex"
											],
											"unevaluatedProperties": false,
											"properties": {
												"blockHash": {
													"description": "Block hash, 32 byte hex identifier for the block derived from the block header.",
													"type": "string",
													"pattern": "^0x[0-9a-f]{64}$"
												},
												"blockNumber": {
													"description": "Block number.",
													"type": "string",
													"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
													"example": "0x1"
												},
												"from": {
													"description": "Sender's address.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$"
												},
												"hash": {
													"description": "32 byte hex identifier for the transaction hash.",
													"type": "string",
													"pattern": "^0x[0-9a-f]{64}$"
												},
												"transactionIndex": {
													"description": "Transaction index.",
													"type": "string",
													"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
													"example": "0x1"
												}
											}
										},
										{
											"oneOf": [
												{
													"description": "Signed 4844 Transaction.",
													"type": "object",
													"allOf": [
														{
															"type": "object",
															"description": "EIP-4844 transaction.",
															"required": [
																"type",
																"nonce",
																"to",
																"gas",
																"value",
																"input",
																"maxPriorityFeePerGas",
																"maxFeePerGas",
																"maxFeePerBlobGas",
																"accessList",
																"blobVersionedHashes",
																"chainId"
															],
															"properties": {
																"type": {
																	"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																	"type": "string",
																	"enum": [
																		0,
																		1,
																		2,
																		3
																	]
																},
																"nonce": {
																	"description": "A counter for the number of transactions sent from the account; used for replay protection.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"to": {
																	"description": "The recipient's address.",
																	"type": "string",
																	"pattern": "^0x[0-9a-fA-F]{40}$"
																},
																"gas": {
																	"description": "Gas provided by the sender.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"value": {
																	"description": "Value to transfer in wei.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"input": {
																	"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																	"type": "string",
																	"pattern": "^0x[0-9a-f]*$"
																},
																"maxPriorityFeePerGas": {
																	"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"maxFeePerGas": {
																	"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"maxFeePerBlobGas": {
																	"description": "The maximum total fee per gas the sender is willing to pay for blob gas in wei.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"accessList": {
																	"description": "EIP-2930 access list.",
																	"type": "array",
																	"items": {
																		"description": "Access list entry.",
																		"type": "object",
																		"additionalProperties": false,
																		"properties": {
																			"address": {
																				"description": "Hex-encoded address.",
																				"type": "string",
																				"pattern": "^0x[0-9a-fA-F]{40}$"
																			},
																			"storageKeys": {
																				"type": "array",
																				"items": {
																					"description": "32 byte hex value.",
																					"type": "string",
																					"pattern": "^0x[0-9a-f]{64}$"
																				}
																			}
																		}
																	}
																},
																"blobVersionedHashes": {
																	"description": "List of versioned blob hashes associated with the transaction's EIP-4844 data blobs.",
																	"type": "array",
																	"items": {
																		"description": "32 byte hex value.",
																		"type": "string",
																		"pattern": "^0x[0-9a-f]{64}$"
																	}
																},
																"chainId": {
																	"description": "Chain ID that this transaction is valid on.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															},
															"title": "Unsigned 4844 transaction"
														},
														{
															"title": "EIP-4844 transaction signature properties",
															"required": [
																"yParity",
																"r",
																"s"
															],
															"properties": {
																"yParity": {
																	"description": "The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"r": {
																	"description": "R.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"s": {
																	"description": "S.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															}
														}
													]
												},
												{
													"description": "Signed 1559 Transaction.",
													"type": "object",
													"allOf": [
														{
															"type": "object",
															"description": "EIP-1559 transaction.",
															"required": [
																"type",
																"nonce",
																"gas",
																"value",
																"input",
																"maxFeePerGas",
																"maxPriorityFeePerGas",
																"gasPrice",
																"chainId",
																"accessList"
															],
															"properties": {
																"type": {
																	"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																	"type": "string",
																	"enum": [
																		0,
																		1,
																		2,
																		3
																	]
																},
																"nonce": {
																	"description": "A counter for the number of transactions sent from the account; used for replay protection..",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"to": {
																	"description": "The recipient's address. `null` when it's a contract creation transaction.",
																	"oneOf": [
																		{
																			"title": "Contract creation",
																			"type": "null"
																		},
																		{
																			"description": "Hex-encoded address.",
																			"type": "string",
																			"pattern": "^0x[0-9a-fA-F]{40}$",
																			"title": "Address"
																		}
																	]
																},
																"gas": {
																	"description": "Gas limit.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"value": {
																	"description": "Value.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"input": {
																	"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																	"type": "string",
																	"pattern": "^0x[0-9a-f]*$"
																},
																"maxPriorityFeePerGas": {
																	"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"maxFeePerGas": {
																	"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.\n",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"gasPrice": {
																	"description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using `effectiveGasPrice` in the receipt object going forward.\n",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"accessList": {
																	"description": "EIP-2930 access list.",
																	"type": "array",
																	"items": {
																		"description": "Access list entry.",
																		"type": "object",
																		"additionalProperties": false,
																		"properties": {
																			"address": {
																				"description": "Hex-encoded address.",
																				"type": "string",
																				"pattern": "^0x[0-9a-fA-F]{40}$"
																			},
																			"storageKeys": {
																				"type": "array",
																				"items": {
																					"description": "32 byte hex value.",
																					"type": "string",
																					"pattern": "^0x[0-9a-f]{64}$"
																				}
																			}
																		}
																	}
																},
																"chainId": {
																	"description": "Chain ID that this transaction is valid on.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															},
															"title": "Unsigned 1559 Transaction"
														},
														{
															"title": "EIP-1559 transaction signature properties",
															"required": [
																"yParity",
																"r",
																"s"
															],
															"properties": {
																"yParity": {
																	"description": ". The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"v": {
																	"description": "ECDSA Recovery ID. For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"r": {
																	"description": "ECDSA signature r.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"s": {
																	"description": "ECDSA signature s.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															}
														}
													]
												},
												{
													"description": "Signed 2930 Transaction.",
													"type": "object",
													"allOf": [
														{
															"type": "object",
															"description": "EIP-2930 transaction.",
															"required": [
																"type",
																"nonce",
																"gas",
																"value",
																"input",
																"gasPrice",
																"chainId",
																"accessList"
															],
															"properties": {
																"type": {
																	"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																	"type": "string",
																	"enum": [
																		0,
																		1,
																		2,
																		3
																	]
																},
																"nonce": {
																	"description": "A counter for the number of transactions sent from the account; used for replay protection.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"to": {
																	"description": "The recipient's address. `null` when it's a contract creation transaction.",
																	"oneOf": [
																		{
																			"title": "Contract creation",
																			"type": "null"
																		},
																		{
																			"description": "Hex-encoded address.",
																			"type": "string",
																			"pattern": "^0x[0-9a-fA-F]{40}$",
																			"title": "Address"
																		}
																	]
																},
																"gas": {
																	"description": "Gas limit.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"value": {
																	"description": "Value.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"input": {
																	"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																	"type": "string",
																	"pattern": "^0x[0-9a-f]*$"
																},
																"gasPrice": {
																	"description": "The gas price the sender is willing to be paid in wei.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"accessList": {
																	"description": "EIP-2930 access list.",
																	"type": "array",
																	"items": {
																		"description": "Access list entry.",
																		"type": "object",
																		"additionalProperties": false,
																		"properties": {
																			"address": {
																				"description": "Hex-encoded address.",
																				"type": "string",
																				"pattern": "^0x[0-9a-fA-F]{40}$"
																			},
																			"storageKeys": {
																				"type": "array",
																				"items": {
																					"description": "32 byte hex value.",
																					"type": "string",
																					"pattern": "^0x[0-9a-f]{64}$"
																				}
																			}
																		}
																	}
																},
																"chainId": {
																	"description": "Chain ID that this transaction is valid on.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															},
															"title": "Unsigned 2930 transaction"
														},
														{
															"title": "EIP-2930 transaction signature properties",
															"required": [
																"yParity",
																"r",
																"s"
															],
															"properties": {
																"yParity": {
																	"description": "The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"v": {
																	"description": "ECDSA Recovery ID. For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"r": {
																	"description": "ECDSA signature r.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"s": {
																	"description": "ECDSA signature s.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															}
														}
													]
												},
												{
													"description": "Signed Legacy Transaction.",
													"type": "object",
													"allOf": [
														{
															"type": "object",
															"description": "Legacy transaction.",
															"required": [
																"type",
																"nonce",
																"gas",
																"value",
																"input",
																"gasPrice"
															],
															"properties": {
																"type": {
																	"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																	"type": "string",
																	"enum": [
																		0,
																		1,
																		2,
																		3
																	]
																},
																"nonce": {
																	"description": "A counter for the number of transactions sent from the account; used for replay protection.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"to": {
																	"description": "The recipient's address. `null` when it's a contract creation transaction.",
																	"oneOf": [
																		{
																			"title": "Contract creation",
																			"type": "null"
																		},
																		{
																			"description": "Hex-encoded address.",
																			"type": "string",
																			"pattern": "^0x[0-9a-fA-F]{40}$",
																			"title": "Address"
																		}
																	]
																},
																"gas": {
																	"description": "Gas limit.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"value": {
																	"description": "Value.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"input": {
																	"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																	"type": "string",
																	"pattern": "^0x[0-9a-f]*$"
																},
																"gasPrice": {
																	"description": "The gas price the sender is willing to pay in wei.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"chainId": {
																	"description": "Chain ID that this transaction is valid on.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															},
															"title": "Unsigned Legacy transaction"
														},
														{
															"title": "Legacy transaction signature properties",
															"required": [
																"v",
																"r",
																"s"
															],
															"properties": {
																"v": {
																	"description": "ECDSA Recovery ID.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"r": {
																	"description": "ECDSA signature r.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"s": {
																	"description": "ECDSA signature s.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															}
														}
													]
												}
											],
											"title": "Signed transaction"
										}
									]
								}
							}
						]
					},
					"withdrawals": {
						"type": "array",
						"items": {
							"type": "object",
							"description": "Validator withdrawal.",
							"required": [
								"index",
								"validatorIndex",
								"address",
								"amount"
							],
							"additionalProperties": false,
							"properties": {
								"index": {
									"description": "Index of withdrawal.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
								},
								"validatorIndex": {
									"description": "Index of validator that generated withdrawal.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
								},
								"address": {
									"description": "Recipient address for withdrawal value.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"amount": {
									"description": "Value contained in withdrawal.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
								}
							}
						}
					},
					"uncles": {
						"description": "Array of uncle hashes.",
						"type": "array",
						"items": {
							"description": "32 byte hex value.",
							"type": "string",
							"pattern": "^0x[0-9a-f]{64}$"
						}
					}
				}
			},
			"BlockNumberOrTag": {
				"description": "Block number or tag.",
				"oneOf": [
					{
						"description": "Block number as hex-encoded unsigned integer.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1",
						"title": "Block number"
					},
					{
						"type": "string",
						"enum": [
							"earliest",
							"finalized",
							"safe",
							"latest",
							"pending"
						],
						"description": "Block tag.",
						"title": "Block tag"
					}
				]
			},
			"BlockNumberOrTagOrHash": {
				"description": "Block number, tag, or block hash.",
				"anyOf": [
					{
						"description": "Block number as hex-encoded unsigned integer.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					{
						"type": "string",
						"enum": [
							"earliest",
							"finalized",
							"safe",
							"latest",
							"pending"
						],
						"description": "Block tag."
					},
					{
						"description": "Block hash.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					}
				]
			},
			"BlockTag": {
				"type": "string",
				"enum": [
					"earliest",
					"finalized",
					"safe",
					"latest",
					"pending"
				],
				"description": "Descriptor of block by status. See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block).\n  - `earliest`: The lowest numbered block the client has available.\n  - `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n  - `safe`: The most recent block that's safe from re-orgs under honest majority and certain synchronicity assumptions. \n  - `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the\n  canonical chain even under healthy/normal conditions. \n  - `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n"
			},
			"SyncingStatus": {
				"oneOf": [
					{
						"title": "Syncing",
						"description": "Syncing progress.",
						"type": "object",
						"additionalProperties": false,
						"properties": {
							"startingBlock": {
								"description": "A hexadecimal equivalent of the integer indicating the block at which the import started (will only be reset after the sync reaches the head).",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"currentBlock": {
								"description": "Block number as hex-encoded unsigned integer indicating the current block syncing data, same as `eth_blockNumber`.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"highestBlock": {
								"description": "Block number as hex-encoded unsigned integer indicating the highest block syncing data.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						}
					},
					{
						"title": "Not syncing",
						"description": "Should always return false if not syncing.",
						"type": "boolean",
						"example": true
					}
				]
			},
			"FilterResults": {
				"oneOf": [
					{
						"title": "New block or transaction hashes",
						"type": "array",
						"items": {
							"description": "32 byte hex value.",
							"type": "string",
							"pattern": "^0x[0-9a-f]{64}$"
						}
					},
					{
						"title": "New logs",
						"type": "array",
						"items": {
							"type": "object",
							"required": [
								"transactionHash"
							],
							"additionalProperties": false,
							"properties": {
								"removed": {
									"type": "boolean"
								},
								"logIndex": {
									"description": "Hex-encoded unsigned integer.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"transactionIndex": {
									"description": "A hexadecimal of the integer representing the position in the block.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"transactionHash": {
									"description": "The transaction hash in which the call was made.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"blockHash": {
									"description": "Block hash; 32 byte hex identifier for the block derived from the block header.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"blockNumber": {
									"description": "Block number as hex-encoded unsigned integer.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"address": {
									"description": "Hex-encoded address.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"data": {
									"description": "Hex-encoded bytes.",
									"type": "string",
									"pattern": "^0x[0-9a-f]*$"
								},
								"topics": {
									"type": "array",
									"items": {
										"description": "32 Hex-encoded bytes.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									}
								}
							}
						}
					}
				]
			},
			"Filter": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"fromBlock": {
						"description": "From block.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"toBlock": {
						"description": "To block.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"address": {
						"oneOf": [
							{
								"anyAddress": null,
								"title": "Any address",
								"type": "null"
							},
							{
								"description": "Hex-encoded address.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$",
								"address": null,
								"title": "Single address"
							},
							{
								"description": "Hex-encoded address.",
								"type": "array",
								"items": {
									"description": "Hex-encoded address.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"addresses": null,
								"title": "Addresses"
							}
						]
					},
					"topics": {
						"description": "Filter topics.",
						"oneOf": [
							{
								"title": "Any topic match",
								"type": "null"
							},
							{
								"title": "Specified filter topics",
								"type": "array",
								"items": {
									"description": "Filter topic list entry.",
									"oneOf": [
										{
											"description": "32 Hex-encoded bytes.",
											"type": "string",
											"pattern": "^0x[0-9a-f]{64}$",
											"title": "Single topic match"
										},
										{
											"title": "Multiple topic match",
											"type": "array",
											"items": {
												"description": "32 Hex-encoded bytes.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											}
										}
									]
								}
							}
						]
					}
				}
			},
			"FilterTopics": {
				"description": "Filter topics.",
				"oneOf": [
					{
						"title": "Any topic match",
						"type": "null"
					},
					{
						"title": "Specified filter topics",
						"type": "array",
						"items": {
							"description": "Filter topic list entry.",
							"oneOf": [
								{
									"description": "32 Hex-encoded bytes.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$",
									"title": "Single topic match"
								},
								{
									"title": "Multiple topic match",
									"type": "array",
									"items": {
										"description": "32 Hex-encoded bytes.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									}
								}
							]
						}
					}
				]
			},
			"FilterTopic": {
				"description": "Filter topic list entry.",
				"oneOf": [
					{
						"description": "32 Hex-encoded bytes.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$",
						"title": "Single topic match"
					},
					{
						"title": "Multiple topic match",
						"type": "array",
						"items": {
							"description": "32 Hex-encoded bytes.",
							"type": "string",
							"pattern": "^0x[0-9a-f]{64}$"
						}
					}
				]
			},
			"Log": {
				"type": "object",
				"required": [
					"transactionHash"
				],
				"additionalProperties": false,
				"properties": {
					"removed": {
						"type": "boolean"
					},
					"logIndex": {
						"description": "Hex-encoded unsigned integer.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"transactionIndex": {
						"description": "A hexadecimal of the integer representing the position in the block.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"transactionHash": {
						"description": "The transaction hash in which the call was made.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"blockHash": {
						"description": "Block hash; 32 byte hex identifier for the block derived from the block header.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"blockNumber": {
						"description": "Block number as hex-encoded unsigned integer.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"address": {
						"description": "Hex-encoded address.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					},
					"data": {
						"description": "Hex-encoded bytes.",
						"type": "string",
						"pattern": "^0x[0-9a-f]*$"
					},
					"topics": {
						"type": "array",
						"items": {
							"description": "32 Hex-encoded bytes.",
							"type": "string",
							"pattern": "^0x[0-9a-f]{64}$"
						}
					}
				}
			},
			"ReceiptInfo": {
				"type": "object",
				"required": [
					"blockHash",
					"blockNumber",
					"from",
					"cumulativeGasUsed",
					"gasUsed",
					"logs",
					"logsBloom",
					"transactionHash",
					"transactionIndex",
					"effectiveGasPrice"
				],
				"additionalProperties": false,
				"properties": {
					"type": {
						"description": "Hex-encoded byte.",
						"type": "string",
						"pattern": "^0x([0-9a-fA-F]?){1,2}$"
					},
					"transactionHash": {
						"description": "The transaction hash in which the call was made.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"transactionIndex": {
						"description": "A hexadecimal of the integer representing the position in the block.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"blockHash": {
						"description": "Block hash; 32 byte hex identifier for the block derived from the block header.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"blockNumber": {
						"description": "Block number as hex-encoded unsigned integer.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"from": {
						"description": "Address of the call initiator.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					},
					"to": {
						"description": "Address of the receiver or null in a contract creation transaction.",
						"oneOf": [
							{
								"title": "Contract Creation (null)",
								"type": "null"
							},
							{
								"description": "Hex-encoded address.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$",
								"title": "Recipient Address"
							}
						]
					},
					"cumulativeGasUsed": {
						"description": "The sum of gas used by this transaction and all preceding transactions in the same block.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"gasUsed": {
						"description": "The amount of gas used for this specific transaction alone.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"blobGasUsed": {
						"description": "The amount of blob gas used for this specific transaction. Only specified for blob transactions as defined by EIP-4844.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"contractAddress": {
						"description": "The contract address created, if the transaction was a contract creation, otherwise null.",
						"oneOf": [
							{
								"description": "Hex-encoded address.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$",
								"title": "Address"
							},
							{
								"title": "No data",
								"type": "null"
							}
						]
					},
					"logs": {
						"description": "Logs.",
						"type": "array",
						"items": {
							"type": "object",
							"required": [
								"transactionHash"
							],
							"additionalProperties": false,
							"properties": {
								"removed": {
									"type": "boolean"
								},
								"logIndex": {
									"description": "Hex-encoded unsigned integer.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"transactionIndex": {
									"description": "A hexadecimal of the integer representing the position in the block.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"transactionHash": {
									"description": "The transaction hash in which the call was made.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"blockHash": {
									"description": "Block hash; 32 byte hex identifier for the block derived from the block header.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"blockNumber": {
									"description": "Block number as hex-encoded unsigned integer.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"address": {
									"description": "Hex-encoded address.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"data": {
									"description": "Hex-encoded bytes.",
									"type": "string",
									"pattern": "^0x[0-9a-f]*$"
								},
								"topics": {
									"type": "array",
									"items": {
										"description": "32 Hex-encoded bytes.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									}
								}
							}
						}
					},
					"logsBloom": {
						"description": "Logs bloom.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{512}$"
					},
					"root": {
						"description": "The post-transaction state root. Only specified for transactions included before the Byzantium upgrade.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"status": {
						"description": "Either 1 (success) or 0 (failure). Only specified for transactions included after the Byzantium upgrade.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1",
						"enum": [
							"0x0",
							"0x1"
						]
					},
					"effectiveGasPrice": {
						"description": "The actual value per gas deducted from the sender's account. Before EIP-1559, this is equal to the transaction's gas price. After, it is equal to baseFeePerGas + min(maxFeePerGas - baseFeePerGas, maxPriorityFeePerGas).",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"blobGasPrice": {
						"description": "The actual value per gas deducted from the sender's account for blob gas. Only specified for blob transactions as defined by EIP-4844.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					}
				}
			},
			"AccountProof": {
				"type": "object",
				"required": [
					"address",
					"accountProof",
					"balanceeth_getBalance",
					"codeHash",
					"nonce",
					"storageHash",
					"storageProof"
				],
				"additionalProperties": false,
				"properties": {
					"address": {
						"description": "The account address for which the Merkle proof is retrieved. This is an echo of the address passed in the request.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					},
					"accountProof": {
						"description": "An array of RLP-serialized MerkleTree-Nodes, starting with the `stateRoot`-Node, following the path of the address as key.",
						"type": "array",
						"items": {
							"description": "Hex-encoded bytes.",
							"type": "string",
							"pattern": "^0x[0-9a-f]*$"
						}
					},
					"balance": {
						"description": "Hexadecimal of the balance in wei.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
					},
					"codeHash": {
						"description": "The 32-byte hash of the account's code. For EOAs, this will be the hash of an empty string. For contract accounts, it represents the hash of the deployed contract code.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"nonce": {
						"description": "Account nonce; counter for the number of transactions sent from the account; for replay protection.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
					},
					"storageHash": {
						"description": "32-byte SHA3 hash of the storage root. All storage will deliver a Merkle proof starting with this root hash.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"storageProof": {
						"description": "An array of requested storage-entries.",
						"type": "array",
						"items": {
							"type": "object",
							"required": [
								"key",
								"value",
								"proof"
							],
							"additionalProperties": false,
							"properties": {
								"key": {
									"description": "The requested storage key.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{0,64}$"
								},
								"value": {
									"description": "The storage value.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
								},
								"proof": {
									"type": "array",
									"description": "An array of RLP-serialized MerkleTree-Nodes, starting with the `storageHash` node and following the path of the key.",
									"items": {
										"description": "Hex-encoded bytes.",
										"type": "string",
										"pattern": "^0x[0-9a-f]*$"
									}
								}
							}
						}
					}
				}
			},
			"StorageProof": {
				"type": "object",
				"required": [
					"key",
					"value",
					"proof"
				],
				"additionalProperties": false,
				"properties": {
					"key": {
						"description": "The requested storage key.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{0,64}$"
					},
					"value": {
						"description": "The storage value.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
					},
					"proof": {
						"type": "array",
						"description": "An array of RLP-serialized MerkleTree-Nodes, starting with the `storageHash` node and following the path of the key.",
						"items": {
							"description": "Hex-encoded bytes.",
							"type": "string",
							"pattern": "^0x[0-9a-f]*$"
						}
					}
				}
			},
			"Transaction4844Unsigned": {
				"type": "object",
				"description": "EIP-4844 transaction.",
				"required": [
					"type",
					"nonce",
					"to",
					"gas",
					"value",
					"input",
					"maxPriorityFeePerGas",
					"maxFeePerGas",
					"maxFeePerBlobGas",
					"accessList",
					"blobVersionedHashes",
					"chainId"
				],
				"properties": {
					"type": {
						"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
						"type": "string",
						"enum": [
							0,
							1,
							2,
							3
						]
					},
					"nonce": {
						"description": "A counter for the number of transactions sent from the account; used for replay protection.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"to": {
						"description": "The recipient's address.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					},
					"gas": {
						"description": "Gas provided by the sender.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"value": {
						"description": "Value to transfer in wei.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"input": {
						"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
						"type": "string",
						"pattern": "^0x[0-9a-f]*$"
					},
					"maxPriorityFeePerGas": {
						"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"maxFeePerGas": {
						"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"maxFeePerBlobGas": {
						"description": "The maximum total fee per gas the sender is willing to pay for blob gas in wei.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"accessList": {
						"description": "EIP-2930 access list.",
						"type": "array",
						"items": {
							"description": "Access list entry.",
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"address": {
									"description": "Hex-encoded address.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"storageKeys": {
									"type": "array",
									"items": {
										"description": "32 byte hex value.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									}
								}
							}
						}
					},
					"blobVersionedHashes": {
						"description": "List of versioned blob hashes associated with the transaction's EIP-4844 data blobs.",
						"type": "array",
						"items": {
							"description": "32 byte hex value.",
							"type": "string",
							"pattern": "^0x[0-9a-f]{64}$"
						}
					},
					"chainId": {
						"description": "Chain ID that this transaction is valid on.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					}
				}
			},
			"AccessListEntry": {
				"description": "Access list entry.",
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"address": {
						"description": "Hex-encoded address.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					},
					"storageKeys": {
						"type": "array",
						"items": {
							"description": "32 byte hex value.",
							"type": "string",
							"pattern": "^0x[0-9a-f]{64}$"
						}
					}
				}
			},
			"AccessList": {
				"description": "Access list.",
				"type": "array",
				"items": {
					"description": "Access list entry.",
					"type": "object",
					"additionalProperties": false,
					"properties": {
						"address": {
							"description": "Hex-encoded address.",
							"type": "string",
							"pattern": "^0x[0-9a-fA-F]{40}$"
						},
						"storageKeys": {
							"type": "array",
							"items": {
								"description": "32 byte hex value.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							}
						}
					}
				}
			},
			"GenericTransaction": {
				"type": "object",
				"description": "Transaction object generic to all types.",
				"additionalProperties": false,
				"properties": {
					"type": {
						"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
						"type": "string",
						"enum": [
							0,
							1,
							2,
							3
						]
					},
					"nonce": {
						"description": "A counter for the number of transactions sent from the account; used for replay protection.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"to": {
						"description": "The recipient's address. `null` when it's a contract creation transaction.",
						"oneOf": [
							{
								"title": "Contract creation",
								"type": "null"
							},
							{
								"description": "Hex-encoded address.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$",
								"title": "Address"
							}
						]
					},
					"from": {
						"description": "Sender's address.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					},
					"gas": {
						"description": "Gas limit.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"value": {
						"description": "Value sent with this transaction encoded as hexadecimal.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"input": {
						"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
						"type": "string",
						"pattern": "^0x[0-9a-f]*$"
					},
					"gasPrice": {
						"description": "The gas price the sender is willing to pay in wei.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"maxPriorityFeePerGas": {
						"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"maxFeePerGas": {
						"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"maxFeePerBlobGas": {
						"description": "The maximum total fee per gas the sender is willing to pay for blob gas in wei.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"accessList": {
						"description": "EIP-2930 access list.",
						"type": "array",
						"items": {
							"description": "Access list entry.",
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"address": {
									"description": "Hex-encoded address.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"storageKeys": {
									"type": "array",
									"items": {
										"description": "32 byte hex value.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									}
								}
							}
						}
					},
					"blobVersionedHashes": {
						"description": "List of versioned blob hashes associated with the transaction's EIP-4844 data blobs.\n",
						"type": "array",
						"items": {
							"description": "32 byte hex value.",
							"type": "string",
							"pattern": "^0x[0-9a-f]{64}$"
						}
					},
					"blobs": {
						"description": "Raw blob data.",
						"type": "array",
						"items": {
							"description": "Hex-encoded bytes.",
							"type": "string",
							"pattern": "^0x[0-9a-f]*$"
						}
					},
					"chainId": {
						"description": "Chain ID that this transaction is valid on.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					}
				}
			},
			"Transaction1559Unsigned": {
				"type": "object",
				"description": "EIP-1559 transaction.",
				"required": [
					"type",
					"nonce",
					"gas",
					"value",
					"input",
					"maxFeePerGas",
					"maxPriorityFeePerGas",
					"gasPrice",
					"chainId",
					"accessList"
				],
				"properties": {
					"type": {
						"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
						"type": "string",
						"enum": [
							0,
							1,
							2,
							3
						]
					},
					"nonce": {
						"description": "A counter for the number of transactions sent from the account; used for replay protection..",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"to": {
						"description": "The recipient's address. `null` when it's a contract creation transaction.",
						"oneOf": [
							{
								"title": "Contract creation",
								"type": "null"
							},
							{
								"description": "Hex-encoded address.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$",
								"title": "Address"
							}
						]
					},
					"gas": {
						"description": "Gas limit.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"value": {
						"description": "Value.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"input": {
						"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
						"type": "string",
						"pattern": "^0x[0-9a-f]*$"
					},
					"maxPriorityFeePerGas": {
						"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"maxFeePerGas": {
						"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.\n",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"gasPrice": {
						"description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using `effectiveGasPrice` in the receipt object going forward.\n",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"accessList": {
						"description": "EIP-2930 access list.",
						"type": "array",
						"items": {
							"description": "Access list entry.",
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"address": {
									"description": "Hex-encoded address.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"storageKeys": {
									"type": "array",
									"items": {
										"description": "32 byte hex value.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									}
								}
							}
						}
					},
					"chainId": {
						"description": "Chain ID that this transaction is valid on.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					}
				}
			},
			"Transaction2930Unsigned": {
				"type": "object",
				"description": "EIP-2930 transaction.",
				"required": [
					"type",
					"nonce",
					"gas",
					"value",
					"input",
					"gasPrice",
					"chainId",
					"accessList"
				],
				"properties": {
					"type": {
						"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
						"type": "string",
						"enum": [
							0,
							1,
							2,
							3
						]
					},
					"nonce": {
						"description": "A counter for the number of transactions sent from the account; used for replay protection.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"to": {
						"description": "The recipient's address. `null` when it's a contract creation transaction.",
						"oneOf": [
							{
								"title": "Contract creation",
								"type": "null"
							},
							{
								"description": "Hex-encoded address.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$",
								"title": "Address"
							}
						]
					},
					"gas": {
						"description": "Gas limit.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"value": {
						"description": "Value.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"input": {
						"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
						"type": "string",
						"pattern": "^0x[0-9a-f]*$"
					},
					"gasPrice": {
						"description": "The gas price the sender is willing to be paid in wei.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"accessList": {
						"description": "EIP-2930 access list.",
						"type": "array",
						"items": {
							"description": "Access list entry.",
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"address": {
									"description": "Hex-encoded address.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"storageKeys": {
									"type": "array",
									"items": {
										"description": "32 byte hex value.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									}
								}
							}
						}
					},
					"chainId": {
						"description": "Chain ID that this transaction is valid on.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					}
				}
			},
			"TransactionLegacyUnsigned": {
				"type": "object",
				"description": "Legacy transaction.",
				"required": [
					"type",
					"nonce",
					"gas",
					"value",
					"input",
					"gasPrice"
				],
				"properties": {
					"type": {
						"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
						"type": "string",
						"enum": [
							0,
							1,
							2,
							3
						]
					},
					"nonce": {
						"description": "A counter for the number of transactions sent from the account; used for replay protection.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"to": {
						"description": "The recipient's address. `null` when it's a contract creation transaction.",
						"oneOf": [
							{
								"title": "Contract creation",
								"type": "null"
							},
							{
								"description": "Hex-encoded address.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$",
								"title": "Address"
							}
						]
					},
					"gas": {
						"description": "Gas limit.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"value": {
						"description": "Value.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"input": {
						"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
						"type": "string",
						"pattern": "^0x[0-9a-f]*$"
					},
					"gasPrice": {
						"description": "The gas price the sender is willing to pay in wei.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"chainId": {
						"description": "Chain ID that this transaction is valid on.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					}
				}
			},
			"TransactionUnsigned": {
				"oneOf": [
					{
						"type": "object",
						"description": "EIP-4844 transaction.",
						"required": [
							"type",
							"nonce",
							"to",
							"gas",
							"value",
							"input",
							"maxPriorityFeePerGas",
							"maxFeePerGas",
							"maxFeePerBlobGas",
							"accessList",
							"blobVersionedHashes",
							"chainId"
						],
						"properties": {
							"type": {
								"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
								"type": "string",
								"enum": [
									0,
									1,
									2,
									3
								]
							},
							"nonce": {
								"description": "A counter for the number of transactions sent from the account; used for replay protection.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"to": {
								"description": "The recipient's address.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$"
							},
							"gas": {
								"description": "Gas provided by the sender.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"value": {
								"description": "Value to transfer in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"input": {
								"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							},
							"maxPriorityFeePerGas": {
								"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"maxFeePerGas": {
								"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"maxFeePerBlobGas": {
								"description": "The maximum total fee per gas the sender is willing to pay for blob gas in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"accessList": {
								"description": "EIP-2930 access list.",
								"type": "array",
								"items": {
									"description": "Access list entry.",
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"address": {
											"description": "Hex-encoded address.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										},
										"storageKeys": {
											"type": "array",
											"items": {
												"description": "32 byte hex value.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											}
										}
									}
								}
							},
							"blobVersionedHashes": {
								"description": "List of versioned blob hashes associated with the transaction's EIP-4844 data blobs.",
								"type": "array",
								"items": {
									"description": "32 byte hex value.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								}
							},
							"chainId": {
								"description": "Chain ID that this transaction is valid on.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						},
						"title": "Unsigned 4844 transaction"
					},
					{
						"type": "object",
						"description": "EIP-1559 transaction.",
						"required": [
							"type",
							"nonce",
							"gas",
							"value",
							"input",
							"maxFeePerGas",
							"maxPriorityFeePerGas",
							"gasPrice",
							"chainId",
							"accessList"
						],
						"properties": {
							"type": {
								"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
								"type": "string",
								"enum": [
									0,
									1,
									2,
									3
								]
							},
							"nonce": {
								"description": "A counter for the number of transactions sent from the account; used for replay protection..",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"to": {
								"description": "The recipient's address. `null` when it's a contract creation transaction.",
								"oneOf": [
									{
										"title": "Contract creation",
										"type": "null"
									},
									{
										"description": "Hex-encoded address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$",
										"title": "Address"
									}
								]
							},
							"gas": {
								"description": "Gas limit.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"value": {
								"description": "Value.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"input": {
								"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							},
							"maxPriorityFeePerGas": {
								"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"maxFeePerGas": {
								"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.\n",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"gasPrice": {
								"description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using `effectiveGasPrice` in the receipt object going forward.\n",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"accessList": {
								"description": "EIP-2930 access list.",
								"type": "array",
								"items": {
									"description": "Access list entry.",
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"address": {
											"description": "Hex-encoded address.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										},
										"storageKeys": {
											"type": "array",
											"items": {
												"description": "32 byte hex value.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											}
										}
									}
								}
							},
							"chainId": {
								"description": "Chain ID that this transaction is valid on.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						},
						"title": "Unsigned 1559 transaction"
					},
					{
						"type": "object",
						"description": "EIP-2930 transaction.",
						"required": [
							"type",
							"nonce",
							"gas",
							"value",
							"input",
							"gasPrice",
							"chainId",
							"accessList"
						],
						"properties": {
							"type": {
								"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
								"type": "string",
								"enum": [
									0,
									1,
									2,
									3
								]
							},
							"nonce": {
								"description": "A counter for the number of transactions sent from the account; used for replay protection.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"to": {
								"description": "The recipient's address. `null` when it's a contract creation transaction.",
								"oneOf": [
									{
										"title": "Contract creation",
										"type": "null"
									},
									{
										"description": "Hex-encoded address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$",
										"title": "Address"
									}
								]
							},
							"gas": {
								"description": "Gas limit.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"value": {
								"description": "Value.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"input": {
								"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							},
							"gasPrice": {
								"description": "The gas price the sender is willing to be paid in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"accessList": {
								"description": "EIP-2930 access list.",
								"type": "array",
								"items": {
									"description": "Access list entry.",
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"address": {
											"description": "Hex-encoded address.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										},
										"storageKeys": {
											"type": "array",
											"items": {
												"description": "32 byte hex value.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											}
										}
									}
								}
							},
							"chainId": {
								"description": "Chain ID that this transaction is valid on.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						},
						"title": "Unsigned 2930 transaction"
					},
					{
						"type": "object",
						"description": "Legacy transaction.",
						"required": [
							"type",
							"nonce",
							"gas",
							"value",
							"input",
							"gasPrice"
						],
						"properties": {
							"type": {
								"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
								"type": "string",
								"enum": [
									0,
									1,
									2,
									3
								]
							},
							"nonce": {
								"description": "A counter for the number of transactions sent from the account; used for replay protection.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"to": {
								"description": "The recipient's address. `null` when it's a contract creation transaction.",
								"oneOf": [
									{
										"title": "Contract creation",
										"type": "null"
									},
									{
										"description": "Hex-encoded address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$",
										"title": "Address"
									}
								]
							},
							"gas": {
								"description": "Gas limit.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"value": {
								"description": "Value.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"input": {
								"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							},
							"gasPrice": {
								"description": "The gas price the sender is willing to pay in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"chainId": {
								"description": "Chain ID that this transaction is valid on.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						},
						"title": "Unsigned legacy transaction"
					}
				]
			},
			"Transaction4844Signed": {
				"description": "Signed 4844 Transaction.",
				"type": "object",
				"allOf": [
					{
						"type": "object",
						"description": "EIP-4844 transaction.",
						"required": [
							"type",
							"nonce",
							"to",
							"gas",
							"value",
							"input",
							"maxPriorityFeePerGas",
							"maxFeePerGas",
							"maxFeePerBlobGas",
							"accessList",
							"blobVersionedHashes",
							"chainId"
						],
						"properties": {
							"type": {
								"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
								"type": "string",
								"enum": [
									0,
									1,
									2,
									3
								]
							},
							"nonce": {
								"description": "A counter for the number of transactions sent from the account; used for replay protection.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"to": {
								"description": "The recipient's address.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$"
							},
							"gas": {
								"description": "Gas provided by the sender.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"value": {
								"description": "Value to transfer in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"input": {
								"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							},
							"maxPriorityFeePerGas": {
								"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"maxFeePerGas": {
								"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"maxFeePerBlobGas": {
								"description": "The maximum total fee per gas the sender is willing to pay for blob gas in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"accessList": {
								"description": "EIP-2930 access list.",
								"type": "array",
								"items": {
									"description": "Access list entry.",
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"address": {
											"description": "Hex-encoded address.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										},
										"storageKeys": {
											"type": "array",
											"items": {
												"description": "32 byte hex value.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											}
										}
									}
								}
							},
							"blobVersionedHashes": {
								"description": "List of versioned blob hashes associated with the transaction's EIP-4844 data blobs.",
								"type": "array",
								"items": {
									"description": "32 byte hex value.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								}
							},
							"chainId": {
								"description": "Chain ID that this transaction is valid on.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						},
						"title": "Unsigned 4844 transaction"
					},
					{
						"title": "EIP-4844 transaction signature properties",
						"required": [
							"yParity",
							"r",
							"s"
						],
						"properties": {
							"yParity": {
								"description": "The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"r": {
								"description": "R.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"s": {
								"description": "S.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						}
					}
				]
			},
			"Transaction1559Signed": {
				"description": "Signed 1559 Transaction.",
				"type": "object",
				"allOf": [
					{
						"type": "object",
						"description": "EIP-1559 transaction.",
						"required": [
							"type",
							"nonce",
							"gas",
							"value",
							"input",
							"maxFeePerGas",
							"maxPriorityFeePerGas",
							"gasPrice",
							"chainId",
							"accessList"
						],
						"properties": {
							"type": {
								"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
								"type": "string",
								"enum": [
									0,
									1,
									2,
									3
								]
							},
							"nonce": {
								"description": "A counter for the number of transactions sent from the account; used for replay protection..",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"to": {
								"description": "The recipient's address. `null` when it's a contract creation transaction.",
								"oneOf": [
									{
										"title": "Contract creation",
										"type": "null"
									},
									{
										"description": "Hex-encoded address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$",
										"title": "Address"
									}
								]
							},
							"gas": {
								"description": "Gas limit.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"value": {
								"description": "Value.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"input": {
								"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							},
							"maxPriorityFeePerGas": {
								"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"maxFeePerGas": {
								"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.\n",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"gasPrice": {
								"description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using `effectiveGasPrice` in the receipt object going forward.\n",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"accessList": {
								"description": "EIP-2930 access list.",
								"type": "array",
								"items": {
									"description": "Access list entry.",
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"address": {
											"description": "Hex-encoded address.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										},
										"storageKeys": {
											"type": "array",
											"items": {
												"description": "32 byte hex value.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											}
										}
									}
								}
							},
							"chainId": {
								"description": "Chain ID that this transaction is valid on.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						},
						"title": "Unsigned 1559 Transaction"
					},
					{
						"title": "EIP-1559 transaction signature properties",
						"required": [
							"yParity",
							"r",
							"s"
						],
						"properties": {
							"yParity": {
								"description": ". The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"v": {
								"description": "ECDSA Recovery ID. For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"r": {
								"description": "ECDSA signature r.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"s": {
								"description": "ECDSA signature s.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						}
					}
				]
			},
			"Transaction2930Signed": {
				"description": "Signed 2930 Transaction.",
				"type": "object",
				"allOf": [
					{
						"type": "object",
						"description": "EIP-2930 transaction.",
						"required": [
							"type",
							"nonce",
							"gas",
							"value",
							"input",
							"gasPrice",
							"chainId",
							"accessList"
						],
						"properties": {
							"type": {
								"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
								"type": "string",
								"enum": [
									0,
									1,
									2,
									3
								]
							},
							"nonce": {
								"description": "A counter for the number of transactions sent from the account; used for replay protection.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"to": {
								"description": "The recipient's address. `null` when it's a contract creation transaction.",
								"oneOf": [
									{
										"title": "Contract creation",
										"type": "null"
									},
									{
										"description": "Hex-encoded address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$",
										"title": "Address"
									}
								]
							},
							"gas": {
								"description": "Gas limit.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"value": {
								"description": "Value.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"input": {
								"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							},
							"gasPrice": {
								"description": "The gas price the sender is willing to be paid in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"accessList": {
								"description": "EIP-2930 access list.",
								"type": "array",
								"items": {
									"description": "Access list entry.",
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"address": {
											"description": "Hex-encoded address.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										},
										"storageKeys": {
											"type": "array",
											"items": {
												"description": "32 byte hex value.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											}
										}
									}
								}
							},
							"chainId": {
								"description": "Chain ID that this transaction is valid on.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						},
						"title": "Unsigned 2930 transaction"
					},
					{
						"title": "EIP-2930 transaction signature properties",
						"required": [
							"yParity",
							"r",
							"s"
						],
						"properties": {
							"yParity": {
								"description": "The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"v": {
								"description": "ECDSA Recovery ID. For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"r": {
								"description": "ECDSA signature r.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"s": {
								"description": "ECDSA signature s.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						}
					}
				]
			},
			"TransactionLegacySigned": {
				"description": "Signed Legacy Transaction.",
				"type": "object",
				"allOf": [
					{
						"type": "object",
						"description": "Legacy transaction.",
						"required": [
							"type",
							"nonce",
							"gas",
							"value",
							"input",
							"gasPrice"
						],
						"properties": {
							"type": {
								"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
								"type": "string",
								"enum": [
									0,
									1,
									2,
									3
								]
							},
							"nonce": {
								"description": "A counter for the number of transactions sent from the account; used for replay protection.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"to": {
								"description": "The recipient's address. `null` when it's a contract creation transaction.",
								"oneOf": [
									{
										"title": "Contract creation",
										"type": "null"
									},
									{
										"description": "Hex-encoded address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$",
										"title": "Address"
									}
								]
							},
							"gas": {
								"description": "Gas limit.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"value": {
								"description": "Value.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"input": {
								"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							},
							"gasPrice": {
								"description": "The gas price the sender is willing to pay in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"chainId": {
								"description": "Chain ID that this transaction is valid on.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						},
						"title": "Unsigned Legacy transaction"
					},
					{
						"title": "Legacy transaction signature properties",
						"required": [
							"v",
							"r",
							"s"
						],
						"properties": {
							"v": {
								"description": "ECDSA Recovery ID.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"r": {
								"description": "ECDSA signature r.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"s": {
								"description": "ECDSA signature s.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						}
					}
				]
			},
			"TransactionSigned": {
				"oneOf": [
					{
						"description": "Signed 4844 Transaction.",
						"type": "object",
						"allOf": [
							{
								"type": "object",
								"description": "EIP-4844 transaction.",
								"required": [
									"type",
									"nonce",
									"to",
									"gas",
									"value",
									"input",
									"maxPriorityFeePerGas",
									"maxFeePerGas",
									"maxFeePerBlobGas",
									"accessList",
									"blobVersionedHashes",
									"chainId"
								],
								"properties": {
									"type": {
										"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
										"type": "string",
										"enum": [
											0,
											1,
											2,
											3
										]
									},
									"nonce": {
										"description": "A counter for the number of transactions sent from the account; used for replay protection.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"to": {
										"description": "The recipient's address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$"
									},
									"gas": {
										"description": "Gas provided by the sender.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"value": {
										"description": "Value to transfer in wei.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"input": {
										"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
										"type": "string",
										"pattern": "^0x[0-9a-f]*$"
									},
									"maxPriorityFeePerGas": {
										"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"maxFeePerGas": {
										"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"maxFeePerBlobGas": {
										"description": "The maximum total fee per gas the sender is willing to pay for blob gas in wei.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"accessList": {
										"description": "EIP-2930 access list.",
										"type": "array",
										"items": {
											"description": "Access list entry.",
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"address": {
													"description": "Hex-encoded address.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$"
												},
												"storageKeys": {
													"type": "array",
													"items": {
														"description": "32 byte hex value.",
														"type": "string",
														"pattern": "^0x[0-9a-f]{64}$"
													}
												}
											}
										}
									},
									"blobVersionedHashes": {
										"description": "List of versioned blob hashes associated with the transaction's EIP-4844 data blobs.",
										"type": "array",
										"items": {
											"description": "32 byte hex value.",
											"type": "string",
											"pattern": "^0x[0-9a-f]{64}$"
										}
									},
									"chainId": {
										"description": "Chain ID that this transaction is valid on.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									}
								},
								"title": "Unsigned 4844 transaction"
							},
							{
								"title": "EIP-4844 transaction signature properties",
								"required": [
									"yParity",
									"r",
									"s"
								],
								"properties": {
									"yParity": {
										"description": "The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"r": {
										"description": "R.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"s": {
										"description": "S.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									}
								}
							}
						]
					},
					{
						"description": "Signed 1559 Transaction.",
						"type": "object",
						"allOf": [
							{
								"type": "object",
								"description": "EIP-1559 transaction.",
								"required": [
									"type",
									"nonce",
									"gas",
									"value",
									"input",
									"maxFeePerGas",
									"maxPriorityFeePerGas",
									"gasPrice",
									"chainId",
									"accessList"
								],
								"properties": {
									"type": {
										"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
										"type": "string",
										"enum": [
											0,
											1,
											2,
											3
										]
									},
									"nonce": {
										"description": "A counter for the number of transactions sent from the account; used for replay protection..",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"to": {
										"description": "The recipient's address. `null` when it's a contract creation transaction.",
										"oneOf": [
											{
												"title": "Contract creation",
												"type": "null"
											},
											{
												"description": "Hex-encoded address.",
												"type": "string",
												"pattern": "^0x[0-9a-fA-F]{40}$",
												"title": "Address"
											}
										]
									},
									"gas": {
										"description": "Gas limit.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"value": {
										"description": "Value.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"input": {
										"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
										"type": "string",
										"pattern": "^0x[0-9a-f]*$"
									},
									"maxPriorityFeePerGas": {
										"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"maxFeePerGas": {
										"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.\n",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"gasPrice": {
										"description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using `effectiveGasPrice` in the receipt object going forward.\n",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"accessList": {
										"description": "EIP-2930 access list.",
										"type": "array",
										"items": {
											"description": "Access list entry.",
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"address": {
													"description": "Hex-encoded address.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$"
												},
												"storageKeys": {
													"type": "array",
													"items": {
														"description": "32 byte hex value.",
														"type": "string",
														"pattern": "^0x[0-9a-f]{64}$"
													}
												}
											}
										}
									},
									"chainId": {
										"description": "Chain ID that this transaction is valid on.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									}
								},
								"title": "Unsigned 1559 Transaction"
							},
							{
								"title": "EIP-1559 transaction signature properties",
								"required": [
									"yParity",
									"r",
									"s"
								],
								"properties": {
									"yParity": {
										"description": ". The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"v": {
										"description": "ECDSA Recovery ID. For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"r": {
										"description": "ECDSA signature r.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"s": {
										"description": "ECDSA signature s.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									}
								}
							}
						]
					},
					{
						"description": "Signed 2930 Transaction.",
						"type": "object",
						"allOf": [
							{
								"type": "object",
								"description": "EIP-2930 transaction.",
								"required": [
									"type",
									"nonce",
									"gas",
									"value",
									"input",
									"gasPrice",
									"chainId",
									"accessList"
								],
								"properties": {
									"type": {
										"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
										"type": "string",
										"enum": [
											0,
											1,
											2,
											3
										]
									},
									"nonce": {
										"description": "A counter for the number of transactions sent from the account; used for replay protection.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"to": {
										"description": "The recipient's address. `null` when it's a contract creation transaction.",
										"oneOf": [
											{
												"title": "Contract creation",
												"type": "null"
											},
											{
												"description": "Hex-encoded address.",
												"type": "string",
												"pattern": "^0x[0-9a-fA-F]{40}$",
												"title": "Address"
											}
										]
									},
									"gas": {
										"description": "Gas limit.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"value": {
										"description": "Value.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"input": {
										"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
										"type": "string",
										"pattern": "^0x[0-9a-f]*$"
									},
									"gasPrice": {
										"description": "The gas price the sender is willing to be paid in wei.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"accessList": {
										"description": "EIP-2930 access list.",
										"type": "array",
										"items": {
											"description": "Access list entry.",
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"address": {
													"description": "Hex-encoded address.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$"
												},
												"storageKeys": {
													"type": "array",
													"items": {
														"description": "32 byte hex value.",
														"type": "string",
														"pattern": "^0x[0-9a-f]{64}$"
													}
												}
											}
										}
									},
									"chainId": {
										"description": "Chain ID that this transaction is valid on.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									}
								},
								"title": "Unsigned 2930 transaction"
							},
							{
								"title": "EIP-2930 transaction signature properties",
								"required": [
									"yParity",
									"r",
									"s"
								],
								"properties": {
									"yParity": {
										"description": "The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"v": {
										"description": "ECDSA Recovery ID. For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"r": {
										"description": "ECDSA signature r.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"s": {
										"description": "ECDSA signature s.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									}
								}
							}
						]
					},
					{
						"description": "Signed Legacy Transaction.",
						"type": "object",
						"allOf": [
							{
								"type": "object",
								"description": "Legacy transaction.",
								"required": [
									"type",
									"nonce",
									"gas",
									"value",
									"input",
									"gasPrice"
								],
								"properties": {
									"type": {
										"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
										"type": "string",
										"enum": [
											0,
											1,
											2,
											3
										]
									},
									"nonce": {
										"description": "A counter for the number of transactions sent from the account; used for replay protection.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"to": {
										"description": "The recipient's address. `null` when it's a contract creation transaction.",
										"oneOf": [
											{
												"title": "Contract creation",
												"type": "null"
											},
											{
												"description": "Hex-encoded address.",
												"type": "string",
												"pattern": "^0x[0-9a-fA-F]{40}$",
												"title": "Address"
											}
										]
									},
									"gas": {
										"description": "Gas limit.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"value": {
										"description": "Value.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"input": {
										"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
										"type": "string",
										"pattern": "^0x[0-9a-f]*$"
									},
									"gasPrice": {
										"description": "The gas price the sender is willing to pay in wei.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"chainId": {
										"description": "Chain ID that this transaction is valid on.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									}
								},
								"title": "Unsigned Legacy transaction"
							},
							{
								"title": "Legacy transaction signature properties",
								"required": [
									"v",
									"r",
									"s"
								],
								"properties": {
									"v": {
										"description": "ECDSA Recovery ID.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"r": {
										"description": "ECDSA signature r.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"s": {
										"description": "ECDSA signature s.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									}
								}
							}
						]
					}
				]
			},
			"TransactionInfo": {
				"type": "object",
				"description": "Transaction information.",
				"allOf": [
					{
						"title": "Contextual information",
						"required": [
							"blockHash",
							"blockNumber",
							"from",
							"hash",
							"transactionIndex"
						],
						"unevaluatedProperties": false,
						"properties": {
							"blockHash": {
								"description": "Block hash, 32 byte hex identifier for the block derived from the block header.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							},
							"blockNumber": {
								"description": "Block number.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"from": {
								"description": "Sender's address.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$"
							},
							"hash": {
								"description": "32 byte hex identifier for the transaction hash.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							},
							"transactionIndex": {
								"description": "Transaction index.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						}
					},
					{
						"oneOf": [
							{
								"description": "Signed 4844 Transaction.",
								"type": "object",
								"allOf": [
									{
										"type": "object",
										"description": "EIP-4844 transaction.",
										"required": [
											"type",
											"nonce",
											"to",
											"gas",
											"value",
											"input",
											"maxPriorityFeePerGas",
											"maxFeePerGas",
											"maxFeePerBlobGas",
											"accessList",
											"blobVersionedHashes",
											"chainId"
										],
										"properties": {
											"type": {
												"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
												"type": "string",
												"enum": [
													0,
													1,
													2,
													3
												]
											},
											"nonce": {
												"description": "A counter for the number of transactions sent from the account; used for replay protection.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"to": {
												"description": "The recipient's address.",
												"type": "string",
												"pattern": "^0x[0-9a-fA-F]{40}$"
											},
											"gas": {
												"description": "Gas provided by the sender.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"value": {
												"description": "Value to transfer in wei.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"input": {
												"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
												"type": "string",
												"pattern": "^0x[0-9a-f]*$"
											},
											"maxPriorityFeePerGas": {
												"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"maxFeePerGas": {
												"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"maxFeePerBlobGas": {
												"description": "The maximum total fee per gas the sender is willing to pay for blob gas in wei.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"accessList": {
												"description": "EIP-2930 access list.",
												"type": "array",
												"items": {
													"description": "Access list entry.",
													"type": "object",
													"additionalProperties": false,
													"properties": {
														"address": {
															"description": "Hex-encoded address.",
															"type": "string",
															"pattern": "^0x[0-9a-fA-F]{40}$"
														},
														"storageKeys": {
															"type": "array",
															"items": {
																"description": "32 byte hex value.",
																"type": "string",
																"pattern": "^0x[0-9a-f]{64}$"
															}
														}
													}
												}
											},
											"blobVersionedHashes": {
												"description": "List of versioned blob hashes associated with the transaction's EIP-4844 data blobs.",
												"type": "array",
												"items": {
													"description": "32 byte hex value.",
													"type": "string",
													"pattern": "^0x[0-9a-f]{64}$"
												}
											},
											"chainId": {
												"description": "Chain ID that this transaction is valid on.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											}
										},
										"title": "Unsigned 4844 transaction"
									},
									{
										"title": "EIP-4844 transaction signature properties",
										"required": [
											"yParity",
											"r",
											"s"
										],
										"properties": {
											"yParity": {
												"description": "The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"r": {
												"description": "R.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"s": {
												"description": "S.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											}
										}
									}
								]
							},
							{
								"description": "Signed 1559 Transaction.",
								"type": "object",
								"allOf": [
									{
										"type": "object",
										"description": "EIP-1559 transaction.",
										"required": [
											"type",
											"nonce",
											"gas",
											"value",
											"input",
											"maxFeePerGas",
											"maxPriorityFeePerGas",
											"gasPrice",
											"chainId",
											"accessList"
										],
										"properties": {
											"type": {
												"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
												"type": "string",
												"enum": [
													0,
													1,
													2,
													3
												]
											},
											"nonce": {
												"description": "A counter for the number of transactions sent from the account; used for replay protection..",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"to": {
												"description": "The recipient's address. `null` when it's a contract creation transaction.",
												"oneOf": [
													{
														"title": "Contract creation",
														"type": "null"
													},
													{
														"description": "Hex-encoded address.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$",
														"title": "Address"
													}
												]
											},
											"gas": {
												"description": "Gas limit.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"value": {
												"description": "Value.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"input": {
												"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
												"type": "string",
												"pattern": "^0x[0-9a-f]*$"
											},
											"maxPriorityFeePerGas": {
												"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"maxFeePerGas": {
												"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.\n",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"gasPrice": {
												"description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using `effectiveGasPrice` in the receipt object going forward.\n",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"accessList": {
												"description": "EIP-2930 access list.",
												"type": "array",
												"items": {
													"description": "Access list entry.",
													"type": "object",
													"additionalProperties": false,
													"properties": {
														"address": {
															"description": "Hex-encoded address.",
															"type": "string",
															"pattern": "^0x[0-9a-fA-F]{40}$"
														},
														"storageKeys": {
															"type": "array",
															"items": {
																"description": "32 byte hex value.",
																"type": "string",
																"pattern": "^0x[0-9a-f]{64}$"
															}
														}
													}
												}
											},
											"chainId": {
												"description": "Chain ID that this transaction is valid on.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											}
										},
										"title": "Unsigned 1559 Transaction"
									},
									{
										"title": "EIP-1559 transaction signature properties",
										"required": [
											"yParity",
											"r",
											"s"
										],
										"properties": {
											"yParity": {
												"description": ". The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"v": {
												"description": "ECDSA Recovery ID. For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"r": {
												"description": "ECDSA signature r.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"s": {
												"description": "ECDSA signature s.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											}
										}
									}
								]
							},
							{
								"description": "Signed 2930 Transaction.",
								"type": "object",
								"allOf": [
									{
										"type": "object",
										"description": "EIP-2930 transaction.",
										"required": [
											"type",
											"nonce",
											"gas",
											"value",
											"input",
											"gasPrice",
											"chainId",
											"accessList"
										],
										"properties": {
											"type": {
												"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
												"type": "string",
												"enum": [
													0,
													1,
													2,
													3
												]
											},
											"nonce": {
												"description": "A counter for the number of transactions sent from the account; used for replay protection.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"to": {
												"description": "The recipient's address. `null` when it's a contract creation transaction.",
												"oneOf": [
													{
														"title": "Contract creation",
														"type": "null"
													},
													{
														"description": "Hex-encoded address.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$",
														"title": "Address"
													}
												]
											},
											"gas": {
												"description": "Gas limit.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"value": {
												"description": "Value.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"input": {
												"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
												"type": "string",
												"pattern": "^0x[0-9a-f]*$"
											},
											"gasPrice": {
												"description": "The gas price the sender is willing to be paid in wei.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"accessList": {
												"description": "EIP-2930 access list.",
												"type": "array",
												"items": {
													"description": "Access list entry.",
													"type": "object",
													"additionalProperties": false,
													"properties": {
														"address": {
															"description": "Hex-encoded address.",
															"type": "string",
															"pattern": "^0x[0-9a-fA-F]{40}$"
														},
														"storageKeys": {
															"type": "array",
															"items": {
																"description": "32 byte hex value.",
																"type": "string",
																"pattern": "^0x[0-9a-f]{64}$"
															}
														}
													}
												}
											},
											"chainId": {
												"description": "Chain ID that this transaction is valid on.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											}
										},
										"title": "Unsigned 2930 transaction"
									},
									{
										"title": "EIP-2930 transaction signature properties",
										"required": [
											"yParity",
											"r",
											"s"
										],
										"properties": {
											"yParity": {
												"description": "The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"v": {
												"description": "ECDSA Recovery ID. For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"r": {
												"description": "ECDSA signature r.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"s": {
												"description": "ECDSA signature s.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											}
										}
									}
								]
							},
							{
								"description": "Signed Legacy Transaction.",
								"type": "object",
								"allOf": [
									{
										"type": "object",
										"description": "Legacy transaction.",
										"required": [
											"type",
											"nonce",
											"gas",
											"value",
											"input",
											"gasPrice"
										],
										"properties": {
											"type": {
												"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
												"type": "string",
												"enum": [
													0,
													1,
													2,
													3
												]
											},
											"nonce": {
												"description": "A counter for the number of transactions sent from the account; used for replay protection.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"to": {
												"description": "The recipient's address. `null` when it's a contract creation transaction.",
												"oneOf": [
													{
														"title": "Contract creation",
														"type": "null"
													},
													{
														"description": "Hex-encoded address.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$",
														"title": "Address"
													}
												]
											},
											"gas": {
												"description": "Gas limit.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"value": {
												"description": "Value.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"input": {
												"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
												"type": "string",
												"pattern": "^0x[0-9a-f]*$"
											},
											"gasPrice": {
												"description": "The gas price the sender is willing to pay in wei.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"chainId": {
												"description": "Chain ID that this transaction is valid on.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											}
										},
										"title": "Unsigned Legacy transaction"
									},
									{
										"title": "Legacy transaction signature properties",
										"required": [
											"v",
											"r",
											"s"
										],
										"properties": {
											"v": {
												"description": "ECDSA Recovery ID.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"r": {
												"description": "ECDSA signature r.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"s": {
												"description": "ECDSA signature s.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											}
										}
									}
								]
							}
						],
						"title": "Signed transaction"
					}
				]
			},
			"TxType": {
				"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
				"type": "string",
				"enum": [
					0,
					1,
					2,
					3
				]
			},
			"Withdrawal": {
				"type": "object",
				"description": "Validator withdrawal.",
				"required": [
					"index",
					"validatorIndex",
					"address",
					"amount"
				],
				"additionalProperties": false,
				"properties": {
					"index": {
						"description": "Index of withdrawal.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
					},
					"validatorIndex": {
						"description": "Index of validator that generated withdrawal.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
					},
					"address": {
						"description": "Recipient address for withdrawal value.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					},
					"amount": {
						"description": "Value contained in withdrawal.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
					}
				}
			},
			"LineaBlock": {
				"type": "object",
				"required": [
					"hash",
					"parentHash",
					"sha3Uncles",
					"miner",
					"stateRoot",
					"transactionsRoot",
					"receiptsRoot",
					"logsBloom",
					"number",
					"gasLimit",
					"gasUsed",
					"timestamp",
					"extraData",
					"mixHash",
					"nonce",
					"size",
					"transactions",
					"uncles"
				],
				"additionalProperties": false,
				"properties": {
					"hash": {
						"description": "Block hash, 32 byte hex identifier for the block derived from the block header; `null` when block is pending.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"parentHash": {
						"description": "32 byte hex value of the hash of the parent block.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"sha3Uncles": {
						"description": "SHA3 of the uncle's data in the block.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"miner": {
						"description": "Not relevant to Proof of Stake/Linea. Applied to Proof of Work. Address to pay mining rewards to the coinbase transaction that rewarded the miner for their work.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					},
					"stateRoot": {
						"description": "Root of the final state trie for the block as 32 byte hex value.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"transactionsRoot": {
						"description": "Root of the transaction trie for the block.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"receiptsRoot": {
						"description": "Root of the receipts trie for the block.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"logsBloom": {
						"description": "Bloom filter for the block logs; `null` when block is pending.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{512}$"
					},
					"difficulty": {
						"description": "Not relevant to Proof of Stake/Linea. Difficulty for this block.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"number": {
						"description": "Block number; `null` when block is pending.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"gasLimit": {
						"description": "Maximum gas allowed in this block.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"gasUsed": {
						"description": "Total gas used by all transactions in this block.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"timestamp": {
						"description": "Unix timestamp (milliseconds) for block assembly.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"extraData": {
						"description": "Extra data field for this block.",
						"type": "string",
						"pattern": "^0x[0-9a-f]*$"
					},
					"mixHash": {
						"description": "Not relevant to Proof of Stake/Linea. Hash used in the Proof of Work process.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"nonce": {
						"description": "Proof of Work nonce; not relevant to Proof of Stake/Linea. Hash of the generated Proof of Work.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{16}$"
					},
					"totalDifficulty": {
						"description": "Not relevant to Proof of Stake/Linea. Total difficulty of the chain until this block. This value will always be `0` for an uncle block.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"baseFeePerGas": {
						"description": "The block's base fee per gas; empty for blocks created before [EIP-1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md).",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"withdrawalsRoot": {
						"description": "Root of the trie containing withdrawal receipts in the block.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"parentBeaconBlockRoot": {
						"description": "Root of the parent Beacon Chain block. This ties the execution layer to the consensus layer in Proof of Stake.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"size": {
						"description": "Size of block in bytes.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"transactions": {
						"description": "Array of transaction objects, or 32 byte transaction hashes depending on the specified parameter.",
						"anyOf": [
							{
								"title": "Transaction hashes",
								"type": "array",
								"items": {
									"description": "32 byte hex value.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								}
							},
							{
								"title": "Full transactions",
								"type": "array",
								"items": {
									"type": "object",
									"description": "Transaction information.",
									"allOf": [
										{
											"title": "Contextual information",
											"required": [
												"blockHash",
												"blockNumber",
												"from",
												"hash",
												"transactionIndex"
											],
											"unevaluatedProperties": false,
											"properties": {
												"blockHash": {
													"description": "Block hash, 32 byte hex identifier for the block derived from the block header.",
													"type": "string",
													"pattern": "^0x[0-9a-f]{64}$"
												},
												"blockNumber": {
													"description": "Block number.",
													"type": "string",
													"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
													"example": "0x1"
												},
												"from": {
													"description": "Sender's address.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$"
												},
												"hash": {
													"description": "32 byte hex identifier for the transaction hash.",
													"type": "string",
													"pattern": "^0x[0-9a-f]{64}$"
												},
												"transactionIndex": {
													"description": "Transaction index.",
													"type": "string",
													"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
													"example": "0x1"
												}
											}
										},
										{
											"oneOf": [
												{
													"description": "Signed 4844 Transaction.",
													"type": "object",
													"allOf": [
														{
															"type": "object",
															"description": "EIP-4844 transaction.",
															"required": [
																"type",
																"nonce",
																"to",
																"gas",
																"value",
																"input",
																"maxPriorityFeePerGas",
																"maxFeePerGas",
																"maxFeePerBlobGas",
																"accessList",
																"blobVersionedHashes",
																"chainId"
															],
															"properties": {
																"type": {
																	"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																	"type": "string",
																	"enum": [
																		0,
																		1,
																		2,
																		3
																	]
																},
																"nonce": {
																	"description": "A counter for the number of transactions sent from the account; used for replay protection.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"to": {
																	"description": "The recipient's address.",
																	"type": "string",
																	"pattern": "^0x[0-9a-fA-F]{40}$"
																},
																"gas": {
																	"description": "Gas provided by the sender.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"value": {
																	"description": "Value to transfer in wei.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"input": {
																	"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																	"type": "string",
																	"pattern": "^0x[0-9a-f]*$"
																},
																"maxPriorityFeePerGas": {
																	"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"maxFeePerGas": {
																	"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"maxFeePerBlobGas": {
																	"description": "The maximum total fee per gas the sender is willing to pay for blob gas in wei.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"accessList": {
																	"description": "EIP-2930 access list.",
																	"type": "array",
																	"items": {
																		"description": "Access list entry.",
																		"type": "object",
																		"additionalProperties": false,
																		"properties": {
																			"address": {
																				"description": "Hex-encoded address.",
																				"type": "string",
																				"pattern": "^0x[0-9a-fA-F]{40}$"
																			},
																			"storageKeys": {
																				"type": "array",
																				"items": {
																					"description": "32 byte hex value.",
																					"type": "string",
																					"pattern": "^0x[0-9a-f]{64}$"
																				}
																			}
																		}
																	}
																},
																"blobVersionedHashes": {
																	"description": "List of versioned blob hashes associated with the transaction's EIP-4844 data blobs.",
																	"type": "array",
																	"items": {
																		"description": "32 byte hex value.",
																		"type": "string",
																		"pattern": "^0x[0-9a-f]{64}$"
																	}
																},
																"chainId": {
																	"description": "Chain ID that this transaction is valid on.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															},
															"title": "Unsigned 4844 transaction"
														},
														{
															"title": "EIP-4844 transaction signature properties",
															"required": [
																"yParity",
																"r",
																"s"
															],
															"properties": {
																"yParity": {
																	"description": "The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"r": {
																	"description": "R.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"s": {
																	"description": "S.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															}
														}
													]
												},
												{
													"description": "Signed 1559 Transaction.",
													"type": "object",
													"allOf": [
														{
															"type": "object",
															"description": "EIP-1559 transaction.",
															"required": [
																"type",
																"nonce",
																"gas",
																"value",
																"input",
																"maxFeePerGas",
																"maxPriorityFeePerGas",
																"gasPrice",
																"chainId",
																"accessList"
															],
															"properties": {
																"type": {
																	"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																	"type": "string",
																	"enum": [
																		0,
																		1,
																		2,
																		3
																	]
																},
																"nonce": {
																	"description": "A counter for the number of transactions sent from the account; used for replay protection..",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"to": {
																	"description": "The recipient's address. `null` when it's a contract creation transaction.",
																	"oneOf": [
																		{
																			"title": "Contract creation",
																			"type": "null"
																		},
																		{
																			"description": "Hex-encoded address.",
																			"type": "string",
																			"pattern": "^0x[0-9a-fA-F]{40}$",
																			"title": "Address"
																		}
																	]
																},
																"gas": {
																	"description": "Gas limit.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"value": {
																	"description": "Value.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"input": {
																	"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																	"type": "string",
																	"pattern": "^0x[0-9a-f]*$"
																},
																"maxPriorityFeePerGas": {
																	"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"maxFeePerGas": {
																	"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.\n",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"gasPrice": {
																	"description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using `effectiveGasPrice` in the receipt object going forward.\n",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"accessList": {
																	"description": "EIP-2930 access list.",
																	"type": "array",
																	"items": {
																		"description": "Access list entry.",
																		"type": "object",
																		"additionalProperties": false,
																		"properties": {
																			"address": {
																				"description": "Hex-encoded address.",
																				"type": "string",
																				"pattern": "^0x[0-9a-fA-F]{40}$"
																			},
																			"storageKeys": {
																				"type": "array",
																				"items": {
																					"description": "32 byte hex value.",
																					"type": "string",
																					"pattern": "^0x[0-9a-f]{64}$"
																				}
																			}
																		}
																	}
																},
																"chainId": {
																	"description": "Chain ID that this transaction is valid on.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															},
															"title": "Unsigned 1559 Transaction"
														},
														{
															"title": "EIP-1559 transaction signature properties",
															"required": [
																"yParity",
																"r",
																"s"
															],
															"properties": {
																"yParity": {
																	"description": ". The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"v": {
																	"description": "ECDSA Recovery ID. For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"r": {
																	"description": "ECDSA signature r.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"s": {
																	"description": "ECDSA signature s.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															}
														}
													]
												},
												{
													"description": "Signed 2930 Transaction.",
													"type": "object",
													"allOf": [
														{
															"type": "object",
															"description": "EIP-2930 transaction.",
															"required": [
																"type",
																"nonce",
																"gas",
																"value",
																"input",
																"gasPrice",
																"chainId",
																"accessList"
															],
															"properties": {
																"type": {
																	"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																	"type": "string",
																	"enum": [
																		0,
																		1,
																		2,
																		3
																	]
																},
																"nonce": {
																	"description": "A counter for the number of transactions sent from the account; used for replay protection.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"to": {
																	"description": "The recipient's address. `null` when it's a contract creation transaction.",
																	"oneOf": [
																		{
																			"title": "Contract creation",
																			"type": "null"
																		},
																		{
																			"description": "Hex-encoded address.",
																			"type": "string",
																			"pattern": "^0x[0-9a-fA-F]{40}$",
																			"title": "Address"
																		}
																	]
																},
																"gas": {
																	"description": "Gas limit.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"value": {
																	"description": "Value.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"input": {
																	"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																	"type": "string",
																	"pattern": "^0x[0-9a-f]*$"
																},
																"gasPrice": {
																	"description": "The gas price the sender is willing to be paid in wei.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"accessList": {
																	"description": "EIP-2930 access list.",
																	"type": "array",
																	"items": {
																		"description": "Access list entry.",
																		"type": "object",
																		"additionalProperties": false,
																		"properties": {
																			"address": {
																				"description": "Hex-encoded address.",
																				"type": "string",
																				"pattern": "^0x[0-9a-fA-F]{40}$"
																			},
																			"storageKeys": {
																				"type": "array",
																				"items": {
																					"description": "32 byte hex value.",
																					"type": "string",
																					"pattern": "^0x[0-9a-f]{64}$"
																				}
																			}
																		}
																	}
																},
																"chainId": {
																	"description": "Chain ID that this transaction is valid on.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															},
															"title": "Unsigned 2930 transaction"
														},
														{
															"title": "EIP-2930 transaction signature properties",
															"required": [
																"yParity",
																"r",
																"s"
															],
															"properties": {
																"yParity": {
																	"description": "The YParity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"v": {
																	"description": "ECDSA Recovery ID. For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"r": {
																	"description": "ECDSA signature r.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"s": {
																	"description": "ECDSA signature s.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															}
														}
													]
												},
												{
													"description": "Signed Legacy Transaction.",
													"type": "object",
													"allOf": [
														{
															"type": "object",
															"description": "Legacy transaction.",
															"required": [
																"type",
																"nonce",
																"gas",
																"value",
																"input",
																"gasPrice"
															],
															"properties": {
																"type": {
																	"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
																	"type": "string",
																	"enum": [
																		0,
																		1,
																		2,
																		3
																	]
																},
																"nonce": {
																	"description": "A counter for the number of transactions sent from the account; used for replay protection.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"to": {
																	"description": "The recipient's address. `null` when it's a contract creation transaction.",
																	"oneOf": [
																		{
																			"title": "Contract creation",
																			"type": "null"
																		},
																		{
																			"description": "Hex-encoded address.",
																			"type": "string",
																			"pattern": "^0x[0-9a-fA-F]{40}$",
																			"title": "Address"
																		}
																	]
																},
																"gas": {
																	"description": "Gas limit.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"value": {
																	"description": "Value.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"input": {
																	"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
																	"type": "string",
																	"pattern": "^0x[0-9a-f]*$"
																},
																"gasPrice": {
																	"description": "The gas price the sender is willing to pay in wei.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"chainId": {
																	"description": "Chain ID that this transaction is valid on.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															},
															"title": "Unsigned Legacy transaction"
														},
														{
															"title": "Legacy transaction signature properties",
															"required": [
																"v",
																"r",
																"s"
															],
															"properties": {
																"v": {
																	"description": "ECDSA Recovery ID.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"r": {
																	"description": "ECDSA signature r.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																},
																"s": {
																	"description": "ECDSA signature s.",
																	"type": "string",
																	"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
																	"example": "0x1"
																}
															}
														}
													]
												}
											],
											"title": "Signed transaction"
										}
									]
								}
							}
						]
					},
					"withdrawals": {
						"type": "array",
						"items": {
							"type": "object",
							"description": "Validator withdrawal.",
							"required": [
								"index",
								"validatorIndex",
								"address",
								"amount"
							],
							"additionalProperties": false,
							"properties": {
								"index": {
									"description": "Index of withdrawal.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
								},
								"validatorIndex": {
									"description": "Index of validator that generated withdrawal.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
								},
								"address": {
									"description": "Recipient address for withdrawal value.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"amount": {
									"description": "Value contained in withdrawal.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
								}
							}
						}
					},
					"uncles": {
						"description": "Array of uncle hashes.",
						"type": "array",
						"items": {
							"description": "32 byte hex value.",
							"type": "string",
							"pattern": "^0x[0-9a-f]{64}$"
						}
					}
				}
			},
			"LineaBlockNumberOrTag": {
				"description": "Block number or string tag.",
				"oneOf": [
					{
						"description": "Block number in hexadecimal.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1",
						"title": "Block number"
					},
					{
						"type": "string",
						"enum": [
							"earliest",
							"finalized",
							"latest",
							"pending"
						],
						"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
						"title": "Block tag"
					}
				]
			},
			"LineaBlockNumberOrTagNoFinalized": {
				"description": "Block number or string tag.",
				"oneOf": [
					{
						"description": "Block number in hexadecimal.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1",
						"title": "Block number"
					},
					{
						"type": "string",
						"enum": [
							"earliest",
							"latest",
							"pending"
						],
						"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block).\n- `earliest`: The lowest numbered block the client has available.\n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
						"title": "Block tag"
					}
				]
			},
			"LineaBlockNumberOrTagOrHash": {
				"description": "Block number, block hash, or string tag.",
				"anyOf": [
					{
						"description": "Block number in hexadecimal.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1",
						"title": "Block number"
					},
					{
						"type": "string",
						"enum": [
							"earliest",
							"finalized",
							"latest",
							"pending"
						],
						"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
						"title": "Block tag"
					},
					{
						"description": "32 byte hex value.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$",
						"title": "Block hash"
					}
				]
			},
			"LineaBlockNumberOrTagOrHashNoFinalized": {
				"description": "Block number, block hash, or string tag.",
				"anyOf": [
					{
						"description": "Block number in hexadecimal.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1",
						"title": "Block number"
					},
					{
						"type": "string",
						"enum": [
							"earliest",
							"latest",
							"pending"
						],
						"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block).\n- `earliest`: The lowest numbered block the client has available.\n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
						"title": "Block tag"
					},
					{
						"description": "32 byte hex value.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$",
						"title": "Block hash"
					}
				]
			},
			"LineaBlockTag": {
				"type": "string",
				"enum": [
					"earliest",
					"finalized",
					"latest",
					"pending"
				],
				"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n"
			},
			"LineaBlockTagNoFinalized": {
				"type": "string",
				"enum": [
					"earliest",
					"latest",
					"pending"
				],
				"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block).\n- `earliest`: The lowest numbered block the client has available.\n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n"
			},
			"LineaSubmitWork": {
				"type": "array",
				"description": "Positional parameters for the eth_submitWork method. The parameters are:\n1. nonce: 8 bytes (64 bits) representing the proof-of-work nonce.\n2. powHash: 32 bytes (256 bits) representing the hash of the block header.\n3. mixDigest: 32 bytes (256 bits) representing the mix digest from the mining algorithm.\n",
				"items": {
					"type": "string",
					"pattern": "^0x[0-9a-fA-F]{1,64}$"
				}
			},
			"Linea4byteTracerConfig": {
				"type": "object",
				"required": [
					"tracerType"
				],
				"properties": {
					"tracerType": {
						"description": "The type of tracer; restricted to work with associated config options.",
						"type": "string",
						"enum": [
							"4byteTracer"
						]
					}
				}
			},
			"Linea4byteTracerResponse": {
				"type": "array",
				"description": "An array of trace results from the 4byteTracer.",
				"items": {
					"type": "object",
					"properties": {
						"result": {
							"type": "object",
							"description": "A map where the key is a function selector and calldata size, and the value is the number of occurrences.",
							"additionalProperties": {
								"type": "integer",
								"description": "Number of occurrences of the function call with the specified selector and calldata size."
							}
						},
						"transactionHash": {
							"description": "The transaction hash that the traces relate to.",
							"type": "string",
							"pattern": "^0x[0-9a-f]{64}$"
						}
					}
				}
			},
			"LineaCallTracerConfig": {
				"type": "object",
				"required": [
					"tracerType"
				],
				"properties": {
					"tracerType": {
						"description": "The type of tracer; restricted to work with associated config options.",
						"type": "string",
						"enum": [
							"callTracer"
						]
					},
					"onlyTopCall": {
						"description": "When `true`, will only trace the primary (top-level) call and not any sub-calls. It eliminates the additional processing for each call frame.",
						"type": "boolean"
					},
					"withLog": {
						"description": "When  `true`, instructs the tracer to also collect the logs emitted during each call.",
						"type": "boolean"
					}
				}
			},
			"LineaCallTracerResponse": {
				"description": "This returns all the call frames executed during a transaction, including depth 0. The result provides a nested list of call frames. They form a tree with the top-level call at root and sub-calls as children of the higher levels.",
				"properties": {
					"calls": {
						"type": "object",
						"items": {
							"anyOf": [
								{
									"transactionInfo": null,
									"type": "object",
									"properties": {
										"tracerData": {
											"type": "object",
											"properties": {
												"from": {
													"description": "Address of the sender.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$"
												},
												"gas": {
													"description": "Gas provided by the sender.",
													"type": "string",
													"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
													"example": "0x1"
												},
												"gasUsed": {
													"description": "The amount of gas used for this specific transaction.",
													"type": "string",
													"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
													"example": "0x1"
												},
												"input": {
													"description": "The input data sent to the contract (ABI-encoded).",
													"type": "string",
													"pattern": "^0x[0-9a-f]*$"
												},
												"output": {
													"description": "The output data returned by the contract.",
													"type": "string",
													"pattern": "^0x[0-9a-f]*$"
												},
												"to": {
													"description": "The contract or address being called.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$"
												},
												"error": {
													"description": "Error, if any.",
													"type": "string"
												},
												"revertReason": {
													"description": "Solidity revert reason, if any."
												},
												"type": {
													"type": "string",
													"description": "The type of call used in the transaction.",
													"enum": [
														"staticcall",
														"call",
														"delegatecall",
														"callcode",
														"create",
														"create2",
														"selfdestruct"
													]
												},
												"value": {
													"description": "The amount of ETH in wei transferred in the call.",
													"type": "string",
													"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
													"example": "0x1"
												}
											},
											"description": "Tracer object."
										},
										"linkedCalls": {
											"type": "array",
											"description": "A recursive structure that nests additional call frames. Each call frame can, in turn, make sub-calls, and the calls field within each frame captures those sub-calls.",
											"items": {
												"type": "object",
												"properties": {
													"from": {
														"description": "Address of the sender.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$"
													},
													"gas": {
														"description": "Gas provided by the sender.",
														"type": "string",
														"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
														"example": "0x1"
													},
													"gasUsed": {
														"description": "The amount of gas used for this specific transaction.",
														"type": "string",
														"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
														"example": "0x1"
													},
													"input": {
														"description": "The input data sent to the contract (ABI-encoded).",
														"type": "string",
														"pattern": "^0x[0-9a-f]*$"
													},
													"output": {
														"description": "The output data returned by the contract.",
														"type": "string",
														"pattern": "^0x[0-9a-f]*$"
													},
													"to": {
														"description": "The contract or address being called.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$"
													},
													"error": {
														"description": "Error, if any.",
														"type": "string"
													},
													"revertReason": {
														"description": "Solidity revert reason, if any."
													},
													"type": {
														"type": "string",
														"description": "The type of call used in the transaction.",
														"enum": [
															"staticcall",
															"call",
															"delegatecall",
															"callcode",
															"create",
															"create2",
															"selfdestruct"
														]
													},
													"value": {
														"description": "The amount of ETH in wei transferred in the call.",
														"type": "string",
														"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
														"example": "0x1"
													}
												}
											}
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"from": {
											"description": "Address of the sender.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										},
										"gas": {
											"description": "Gas provided by the sender.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"gasUsed": {
											"description": "The amount of gas used for this specific transaction.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"input": {
											"description": "The input data sent to the contract (ABI-encoded).",
											"type": "string",
											"pattern": "^0x[0-9a-f]*$"
										},
										"output": {
											"description": "The output data returned by the contract.",
											"type": "string",
											"pattern": "^0x[0-9a-f]*$"
										},
										"to": {
											"description": "The contract or address being called.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										},
										"error": {
											"description": "Error, if any.",
											"type": "string"
										},
										"revertReason": {
											"description": "Solidity revert reason, if any."
										},
										"type": {
											"type": "string",
											"description": "The type of call used in the transaction.",
											"enum": [
												"staticcall",
												"call",
												"delegatecall",
												"callcode",
												"create",
												"create2",
												"selfdestruct"
											]
										},
										"value": {
											"description": "The amount of ETH in wei transferred in the call.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										}
									},
									"calls": null,
									"description": "Next call object."
								}
							]
						}
					}
				}
			},
			"LineaFlatCallTracerConfig": {
				"type": "object",
				"required": [
					"tracerType"
				],
				"properties": {
					"tracerType": {
						"description": "The type of tracer; restricted to work with associated config options.",
						"type": "string",
						"enum": [
							"flatCallTracer"
						]
					}
				}
			},
			"LineaFlatCallTracerResponse": {
				"description": "Returns all the call frames executed during a transaction in a flat structure. Each call frame includes details about the action taken, gas used, and other transaction information. Unlike `callTracer`, this result is not nested.\n",
				"type": "object",
				"allOf": [
					{
						"type": "object",
						"properties": {
							"from": {
								"description": "Address of the sender.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$"
							},
							"gas": {
								"description": "Gas provided by the sender.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"gasUsed": {
								"description": "The amount of gas used for this specific transaction.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"input": {
								"description": "The input data sent to the contract (ABI-encoded).",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							},
							"output": {
								"description": "The output data returned by the contract.",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							},
							"to": {
								"description": "The contract or address being called.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$"
							},
							"error": {
								"description": "Error, if any.",
								"type": "string"
							},
							"revertReason": {
								"description": "Solidity revert reason, if any."
							},
							"type": {
								"type": "string",
								"description": "The type of call used in the transaction.",
								"enum": [
									"staticcall",
									"call",
									"delegatecall",
									"callcode",
									"create",
									"create2",
									"selfdestruct"
								]
							},
							"value": {
								"description": "The amount of ETH in wei transferred in the call.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						},
						"title": "TracerObject"
					},
					{
						"title": "TraceDetails",
						"type": "object",
						"properties": {
							"blockHash": {
								"description": "32-byte block hash in which the call was made.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							},
							"blockNumber": {
								"description": "Block number as hex-encoded unsigned integer.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"subtraces": {
								"type": "integer",
								"description": "The number of subtraces that occurred within the call."
							},
							"traceAddress": {
								"type": "array",
								"items": {
									"type": "integer"
								},
								"description": "The trace address showing the nested level of the call."
							},
							"transactionHash": {
								"description": "The transaction hash in which the call was made.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							},
							"transactionPosition": {
								"type": "integer",
								"description": "The position of the transaction within the block."
							}
						}
					}
				]
			},
			"LineaPrestateTracerConfig": {
				"type": "object",
				"required": [
					"tracerType"
				],
				"properties": {
					"tracerType": {
						"description": "The prestate tracer has two modes, `prestate` and `diff`. The prestate mode returns the accounts necessary to execute a given transaction. `diff` mode returns the differences between the transaction's pre- and post-state (what changed *because* the transaction happened). The prestateTracer defaults to `prestate` mode. It reexecutes the given transaction and tracks every part of state that's touched.",
						"type": "string",
						"enum": [
							"prestateTracer"
						]
					},
					"diffMode": {
						"type": "boolean",
						"default": false,
						"description": "Setting this to `true` enables `diff` mode. In `diff` mode, the result contains a pre and a post object."
					}
				}
			},
			"LineaPrestateTracerResponse": {
				"type": "array",
				"description": "Participant account, balance, and transaction count.",
				"items": {
					"type": "object",
					"properties": {
						"address": {
							"description": "Participant account.",
							"type": "string",
							"pattern": "^0x[0-9a-fA-F]{40}$"
						},
						"balance": {
							"description": "Balance.",
							"type": "string",
							"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
						},
						"nonce": {
							"description": "Account nonce; counter for the number of transactions sent from the account; for replay protection.",
							"type": "string",
							"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
						}
					}
				}
			},
			"LineaTracerObject": {
				"type": "object",
				"properties": {
					"from": {
						"description": "Address of the sender.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					},
					"gas": {
						"description": "Gas provided by the sender.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"gasUsed": {
						"description": "The amount of gas used for this specific transaction.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"input": {
						"description": "The input data sent to the contract (ABI-encoded).",
						"type": "string",
						"pattern": "^0x[0-9a-f]*$"
					},
					"output": {
						"description": "The output data returned by the contract.",
						"type": "string",
						"pattern": "^0x[0-9a-f]*$"
					},
					"to": {
						"description": "The contract or address being called.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					},
					"error": {
						"description": "Error, if any.",
						"type": "string"
					},
					"revertReason": {
						"description": "Solidity revert reason, if any."
					},
					"type": {
						"type": "string",
						"description": "The type of call used in the transaction.",
						"enum": [
							"staticcall",
							"call",
							"delegatecall",
							"callcode",
							"create",
							"create2",
							"selfdestruct"
						]
					},
					"value": {
						"description": "The amount of ETH in wei transferred in the call.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					}
				}
			},
			"LineaCallType": {
				"type": "string",
				"description": "The type of call used in the transaction.",
				"enum": [
					"staticcall",
					"call",
					"delegatecall",
					"callcode",
					"create",
					"create2",
					"selfdestruct"
				]
			},
			"LineaFilter": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"fromBlock": {
						"description": "Block number or string tag.",
						"oneOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"finalized",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							}
						]
					},
					"toBlock": {
						"description": "Block number or string tag.",
						"oneOf": [
							{
								"description": "Block number in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1",
								"title": "Block number"
							},
							{
								"type": "string",
								"enum": [
									"earliest",
									"finalized",
									"latest",
									"pending"
								],
								"description": "See the [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block). Note that Linea doesn't support `safe`; use `finalized` instead. Learn more about [Linea's layer 2 finalization](https://docs.linea.build/developers/guides/finalized-block).\n- `earliest`: The lowest numbered block the client has available.\n- `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. \n- `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions. \n- `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. \n",
								"title": "Block tag"
							}
						]
					},
					"address": {
						"oneOf": [
							{
								"title": "Any address",
								"type": "null"
							},
							{
								"description": "Hex-encoded address.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$",
								"title": "Address"
							},
							{
								"description": "Hex-encoded address.",
								"type": "array",
								"items": {
									"description": "Hex-encoded address.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"title": "Addresses"
							}
						]
					},
					"topics": {
						"description": "Filter topics.",
						"oneOf": [
							{
								"title": "Any topic match",
								"type": "null"
							},
							{
								"title": "Specified filter topics",
								"type": "array",
								"items": {
									"description": "Filter topic list entry.",
									"oneOf": [
										{
											"description": "32 Hex-encoded bytes.",
											"type": "string",
											"pattern": "^0x[0-9a-f]{64}$",
											"title": "Single topic match"
										},
										{
											"title": "Multiple topic match",
											"type": "array",
											"items": {
												"description": "32 Hex-encoded bytes.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											}
										}
									]
								}
							}
						]
					}
				}
			},
			"LineaAccountProof": {
				"description": "Account proof.",
				"type": "object",
				"required": [
					"address",
					"accountProof",
					"balanceeth_getBalance",
					"codeHash",
					"nonce",
					"storageHash",
					"storageProof"
				],
				"additionalProperties": false,
				"properties": {
					"address": {
						"description": "The account address for which the Merkle proof is retrieved. This is an echo of the address passed in the request.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					},
					"accountProof": {
						"description": "An array of RLP-serialized MerkleTree-Nodes, starting with the `stateRoot`-Node, following the path of the address as key.",
						"type": "array",
						"items": {
							"description": "Hex-encoded bytes.",
							"type": "string",
							"pattern": "^0x[0-9a-f]*$"
						}
					},
					"balance": {
						"description": "Hexadecimal of the balance in wei.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
					},
					"codeHash": {
						"description": "The 32-byte hash of the account's code. For EOAs, this will be the hash of an empty string. For contract accounts, it represents the hash of the deployed contract code.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"nonce": {
						"description": "Account nonce; counter for the number of transactions sent from the account.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]{0,15})|0$"
					},
					"storageHash": {
						"description": "32-byte SHA3 hash of the storage root. All storage will deliver a Merkle proof starting with this root hash.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"storageProof": {
						"description": "An array of requested storage-entries.",
						"type": "array",
						"items": {
							"type": "object",
							"required": [
								"key",
								"value",
								"proof"
							],
							"additionalProperties": false,
							"properties": {
								"key": {
									"description": "The requested storage key.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{0,64}$"
								},
								"value": {
									"description": "The storage value.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
								},
								"proof": {
									"type": "array",
									"description": "An array of RLP-serialized MerkleTree-Nodes, starting with the `storageHash` node and following the path of the key.",
									"items": {
										"description": "Hex-encoded bytes.",
										"type": "string",
										"pattern": "^0x[0-9a-f]*$"
									}
								}
							}
						}
					}
				}
			},
			"LineaStorageProof": {
				"type": "object",
				"required": [
					"key",
					"value",
					"proof"
				],
				"additionalProperties": false,
				"properties": {
					"key": {
						"description": "The requested storage key.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{0,64}$"
					},
					"value": {
						"description": "The storage value.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]{0,31})|0$"
					},
					"proof": {
						"type": "array",
						"description": "An array of RLP-serialized MerkleTree-Nodes, starting with the `storageHash` node and following the path of the key.",
						"items": {
							"description": "Hex-encoded bytes.",
							"type": "string",
							"pattern": "^0x[0-9a-f]*$"
						}
					}
				}
			},
			"LineaSyncingStatus": {
				"description": "Syncing status.",
				"oneOf": [
					{
						"title": "Syncing progress",
						"type": "object",
						"properties": {
							"startingBlock": {
								"description": "Block number at which the import started, in hexadecimal. This will only be reset after the sync reaches the head.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x8A9D0"
							},
							"currentBlock": {
								"description": "Block number of the current syncing block, in hexadecimal. This is the same as `eth_blockNumber`.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x8FA20"
							},
							"highestBlock": {
								"description": "Block number of the highest syncing block, in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x90B70"
							}
						}
					},
					{
						"title": "Not syncing",
						"description": "Should always return `false` if not syncing.",
						"properties": {
							"result": {
								"type": "boolean",
								"value": false
							}
						}
					}
				]
			},
			"LineaSubscribe": {
				"anyOf": [
					{
						"title": "newHeads",
						"description": "This subscription returns a notification each time a new header is appended to the chain, including chain reorganizations. In a chain reorganization, the subscription emits all new headers for the new chain. Therefore, the subscription can emit multiple headers at the same height.",
						"type": "string",
						"enum": [
							"newHeads"
						]
					},
					{
						"title": "logs",
						"description": "This subscription returns logs from newly imported blocks that match the specified filter criteria. If a chain reorganization occurs, logs from the old chain are resent with the removed property set to `true`. Logs from transactions that are included in the new chain are emitted. As a result, the same transaction might emit logs multiple times during a reorganization.",
						"type": "object",
						"properties": {
							"logs": {
								"type": "string",
								"enum": [
									"logs"
								]
							},
							"address": {
								"description": "Optional filter to only return logs that are created from an array of (one or more) provided addresses.",
								"type": "array",
								"items": {
									"description": "Hex-encoded address.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								}
							},
							"topics": {
								"type": "array",
								"description": "Optionally filter by [topics](https://info.etherscan.com/what-is-event-logs). Topics are made available when contracts are deployed with an indexed keyword added to the parameter declarationFilter.\n    - Topic 0: Is the first topic in the event log. It often represents an event or a primary identifier of an event, for example, the Keccak256 hash of the event signature.\n    - Topic 1: The first indexed parameter (for example, sender address).\n    - Topic 2: The second indexed parameter (for example, recipient address).\n    - Topic 3: The third indexed parameter (for example, additional event-specific data).\n",
								"items": {
									"type": "string",
									"example": "0xEventSignatureHash",
									"default": null,
									"maxItems": 4
								}
							}
						}
					},
					{
						"title": "newPendingTransactions",
						"description": "This subscription returns the hash for all transactions that are added to the pending state and are signed with a key that's available in the node. When a transaction that was previously part of the canonical chain isn't part of the new canonical chain after a reorganization, it's emitted again.",
						"type": "string",
						"enum": [
							"newPendingTransactions"
						]
					}
				]
			},
			"LineTraceTransaction": {
				"description": "An array of [calls to other contracts](https://docs.infura.io/api/networks/ethereum/json-rpc-methods/trace-methods#trace) containing one object per call, in transaction execution order.",
				"type": "array",
				"items": {
					"allOf": [
						{
							"type": "string",
							"description": "The type of call used in the transaction.",
							"enum": [
								"staticcall",
								"call",
								"delegatecall",
								"callcode",
								"create",
								"create2",
								"selfdestruct"
							],
							"title": "Call type"
						},
						{
							"type": "object",
							"allOf": [
								{
									"title": "Contextual information",
									"required": [
										"blockHash",
										"blockNumber",
										"from",
										"hash",
										"transactionIndex"
									],
									"unevaluatedProperties": false,
									"properties": {
										"blockHash": {
											"description": "Block hash, 32 byte hex identifier for the block derived from the block header.",
											"type": "string",
											"pattern": "^0x[0-9a-f]{64}$"
										},
										"blockNumber": {
											"description": "Block number as hex-encoded unsigned integer.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										},
										"from": {
											"description": "Sender's address.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										},
										"hash": {
											"description": "32 byte hex identifier for the transaction hash.",
											"type": "string",
											"pattern": "^0x[0-9a-f]{64}$"
										},
										"transactionIndex": {
											"description": "Transaction position.",
											"type": "string",
											"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
											"example": "0x1"
										}
									}
								}
							],
							"title": "Transaction context"
						}
					]
				}
			},
			"LineaTransactionContext": {
				"type": "object",
				"allOf": [
					{
						"title": "Contextual information",
						"required": [
							"blockHash",
							"blockNumber",
							"from",
							"hash",
							"transactionIndex"
						],
						"unevaluatedProperties": false,
						"properties": {
							"blockHash": {
								"description": "Block hash, 32 byte hex identifier for the block derived from the block header.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							},
							"blockNumber": {
								"description": "Block number as hex-encoded unsigned integer.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"from": {
								"description": "Sender's address.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$"
							},
							"hash": {
								"description": "32 byte hex identifier for the transaction hash.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							},
							"transactionIndex": {
								"description": "Transaction position.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						}
					}
				]
			},
			"LineaTransactionExclusion": {
				"oneOf": [
					{
						"title": "Null response",
						"type": "null"
					},
					{
						"title": "Exclusion details",
						"type": "object",
						"description": "Only returned for transactions rejected by the sequencer.",
						"properties": {
							"txHash": {
								"description": "32 byte hex identifier for the transaction hash.",
								"type": "string",
								"pattern": "^0x[0-9a-f]{64}$"
							},
							"from": {
								"description": "Sender's address.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$"
							},
							"nonce": {
								"description": "Account nonce; counter for the number of transactions sent from the account; for replay protection.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"txRejectionStage": {
								"description": "The point at which the transaction was rejected:\n  - SEQUENCER: Rejected by the sequencer\n  - RPC: Rejected by an RPC node\n  - P2P: Rejected by a P2P-connected node\n",
								"type": "string",
								"enum": [
									"SEQUENCER",
									"RPC",
									"P2P"
								]
							},
							"reasonMessage": {
								"description": "The reason the transaction was rejected.",
								"type": "string"
							},
							"blockNumber": {
								"description": "Block number of the block that the transaction was rejected from, in hexadecimal.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"timestamp": {
								"description": "Time of rejection, in ISO 8601 format.",
								"type": "string"
							}
						}
					}
				]
			},
			"LineaTransactionInfo": {
				"type": "object",
				"allOf": [
					{
						"type": "object",
						"allOf": [
							{
								"title": "Contextual information",
								"required": [
									"blockHash",
									"blockNumber",
									"from",
									"hash",
									"transactionIndex"
								],
								"unevaluatedProperties": false,
								"properties": {
									"blockHash": {
										"description": "Block hash, 32 byte hex identifier for the block derived from the block header.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									},
									"blockNumber": {
										"description": "Block number as hex-encoded unsigned integer.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"from": {
										"description": "Sender's address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$"
									},
									"hash": {
										"description": "32 byte hex identifier for the transaction hash.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									},
									"transactionIndex": {
										"description": "Transaction position.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									}
								}
							}
						],
						"title": "Linea transaction context"
					},
					{
						"oneOf": [
							{
								"type": "object",
								"allOf": [
									{
										"type": "object",
										"description": "EIP-1559 transaction.",
										"required": [
											"type",
											"nonce",
											"gas",
											"value",
											"input",
											"maxFeePerGas",
											"maxPriorityFeePerGas",
											"gasPrice",
											"chainId",
											"accessList"
										],
										"properties": {
											"type": {
												"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
												"type": "string",
												"enum": [
													0,
													1,
													2,
													3
												]
											},
											"nonce": {
												"description": "A counter for the number of transactions sent from the account; used for replay protection..",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"to": {
												"description": "The recipient's address. `null` when it's a contract creation transaction.",
												"oneOf": [
													{
														"title": "Contract creation",
														"type": "null"
													},
													{
														"description": "Hex-encoded address.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$",
														"title": "Address"
													}
												]
											},
											"gas": {
												"description": "Gas limit.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"value": {
												"description": "Value.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"input": {
												"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
												"type": "string",
												"pattern": "^0x[0-9a-f]*$"
											},
											"maxPriorityFeePerGas": {
												"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"maxFeePerGas": {
												"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.\n",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"gasPrice": {
												"description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using `effectiveGasPrice` in the receipt object going forward.\n",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"accessList": {
												"description": "EIP-2930 access list.",
												"type": "array",
												"items": {
													"description": "Access list entry.",
													"type": "object",
													"additionalProperties": false,
													"properties": {
														"address": {
															"description": "Hex-encoded address.",
															"type": "string",
															"pattern": "^0x[0-9a-fA-F]{40}$"
														},
														"storageKeys": {
															"type": "array",
															"items": {
																"description": "32 byte hex value.",
																"type": "string",
																"pattern": "^0x[0-9a-f]{64}$"
															}
														}
													}
												}
											},
											"chainId": {
												"description": "Chain ID that this transaction is valid on.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											}
										},
										"title": "Unsigned 1559 transaction"
									},
									{
										"type": "object",
										"required": [
											"r",
											"s"
										],
										"properties": {
											"v": {
												"description": "ECDSA Recovery ID. An alternative to `yParity`.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"r": {
												"description": "ECDSA signature r.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"s": {
												"description": "ECDSA signature s.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											}
										},
										"title": "Signature properties"
									}
								],
								"title": "Signed 1559 transaction"
							},
							{
								"type": "object",
								"allOf": [
									{
										"type": "object",
										"description": "EIP-2930 transaction.",
										"required": [
											"type",
											"nonce",
											"gas",
											"value",
											"input",
											"gasPrice",
											"chainId",
											"accessList"
										],
										"properties": {
											"type": {
												"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
												"type": "string",
												"enum": [
													0,
													1,
													2,
													3
												]
											},
											"nonce": {
												"description": "A counter for the number of transactions sent from the account; used for replay protection.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"to": {
												"description": "The recipient's address. `null` when it's a contract creation transaction.",
												"oneOf": [
													{
														"title": "Contract creation",
														"type": "null"
													},
													{
														"description": "Hex-encoded address.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$",
														"title": "Address"
													}
												]
											},
											"gas": {
												"description": "Gas limit.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"value": {
												"description": "Value.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"input": {
												"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
												"type": "string",
												"pattern": "^0x[0-9a-f]*$"
											},
											"gasPrice": {
												"description": "The gas price the sender is willing to be paid in wei.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"accessList": {
												"description": "EIP-2930 access list.",
												"type": "array",
												"items": {
													"description": "Access list entry.",
													"type": "object",
													"additionalProperties": false,
													"properties": {
														"address": {
															"description": "Hex-encoded address.",
															"type": "string",
															"pattern": "^0x[0-9a-fA-F]{40}$"
														},
														"storageKeys": {
															"type": "array",
															"items": {
																"description": "32 byte hex value.",
																"type": "string",
																"pattern": "^0x[0-9a-f]{64}$"
															}
														}
													}
												}
											},
											"chainId": {
												"description": "Chain ID that this transaction is valid on.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											}
										},
										"title": "Unsigned 2930 transaction"
									},
									{
										"type": "object",
										"required": [
											"r",
											"s"
										],
										"properties": {
											"v": {
												"description": "ECDSA Recovery ID. An alternative to `yParity`.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"r": {
												"description": "ECDSA signature r.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"s": {
												"description": "ECDSA signature s.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											}
										},
										"title": "Signature properties"
									}
								],
								"title": "Signed 2930 transaction"
							},
							{
								"description": "Signed Legacy Transaction.",
								"type": "object",
								"allOf": [
									{
										"type": "object",
										"description": "Legacy transaction.",
										"required": [
											"type",
											"nonce",
											"gas",
											"value",
											"input",
											"gasPrice"
										],
										"properties": {
											"type": {
												"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
												"type": "string",
												"enum": [
													0,
													1,
													2,
													3
												]
											},
											"nonce": {
												"description": "A counter for the number of transactions sent from the account; used for replay protection.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"to": {
												"description": "The recipient's address. `null` when it's a contract creation transaction.",
												"oneOf": [
													{
														"title": "Contract creation",
														"type": "null"
													},
													{
														"description": "Hex-encoded address.",
														"type": "string",
														"pattern": "^0x[0-9a-fA-F]{40}$",
														"title": "Address"
													}
												]
											},
											"gas": {
												"description": "Gas limit.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"value": {
												"description": "Value.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"input": {
												"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
												"type": "string",
												"pattern": "^0x[0-9a-f]*$"
											},
											"gasPrice": {
												"description": "The gas price the sender is willing to pay in wei.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"chainId": {
												"description": "Chain ID that this transaction is valid on.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											}
										},
										"title": "Unsigned Legacy transaction"
									},
									{
										"title": "Legacy transaction signature properties",
										"required": [
											"v",
											"r",
											"s"
										],
										"properties": {
											"v": {
												"description": "ECDSA Recovery ID.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"r": {
												"description": "ECDSA signature r.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											},
											"s": {
												"description": "ECDSA signature s.",
												"type": "string",
												"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
												"example": "0x1"
											}
										}
									}
								],
								"title": "Signed legacy transaction"
							}
						],
						"title": "Signed transaction"
					}
				]
			},
			"LineaTxType": {
				"description": "The transaction type as introduced in EIP-2718, in hexadecimal. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType (EIP-2930)\n- 0x02 for DynamicFeeTxType (EIP-1559)\n",
				"type": "string",
				"enum": [
					"0x00",
					"0x01",
					"0x02"
				]
			},
			"LineaTransactionSigned": {
				"oneOf": [
					{
						"type": "object",
						"allOf": [
							{
								"type": "object",
								"description": "EIP-1559 transaction.",
								"required": [
									"type",
									"nonce",
									"gas",
									"value",
									"input",
									"maxFeePerGas",
									"maxPriorityFeePerGas",
									"gasPrice",
									"chainId",
									"accessList"
								],
								"properties": {
									"type": {
										"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
										"type": "string",
										"enum": [
											0,
											1,
											2,
											3
										]
									},
									"nonce": {
										"description": "A counter for the number of transactions sent from the account; used for replay protection..",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"to": {
										"description": "The recipient's address. `null` when it's a contract creation transaction.",
										"oneOf": [
											{
												"title": "Contract creation",
												"type": "null"
											},
											{
												"description": "Hex-encoded address.",
												"type": "string",
												"pattern": "^0x[0-9a-fA-F]{40}$",
												"title": "Address"
											}
										]
									},
									"gas": {
										"description": "Gas limit.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"value": {
										"description": "Value.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"input": {
										"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
										"type": "string",
										"pattern": "^0x[0-9a-f]*$"
									},
									"maxPriorityFeePerGas": {
										"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"maxFeePerGas": {
										"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.\n",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"gasPrice": {
										"description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using `effectiveGasPrice` in the receipt object going forward.\n",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"accessList": {
										"description": "EIP-2930 access list.",
										"type": "array",
										"items": {
											"description": "Access list entry.",
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"address": {
													"description": "Hex-encoded address.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$"
												},
												"storageKeys": {
													"type": "array",
													"items": {
														"description": "32 byte hex value.",
														"type": "string",
														"pattern": "^0x[0-9a-f]{64}$"
													}
												}
											}
										}
									},
									"chainId": {
										"description": "Chain ID that this transaction is valid on.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									}
								},
								"title": "Unsigned 1559 transaction"
							},
							{
								"type": "object",
								"required": [
									"r",
									"s"
								],
								"properties": {
									"v": {
										"description": "ECDSA Recovery ID. An alternative to `yParity`.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"r": {
										"description": "ECDSA signature r.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"s": {
										"description": "ECDSA signature s.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									}
								},
								"title": "Signature properties"
							}
						],
						"title": "Signed 1559 transaction"
					},
					{
						"type": "object",
						"allOf": [
							{
								"type": "object",
								"description": "EIP-2930 transaction.",
								"required": [
									"type",
									"nonce",
									"gas",
									"value",
									"input",
									"gasPrice",
									"chainId",
									"accessList"
								],
								"properties": {
									"type": {
										"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
										"type": "string",
										"enum": [
											0,
											1,
											2,
											3
										]
									},
									"nonce": {
										"description": "A counter for the number of transactions sent from the account; used for replay protection.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"to": {
										"description": "The recipient's address. `null` when it's a contract creation transaction.",
										"oneOf": [
											{
												"title": "Contract creation",
												"type": "null"
											},
											{
												"description": "Hex-encoded address.",
												"type": "string",
												"pattern": "^0x[0-9a-fA-F]{40}$",
												"title": "Address"
											}
										]
									},
									"gas": {
										"description": "Gas limit.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"value": {
										"description": "Value.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"input": {
										"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
										"type": "string",
										"pattern": "^0x[0-9a-f]*$"
									},
									"gasPrice": {
										"description": "The gas price the sender is willing to be paid in wei.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"accessList": {
										"description": "EIP-2930 access list.",
										"type": "array",
										"items": {
											"description": "Access list entry.",
											"type": "object",
											"additionalProperties": false,
											"properties": {
												"address": {
													"description": "Hex-encoded address.",
													"type": "string",
													"pattern": "^0x[0-9a-fA-F]{40}$"
												},
												"storageKeys": {
													"type": "array",
													"items": {
														"description": "32 byte hex value.",
														"type": "string",
														"pattern": "^0x[0-9a-f]{64}$"
													}
												}
											}
										}
									},
									"chainId": {
										"description": "Chain ID that this transaction is valid on.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									}
								},
								"title": "Unsigned 2930 transaction"
							},
							{
								"type": "object",
								"required": [
									"r",
									"s"
								],
								"properties": {
									"v": {
										"description": "ECDSA Recovery ID. An alternative to `yParity`.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"r": {
										"description": "ECDSA signature r.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"s": {
										"description": "ECDSA signature s.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									}
								},
								"title": "Signature properties"
							}
						],
						"title": "Signed 2930 transaction"
					},
					{
						"description": "Signed Legacy Transaction.",
						"type": "object",
						"allOf": [
							{
								"type": "object",
								"description": "Legacy transaction.",
								"required": [
									"type",
									"nonce",
									"gas",
									"value",
									"input",
									"gasPrice"
								],
								"properties": {
									"type": {
										"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
										"type": "string",
										"enum": [
											0,
											1,
											2,
											3
										]
									},
									"nonce": {
										"description": "A counter for the number of transactions sent from the account; used for replay protection.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"to": {
										"description": "The recipient's address. `null` when it's a contract creation transaction.",
										"oneOf": [
											{
												"title": "Contract creation",
												"type": "null"
											},
											{
												"description": "Hex-encoded address.",
												"type": "string",
												"pattern": "^0x[0-9a-fA-F]{40}$",
												"title": "Address"
											}
										]
									},
									"gas": {
										"description": "Gas limit.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"value": {
										"description": "Value.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"input": {
										"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
										"type": "string",
										"pattern": "^0x[0-9a-f]*$"
									},
									"gasPrice": {
										"description": "The gas price the sender is willing to pay in wei.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"chainId": {
										"description": "Chain ID that this transaction is valid on.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									}
								},
								"title": "Unsigned Legacy transaction"
							},
							{
								"title": "Legacy transaction signature properties",
								"required": [
									"v",
									"r",
									"s"
								],
								"properties": {
									"v": {
										"description": "ECDSA Recovery ID.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"r": {
										"description": "ECDSA signature r.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									},
									"s": {
										"description": "ECDSA signature s.",
										"type": "string",
										"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
										"example": "0x1"
									}
								}
							}
						],
						"title": "Signed legacy transaction"
					}
				]
			},
			"LineaTransaction2930Signed": {
				"type": "object",
				"allOf": [
					{
						"type": "object",
						"description": "EIP-2930 transaction.",
						"required": [
							"type",
							"nonce",
							"gas",
							"value",
							"input",
							"gasPrice",
							"chainId",
							"accessList"
						],
						"properties": {
							"type": {
								"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
								"type": "string",
								"enum": [
									0,
									1,
									2,
									3
								]
							},
							"nonce": {
								"description": "A counter for the number of transactions sent from the account; used for replay protection.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"to": {
								"description": "The recipient's address. `null` when it's a contract creation transaction.",
								"oneOf": [
									{
										"title": "Contract creation",
										"type": "null"
									},
									{
										"description": "Hex-encoded address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$",
										"title": "Address"
									}
								]
							},
							"gas": {
								"description": "Gas limit.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"value": {
								"description": "Value.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"input": {
								"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							},
							"gasPrice": {
								"description": "The gas price the sender is willing to be paid in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"accessList": {
								"description": "EIP-2930 access list.",
								"type": "array",
								"items": {
									"description": "Access list entry.",
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"address": {
											"description": "Hex-encoded address.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										},
										"storageKeys": {
											"type": "array",
											"items": {
												"description": "32 byte hex value.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											}
										}
									}
								}
							},
							"chainId": {
								"description": "Chain ID that this transaction is valid on.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						},
						"title": "Unsigned 2930 transaction"
					},
					{
						"type": "object",
						"required": [
							"r",
							"s"
						],
						"properties": {
							"v": {
								"description": "ECDSA Recovery ID. An alternative to `yParity`.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"r": {
								"description": "ECDSA signature r.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"s": {
								"description": "ECDSA signature s.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						},
						"title": "Signature properties"
					}
				]
			},
			"LineaTransactionSignatureProperties": {
				"type": "object",
				"required": [
					"r",
					"s"
				],
				"properties": {
					"v": {
						"description": "ECDSA Recovery ID. An alternative to `yParity`.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"r": {
						"description": "ECDSA signature r.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"s": {
						"description": "ECDSA signature s.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					}
				}
			},
			"LineaTransaction1559Signed": {
				"type": "object",
				"allOf": [
					{
						"type": "object",
						"description": "EIP-1559 transaction.",
						"required": [
							"type",
							"nonce",
							"gas",
							"value",
							"input",
							"maxFeePerGas",
							"maxPriorityFeePerGas",
							"gasPrice",
							"chainId",
							"accessList"
						],
						"properties": {
							"type": {
								"description": "Hex-encoded byte for transaction type as introduced in EIP-2718. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType\n- 0x02 for DynamicFeeTxType\n- 0x03 for BlobTxType\n",
								"type": "string",
								"enum": [
									0,
									1,
									2,
									3
								]
							},
							"nonce": {
								"description": "A counter for the number of transactions sent from the account; used for replay protection..",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"to": {
								"description": "The recipient's address. `null` when it's a contract creation transaction.",
								"oneOf": [
									{
										"title": "Contract creation",
										"type": "null"
									},
									{
										"description": "Hex-encoded address.",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$",
										"title": "Address"
									}
								]
							},
							"gas": {
								"description": "Gas limit.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"value": {
								"description": "Value.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"input": {
								"description": "Alternative term for `data`. The hash of the method signature and encoded parameters. For more information, see the Contract ABI description in the Solidity documentation.",
								"type": "string",
								"pattern": "^0x[0-9a-f]*$"
							},
							"maxPriorityFeePerGas": {
								"description": "Maximum fee per gas the sender is willing to pay to miners in wei.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"maxFeePerGas": {
								"description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei.\n",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"gasPrice": {
								"description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using `effectiveGasPrice` in the receipt object going forward.\n",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"accessList": {
								"description": "EIP-2930 access list.",
								"type": "array",
								"items": {
									"description": "Access list entry.",
									"type": "object",
									"additionalProperties": false,
									"properties": {
										"address": {
											"description": "Hex-encoded address.",
											"type": "string",
											"pattern": "^0x[0-9a-fA-F]{40}$"
										},
										"storageKeys": {
											"type": "array",
											"items": {
												"description": "32 byte hex value.",
												"type": "string",
												"pattern": "^0x[0-9a-f]{64}$"
											}
										}
									}
								}
							},
							"chainId": {
								"description": "Chain ID that this transaction is valid on.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						},
						"title": "Unsigned 1559 transaction"
					},
					{
						"type": "object",
						"required": [
							"r",
							"s"
						],
						"properties": {
							"v": {
								"description": "ECDSA Recovery ID. An alternative to `yParity`.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"r": {
								"description": "ECDSA signature r.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							},
							"s": {
								"description": "ECDSA signature s.",
								"type": "string",
								"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
								"example": "0x1"
							}
						},
						"title": "Signature properties"
					}
				]
			},
			"LineaReceiptInfo": {
				"type": "object",
				"description": "Receipt information",
				"required": [
					"blockHash",
					"blockNumber",
					"from",
					"cumulativeGasUsed",
					"gasUsed",
					"logs",
					"logsBloom",
					"transactionHash",
					"transactionIndex",
					"effectiveGasPrice"
				],
				"additionalProperties": false,
				"properties": {
					"type": {
						"description": "The transaction type as introduced in EIP-2718, in hexadecimal. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType (EIP-2930)\n- 0x02 for DynamicFeeTxType (EIP-1559)\n",
						"type": "string",
						"enum": [
							"0x00",
							"0x01",
							"0x02"
						]
					},
					"transactionHash": {
						"description": "The transaction hash in which the call was made.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"transactionIndex": {
						"description": "The position in the block, in hexadecimal.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"blockHash": {
						"description": "Block hash; 32 byte hex identifier for the block derived from the block header.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"blockNumber": {
						"description": "Block number as hex-encoded unsigned integer.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"from": {
						"description": "Address of the sender.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					},
					"to": {
						"description": "Address of the receiver or null in a contract creation transaction.",
						"oneOf": [
							{
								"title": "Contract Creation (null)",
								"type": "null"
							},
							{
								"description": "Hex-encoded address.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$",
								"title": "Recipient Address"
							}
						]
					},
					"cumulativeGasUsed": {
						"description": "The sum of gas used by this transaction and all preceding transactions in the same block.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"gasUsed": {
						"description": "The amount of gas used for this specific transaction alone.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"contractAddress": {
						"description": "The contract address created, if the transaction was a contract creation, otherwise null.",
						"oneOf": [
							{
								"description": "Hex-encoded address.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$",
								"title": "Contract address"
							},
							{
								"title": "Null",
								"type": "null"
							}
						]
					},
					"logs": {
						"type": "array",
						"items": {
							"type": "object",
							"required": [
								"transactionHash"
							],
							"additionalProperties": false,
							"properties": {
								"removed": {
									"type": "boolean"
								},
								"logIndex": {
									"description": "Hex-encoded unsigned integer.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"transactionIndex": {
									"description": "A hexadecimal of the integer representing the position in the block.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"transactionHash": {
									"description": "The transaction hash in which the call was made.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"blockHash": {
									"description": "Block hash; 32 byte hex identifier for the block derived from the block header.",
									"type": "string",
									"pattern": "^0x[0-9a-f]{64}$"
								},
								"blockNumber": {
									"description": "Block number as hex-encoded unsigned integer.",
									"type": "string",
									"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
									"example": "0x1"
								},
								"address": {
									"description": "Hex-encoded address.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"data": {
									"description": "Hex-encoded bytes.",
									"type": "string",
									"pattern": "^0x[0-9a-f]*$"
								},
								"topics": {
									"type": "array",
									"items": {
										"description": "32 Hex-encoded bytes.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									}
								}
							}
						}
					},
					"logsBloom": {
						"description": "Bloom filter for the block logs; `null` when block is pending.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{512}$"
					},
					"root": {
						"description": "The post-transaction state root. Only specified for transactions included before the Byzantium upgrade.",
						"type": "string",
						"pattern": "^0x[0-9a-f]{64}$"
					},
					"status": {
						"description": "Either 0x1 (success) or 0x0 (failure). Only specified for transactions included after the Byzantium upgrade.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1",
						"enum": [
							"0x0",
							"0x1"
						]
					},
					"effectiveGasPrice": {
						"description": "The actual value per gas deducted from the sender's account. Before EIP-1559, this is equal to the transaction's gas price. After, it is equal to baseFeePerGas + min(maxFeePerGas - baseFeePerGas, maxPriorityFeePerGas).",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					}
				}
			},
			"LineaGenericTransaction": {
				"type": "object",
				"description": "Transaction object generic to all Linea-supported transactions. All transaction call object parameters are optional.",
				"additionalProperties": false,
				"properties": {
					"type": {
						"description": "The transaction type as introduced in EIP-2718, in hexadecimal. Use:\n- 0x00 for LegacyTxType\n- 0x01 for AccessListTxType (EIP-2930)\n- 0x02 for DynamicFeeTxType (EIP-1559)\n",
						"type": "string",
						"enum": [
							"0x00",
							"0x01",
							"0x02"
						]
					},
					"nonce": {
						"description": "Account nonce; counter for the number of transactions sent from the account; for replay protection.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"to": {
						"description": "Address of the action receiver.",
						"oneOf": [
							{
								"title": "Contract Creation (null)",
								"type": "null"
							},
							{
								"description": "Hex-encoded address.",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$",
								"title": "Address"
							}
						]
					},
					"from": {
						"description": "Address of the sender.",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					},
					"gas": {
						"description": "Gas provided by the sender. `eth_call` consumes zero gas, but this schema supports other executions that might need this parameter. `eth_estimateGas` ignores this value.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"value": {
						"description": "Value to transfer in wei.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"input": {
						"description": "Input data; alternative term for `data`.",
						"type": "string",
						"pattern": "^0x[0-9a-f]*$"
					},
					"gasPrice": {
						"description": "The gas price the sender is willing to pay in wei. Used only in non-[EIP-1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md) transactions.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1",
						"default": "0x0"
					},
					"maxPriorityFeePerGas": {
						"description": "Maximum fee, in wei, the sender is willing to pay per gas above the base fee. Can be used only in [EIP-1559 transactions](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md). If used, must specify `maxFeePerGas`.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"maxFeePerGas": {
						"description": "Maximum total fee (base fee + priority fee), in wei, the sender is willing to pay per gas. Can be used only in [EIP-1559 transactions](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md). If used, must specify `maxPriorityFeePerGas`.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					},
					"accessList": {
						"description": "EIP-2930 access list; a list of addresses and storage keys that the transaction plans to access.",
						"type": "array",
						"items": {
							"description": "Access list entry.",
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"address": {
									"description": "Hex-encoded address.",
									"type": "string",
									"pattern": "^0x[0-9a-fA-F]{40}$"
								},
								"storageKeys": {
									"type": "array",
									"items": {
										"description": "32 byte hex value.",
										"type": "string",
										"pattern": "^0x[0-9a-f]{64}$"
									}
								}
							}
						}
					},
					"chainId": {
						"description": "Chain ID that this transaction is valid on.",
						"type": "string",
						"pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
						"example": "0x1"
					}
				}
			}
		},
		"tags": {
			"Archive": {
				"name": "Archive",
				"description": "Served by an archive node."
			},
			"Bespoke": {
				"name": "Bespoke",
				"description": "Custom APIs built for specific clients or highly specialized use cases or clients; not available as standard EVM or MetaMask methods.\n"
			},
			"Besu": {
				"name": "Besu",
				"description": "Served by a Besu node."
			},
			"OpenBeta": {
				"name": "Beta",
				"description": "Available as a beta version; use at your own risk."
			},
			"CustomPlan": {
				"name": "Custom plan",
				"description": "Infura's advanced API methods offered through custom arrangements."
			},
			"Deprecated": {
				"name": "Deprecated",
				"description": "Deprecated methods."
			},
			"DINParther": {
				"name": "DIN",
				"description": "Infura's DIN partners support the network."
			},
			"Ethereum": {
				"name": "EVM",
				"description": "Ethereum execution API methods. These methods cover basic transaction calls, block information, and account management available in Ethereum's [`execution-apis`](https://github.com/ethereum/execution-apis/) repository.\nThese are standard Ethereum JSON-RPC API methods. See the [Ethereum wiki](https://eth.wiki/json-rpc/API#json-rpc-methods) for more information about these methods.\"\n"
			},
			"Experimental": {
				"name": "Experimental",
				"description": "Publicly available but may not be stable or fully supported; experimental. Methods may have limited support and could change or be deprecated. Users are advised to use these at their own risk."
			},
			"Geth": {
				"name": "Geth",
				"description": "Served by a Geth node."
			},
			"Internal": {
				"name": "Internal",
				"description": "Not available to public."
			},
			"MetaMask": {
				"name": "MetaMask",
				"description": "MetaMask-specific methods."
			},
			"PaidPlan": {
				"name": "Paid plan",
				"description": "Infura's paid plans giving access to advanced API methods that offer extended functionality such as access to archive data, IPFS gateway, and specialized performance optimizations."
			},
			"WSS": {
				"name": "WebSocket",
				"description": "WebSocket requests are supported in Linea via a virtualization service. An alternative, dedicated URL must be applied."
			}
		}
	}
}